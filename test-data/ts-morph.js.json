{
  "nodes": [
    {
      "id": "common",
      "name": "common",
      "val": 41
    },
    {
      "id": "CodeBlockWriter",
      "name": "CodeBlockWriter",
      "val": 51
    },
    {
      "id": "_interopDefaultLegacy",
      "name": "_interopDefaultLegacy",
      "val": 116
    },
    {
      "id": "CodeBlockWriter__default",
      "name": "CodeBlockWriter__default",
      "val": 83
    },
    {
      "id": "AdvancedIterator",
      "name": "AdvancedIterator",
      "val": 1831
    },
    {
      "id": "CharCodes",
      "name": "CharCodes",
      "val": 231
    },
    {
      "id": "getNodeByNameOrFindFunction",
      "name": "getNodeByNameOrFindFunction",
      "val": 271
    },
    {
      "id": "nodeHasName",
      "name": "nodeHasName",
      "val": 474
    },
    {
      "id": "getNotFoundErrorMessageForNameOrFindFunction",
      "name": "getNotFoundErrorMessageForNameOrFindFunction",
      "val": 299
    },
    {
      "id": "getParentSyntaxList",
      "name": "getParentSyntaxList",
      "val": 547
    },
    {
      "id": "getSymbolByNameOrFindFunction",
      "name": "getSymbolByNameOrFindFunction",
      "val": 273
    },
    {
      "id": "isNodeAmbientOrInAmbientContext",
      "name": "isNodeAmbientOrInAmbientContext",
      "val": 310
    },
    {
      "id": "checkNodeIsAmbient",
      "name": "checkNodeIsAmbient",
      "val": 273
    },
    {
      "id": "isStringKind",
      "name": "isStringKind",
      "val": 383
    },
    {
      "id": "ModuleUtils",
      "name": "ModuleUtils",
      "val": 468
    },
    {
      "id": "printNode",
      "name": "printNode",
      "val": 1970
    },
    {
      "id": "ManipulationSettingsContainer",
      "name": "ManipulationSettingsContainer",
      "val": 2822
    },
    {
      "id": "setValueIfUndefined",
      "name": "setValueIfUndefined",
      "val": 162
    },
    {
      "id": "fillDefaultEditorSettings",
      "name": "fillDefaultEditorSettings",
      "val": 587
    },
    {
      "id": "fillDefaultFormatCodeSettings",
      "name": "fillDefaultFormatCodeSettings",
      "val": 1289
    },
    {
      "id": "getTextFromStringOrWriter",
      "name": "getTextFromStringOrWriter",
      "val": 166
    },
    {
      "id": "printTextFromStringOrWriter",
      "name": "printTextFromStringOrWriter",
      "val": 502
    },
    {
      "id": "EnableableLogger",
      "name": "EnableableLogger",
      "val": 333
    },
    {
      "id": "ConsoleLogger",
      "name": "ConsoleLogger",
      "val": 173
    },
    {
      "id": "reg",
      "name": "reg",
      "val": 11249
    },
    {
      "id": "isValidVariableName",
      "name": "isValidVariableName",
      "val": 85
    },
    {
      "id": "newLineKindToString",
      "name": "newLineKindToString",
      "val": 340
    },
    {
      "id": "LazyReferenceCoordinator",
      "name": "LazyReferenceCoordinator",
      "val": 1395
    },
    {
      "id": "SourceFileReferenceContainer",
      "name": "SourceFileReferenceContainer",
      "val": 3839
    },
    {
      "id": "getCompilerOptionsFromTsConfig",
      "name": "getCompilerOptionsFromTsConfig",
      "val": 283
    },
    {
      "id": "WriterUtils",
      "name": "WriterUtils",
      "val": 515
    },
    {
      "id": "callBaseGetStructure",
      "name": "callBaseGetStructure",
      "val": 352
    },
    {
      "id": "callBaseSet",
      "name": "callBaseSet",
      "val": 145
    },
    {
      "id": "AmbientableNode",
      "name": "AmbientableNode",
      "val": 1122
    },
    {
      "id": "FormattingKind",
      "name": "FormattingKind",
      "val": 19
    },
    {
      "id": "getClassMemberFormatting",
      "name": "getClassMemberFormatting",
      "val": 263
    },
    {
      "id": "hasBody",
      "name": "hasBody",
      "val": 188
    },
    {
      "id": "getFormattingKindText",
      "name": "getFormattingKindText",
      "val": 520
    },
    {
      "id": "getInterfaceMemberFormatting",
      "name": "getInterfaceMemberFormatting",
      "val": 96
    },
    {
      "id": "hasBody$1",
      "name": "hasBody$1",
      "val": 275
    },
    {
      "id": "getStatementedNodeChildFormatting",
      "name": "getStatementedNodeChildFormatting",
      "val": 171
    },
    {
      "id": "getClausedNodeChildFormatting",
      "name": "getClausedNodeChildFormatting",
      "val": 97
    },
    {
      "id": "getGeneralFormatting",
      "name": "getGeneralFormatting",
      "val": 306
    },
    {
      "id": "getTextFromTextChanges",
      "name": "getTextFromTextChanges",
      "val": 1153
    },
    {
      "id": "getNewInsertCode",
      "name": "getNewInsertCode",
      "val": 1168
    },
    {
      "id": "scanner",
      "name": "scanner",
      "val": 77
    },
    {
      "id": "appendCommaToText",
      "name": "appendCommaToText",
      "val": 188
    },
    {
      "id": "getAppendCommaPos",
      "name": "getAppendCommaPos",
      "val": 416
    },
    {
      "id": "getEndIndexFromArray",
      "name": "getEndIndexFromArray",
      "val": 170
    },
    {
      "id": "getNextMatchingPos",
      "name": "getNextMatchingPos",
      "val": 250
    },
    {
      "id": "getPreviousMatchingPos",
      "name": "getPreviousMatchingPos",
      "val": 248
    },
    {
      "id": "getNextNonWhitespacePos",
      "name": "getNextNonWhitespacePos",
      "val": 110
    },
    {
      "id": "getPreviousNonWhitespacePos",
      "name": "getPreviousNonWhitespacePos",
      "val": 118
    },
    {
      "id": "isNotWhitespace",
      "name": "isNotWhitespace",
      "val": 105
    },
    {
      "id": "getPosAtEndOfPreviousLine",
      "name": "getPosAtEndOfPreviousLine",
      "val": 272
    },
    {
      "id": "getPosAtNextNonBlankLine",
      "name": "getPosAtNextNonBlankLine",
      "val": 486
    },
    {
      "id": "getPosAtStartOfLineOrNonWhitespace",
      "name": "getPosAtStartOfLineOrNonWhitespace",
      "val": 328
    },
    {
      "id": "getInsertPosFromIndex",
      "name": "getInsertPosFromIndex",
      "val": 863
    },
    {
      "id": "getEndPosFromIndex",
      "name": "getEndPosFromIndex",
      "val": 834
    },
    {
      "id": "getParentContainerOrThrow",
      "name": "getParentContainerOrThrow",
      "val": 518
    },
    {
      "id": "fromAbstractableNode",
      "name": "fromAbstractableNode",
      "val": 104
    },
    {
      "id": "fromAmbientableNode",
      "name": "fromAmbientableNode",
      "val": 117
    },
    {
      "id": "fromExportableNode",
      "name": "fromExportableNode",
      "val": 160
    },
    {
      "id": "fromStaticableNode",
      "name": "fromStaticableNode",
      "val": 98
    },
    {
      "id": "fromScopedNode",
      "name": "fromScopedNode",
      "val": 128
    },
    {
      "id": "fromQuestionTokenableNode",
      "name": "fromQuestionTokenableNode",
      "val": 121
    },
    {
      "id": "getNodesToReturn",
      "name": "getNodesToReturn",
      "val": 495
    },
    {
      "id": "getRangeWithoutCommentsFromArray",
      "name": "getRangeWithoutCommentsFromArray",
      "val": 931
    },
    {
      "id": "fromConstructorDeclarationOverload",
      "name": "fromConstructorDeclarationOverload",
      "val": 171
    },
    {
      "id": "fromMethodDeclarationOverload",
      "name": "fromMethodDeclarationOverload",
      "val": 382
    },
    {
      "id": "fromFunctionDeclarationOverload",
      "name": "fromFunctionDeclarationOverload",
      "val": 242
    },
    {
      "id": "verifyAndGetIndex",
      "name": "verifyAndGetIndex",
      "val": 450
    },
    {
      "id": "CompilerCommentNode",
      "name": "CompilerCommentNode",
      "val": 1486
    },
    {
      "id": "CompilerCommentStatement",
      "name": "CompilerCommentStatement",
      "val": 187
    },
    {
      "id": "CompilerCommentClassElement",
      "name": "CompilerCommentClassElement",
      "val": 193
    },
    {
      "id": "CompilerCommentTypeElement",
      "name": "CompilerCommentTypeElement",
      "val": 191
    },
    {
      "id": "CompilerCommentObjectLiteralElement",
      "name": "CompilerCommentObjectLiteralElement",
      "val": 209
    },
    {
      "id": "CompilerCommentEnumMember",
      "name": "CompilerCommentEnumMember",
      "val": 189
    },
    {
      "id": "CommentKind",
      "name": "CommentKind",
      "val": 16
    },
    {
      "id": "childrenSaver",
      "name": "childrenSaver",
      "val": 36
    },
    {
      "id": "commentNodeParserKinds",
      "name": "commentNodeParserKinds",
      "val": 469
    },
    {
      "id": "CommentNodeParser",
      "name": "CommentNodeParser",
      "val": 2524
    },
    {
      "id": "getNodes",
      "name": "getNodes",
      "val": 6562
    },
    {
      "id": "isSyntaxList",
      "name": "isSyntaxList",
      "val": 90
    },
    {
      "id": "isStatementContainerNode",
      "name": "isStatementContainerNode",
      "val": 497
    },
    {
      "id": "hasParsedTokens",
      "name": "hasParsedTokens",
      "val": 73
    },
    {
      "id": "forEachChildSaver",
      "name": "forEachChildSaver",
      "val": 40
    },
    {
      "id": "getChildrenSaver",
      "name": "getChildrenSaver",
      "val": 39
    },
    {
      "id": "ExtendedParser",
      "name": "ExtendedParser",
      "val": 2063
    },
    {
      "id": "mergeInComments",
      "name": "mergeInComments",
      "val": 461
    },
    {
      "id": "isComment",
      "name": "isComment",
      "val": 173
    },
    {
      "id": "NodeHandlerHelper",
      "name": "NodeHandlerHelper",
      "val": 2350
    },
    {
      "id": "StraightReplacementNodeHandler",
      "name": "StraightReplacementNodeHandler",
      "val": 1365
    },
    {
      "id": "ChangeChildOrderParentHandler",
      "name": "ChangeChildOrderParentHandler",
      "val": 1300
    },
    {
      "id": "DefaultParentHandler",
      "name": "DefaultParentHandler",
      "val": 2684
    },
    {
      "id": "ForgetChangedNodeHandler",
      "name": "ForgetChangedNodeHandler",
      "val": 1389
    },
    {
      "id": "ParentFinderReplacementNodeHandler",
      "name": "ParentFinderReplacementNodeHandler",
      "val": 1715
    },
    {
      "id": "areNodesEqual",
      "name": "areNodesEqual",
      "val": 244
    },
    {
      "id": "RangeHandler",
      "name": "RangeHandler",
      "val": 2193
    },
    {
      "id": "RangeParentHandler",
      "name": "RangeParentHandler",
      "val": 3918
    },
    {
      "id": "getRealEnd",
      "name": "getRealEnd",
      "val": 351
    },
    {
      "id": "RenameNodeHandler",
      "name": "RenameNodeHandler",
      "val": 2116
    },
    {
      "id": "TryOrForgetNodeHandler",
      "name": "TryOrForgetNodeHandler",
      "val": 749
    },
    {
      "id": "UnwrapParentHandler",
      "name": "UnwrapParentHandler",
      "val": 1948
    },
    {
      "id": "NodeHandlerFactory",
      "name": "NodeHandlerFactory",
      "val": 3927
    },
    {
      "id": "getSpacingBetweenNodes",
      "name": "getSpacingBetweenNodes",
      "val": 858
    },
    {
      "id": "ChangingChildOrderTextManipulator",
      "name": "ChangingChildOrderTextManipulator",
      "val": 4851
    },
    {
      "id": "FullReplacementTextManipulator",
      "name": "FullReplacementTextManipulator",
      "val": 241
    },
    {
      "id": "getTextForError",
      "name": "getTextForError",
      "val": 501
    },
    {
      "id": "InsertionTextManipulator",
      "name": "InsertionTextManipulator",
      "val": 444
    },
    {
      "id": "RemoveChildrenTextManipulator",
      "name": "RemoveChildrenTextManipulator",
      "val": 2305
    },
    {
      "id": "isNewLineAtPos",
      "name": "isNewLineAtPos",
      "val": 139
    },
    {
      "id": "hasNewLineInRange",
      "name": "hasNewLineInRange",
      "val": 186
    },
    {
      "id": "RemoveChildrenWithFormattingTextManipulator",
      "name": "RemoveChildrenWithFormattingTextManipulator",
      "val": 3127
    },
    {
      "id": "RenameLocationTextManipulator",
      "name": "RenameLocationTextManipulator",
      "val": 1166
    },
    {
      "id": "UnchangedTextManipulator",
      "name": "UnchangedTextManipulator",
      "val": 164
    },
    {
      "id": "UnwrapTextManipulator",
      "name": "UnwrapTextManipulator",
      "val": 273
    },
    {
      "id": "getReplacementText",
      "name": "getReplacementText",
      "val": 1404
    },
    {
      "id": "ManipulationError",
      "name": "ManipulationError",
      "val": 273
    },
    {
      "id": "doManipulation",
      "name": "doManipulation",
      "val": 1431
    },
    {
      "id": "getSyntacticDiagnostics",
      "name": "getSyntacticDiagnostics",
      "val": 432
    },
    {
      "id": "insertIntoParentTextRange",
      "name": "insertIntoParentTextRange",
      "val": 717
    },
    {
      "id": "insertIntoTextRange",
      "name": "insertIntoTextRange",
      "val": 344
    },
    {
      "id": "insertIntoCommaSeparatedNodes",
      "name": "insertIntoCommaSeparatedNodes",
      "val": 5811
    },
    {
      "id": "insertIntoBracesOrSourceFile",
      "name": "insertIntoBracesOrSourceFile",
      "val": 1361
    },
    {
      "id": "insertIntoBracesOrSourceFileWithGetChildren",
      "name": "insertIntoBracesOrSourceFileWithGetChildren",
      "val": 1342
    },
    {
      "id": "insertIntoBracesOrSourceFileWithGetChildrenWithComments",
      "name": "insertIntoBracesOrSourceFileWithGetChildrenWithComments",
      "val": 696
    },
    {
      "id": "changeChildOrder",
      "name": "changeChildOrder",
      "val": 211
    },
    {
      "id": "removeChildren",
      "name": "removeChildren",
      "val": 440
    },
    {
      "id": "removeChildrenWithFormattingFromCollapsibleSyntaxList",
      "name": "removeChildrenWithFormattingFromCollapsibleSyntaxList",
      "val": 504
    },
    {
      "id": "removeChildrenWithFormatting",
      "name": "removeChildrenWithFormatting",
      "val": 540
    },
    {
      "id": "removeClassMember",
      "name": "removeClassMember",
      "val": 639
    },
    {
      "id": "removeClassMembers",
      "name": "removeClassMembers",
      "val": 183
    },
    {
      "id": "removeInterfaceMember",
      "name": "removeInterfaceMember",
      "val": 102
    },
    {
      "id": "removeInterfaceMembers",
      "name": "removeInterfaceMembers",
      "val": 199
    },
    {
      "id": "removeCommaSeparatedChild",
      "name": "removeCommaSeparatedChild",
      "val": 1243
    },
    {
      "id": "removeOverloadableStatementedNodeChild",
      "name": "removeOverloadableStatementedNodeChild",
      "val": 277
    },
    {
      "id": "removeStatementedNodeChild",
      "name": "removeStatementedNodeChild",
      "val": 92
    },
    {
      "id": "removeStatementedNodeChildren",
      "name": "removeStatementedNodeChildren",
      "val": 189
    },
    {
      "id": "removeClausedNodeChild",
      "name": "removeClausedNodeChild",
      "val": 84
    },
    {
      "id": "removeClausedNodeChildren",
      "name": "removeClausedNodeChildren",
      "val": 181
    },
    {
      "id": "unwrapNode",
      "name": "unwrapNode",
      "val": 157
    },
    {
      "id": "replaceNodeText",
      "name": "replaceNodeText",
      "val": 315
    },
    {
      "id": "replaceSourceFileTextForFormatting",
      "name": "replaceSourceFileTextForFormatting",
      "val": 98
    },
    {
      "id": "replaceSourceFileTextStraight",
      "name": "replaceSourceFileTextStraight",
      "val": 261
    },
    {
      "id": "replaceSourceFileTextForRename",
      "name": "replaceSourceFileTextForRename",
      "val": 372
    },
    {
      "id": "replaceTextPossiblyCreatingChildNodes",
      "name": "replaceTextPossiblyCreatingChildNodes",
      "val": 426
    },
    {
      "id": "replaceSourceFileForFilePathMove",
      "name": "replaceSourceFileForFilePathMove",
      "val": 268
    },
    {
      "id": "replaceSourceFileForCacheUpdate",
      "name": "replaceSourceFileForCacheUpdate",
      "val": 153
    },
    {
      "id": "ArgumentedNode",
      "name": "ArgumentedNode",
      "val": 2772
    },
    {
      "id": "AsyncableNode",
      "name": "AsyncableNode",
      "val": 962
    },
    {
      "id": "AwaitableNode",
      "name": "AwaitableNode",
      "val": 1427
    },
    {
      "id": "getAwaitInsertPos",
      "name": "getAwaitInsertPos",
      "val": 276
    },
    {
      "id": "getBodyText",
      "name": "getBodyText",
      "val": 386
    },
    {
      "id": "getBodyTextWithoutLeadingIndentation",
      "name": "getBodyTextWithoutLeadingIndentation",
      "val": 693
    },
    {
      "id": "TextRange",
      "name": "TextRange",
      "val": 1316
    },
    {
      "id": "CommentRange",
      "name": "CommentRange",
      "val": 207
    },
    {
      "id": "Node",
      "name": "Node",
      "val": 108426
    },
    {
      "id": "getWrappedCondition",
      "name": "getWrappedCondition",
      "val": 158
    },
    {
      "id": "insertWhiteSpaceTextAtPos",
      "name": "insertWhiteSpaceTextAtPos",
      "val": 582
    },
    {
      "id": "getCompilerForEachDescendantsIterator",
      "name": "getCompilerForEachDescendantsIterator",
      "val": 386
    },
    {
      "id": "getCompilerDescendantsIterator",
      "name": "getCompilerDescendantsIterator",
      "val": 242
    },
    {
      "id": "useParseTreeSearchForKind",
      "name": "useParseTreeSearchForKind",
      "val": 437
    },
    {
      "id": "SyntaxList",
      "name": "SyntaxList",
      "val": 1771
    },
    {
      "id": "renameNode",
      "name": "renameNode",
      "val": 785
    },
    {
      "id": "setBodyTextForNode",
      "name": "setBodyTextForNode",
      "val": 560
    },
    {
      "id": "BodiedNode",
      "name": "BodiedNode",
      "val": 637
    },
    {
      "id": "BodyableNode",
      "name": "BodyableNode",
      "val": 1918
    },
    {
      "id": "ChildOrderableNode",
      "name": "ChildOrderableNode",
      "val": 664
    },
    {
      "id": "DecoratableNode",
      "name": "DecoratableNode",
      "val": 3028
    },
    {
      "id": "getDecoratorLines",
      "name": "getDecoratorLines",
      "val": 370
    },
    {
      "id": "getDecoratorFormattingKind",
      "name": "getDecoratorFormattingKind",
      "val": 213
    },
    {
      "id": "areDecoratorsOnSameLine",
      "name": "areDecoratorsOnSameLine",
      "val": 418
    },
    {
      "id": "DotDotDotTokenableNode",
      "name": "DotDotDotTokenableNode",
      "val": 400
    },
    {
      "id": "ExclamationTokenableNode",
      "name": "ExclamationTokenableNode",
      "val": 1985
    },
    {
      "id": "ModifierableNode",
      "name": "ModifierableNode",
      "val": 4003
    },
    {
      "id": "getAddAfterModifierTexts",
      "name": "getAddAfterModifierTexts",
      "val": 956
    },
    {
      "id": "ExportGetableNode",
      "name": "ExportGetableNode",
      "val": 3399
    },
    {
      "id": "throwForNotModifierableNode",
      "name": "throwForNotModifierableNode",
      "val": 168
    },
    {
      "id": "ExportableNode",
      "name": "ExportableNode",
      "val": 80
    },
    {
      "id": "apply",
      "name": "apply",
      "val": 2499
    },
    {
      "id": "Printer",
      "name": "Printer",
      "val": 1117
    },
    {
      "id": "InitializerExpressionableNodeStructurePrinter",
      "name": "InitializerExpressionableNodeStructurePrinter",
      "val": 523
    },
    {
      "id": "ModifierableNodeStructurePrinter",
      "name": "ModifierableNodeStructurePrinter",
      "val": 747
    },
    {
      "id": "ReturnTypedNodeStructurePrinter",
      "name": "ReturnTypedNodeStructurePrinter",
      "val": 685
    },
    {
      "id": "TypedNodeStructurePrinter",
      "name": "TypedNodeStructurePrinter",
      "val": 682
    },
    {
      "id": "BlankLineFormattingStructuresPrinter",
      "name": "BlankLineFormattingStructuresPrinter",
      "val": 424
    },
    {
      "id": "CommaSeparatedStructuresPrinter",
      "name": "CommaSeparatedStructuresPrinter",
      "val": 288
    },
    {
      "id": "printTextWithSeparator",
      "name": "printTextWithSeparator",
      "val": 1135
    },
    {
      "id": "CommaNewLineSeparatedStructuresPrinter",
      "name": "CommaNewLineSeparatedStructuresPrinter",
      "val": 297
    },
    {
      "id": "NewLineFormattingStructuresPrinter",
      "name": "NewLineFormattingStructuresPrinter",
      "val": 420
    },
    {
      "id": "SpaceFormattingStructuresPrinter",
      "name": "SpaceFormattingStructuresPrinter",
      "val": 421
    },
    {
      "id": "NodePrinter",
      "name": "NodePrinter",
      "val": 1372
    },
    {
      "id": "ClassDeclarationStructurePrinter",
      "name": "ClassDeclarationStructurePrinter",
      "val": 4148
    },
    {
      "id": "Structure",
      "name": "Structure",
      "val": 18847
    },
    {
      "id": "forEachStructureChild",
      "name": "forEachStructureChild",
      "val": 3599
    },
    {
      "id": "forClassDeclaration",
      "name": "forClassDeclaration",
      "val": 118
    },
    {
      "id": "forClassLikeDeclarationBase",
      "name": "forClassLikeDeclarationBase",
      "val": 641
    },
    {
      "id": "forDecoratableNode",
      "name": "forDecoratableNode",
      "val": 140
    },
    {
      "id": "forTypeParameteredNode",
      "name": "forTypeParameteredNode",
      "val": 163
    },
    {
      "id": "forJSDocableNode",
      "name": "forJSDocableNode",
      "val": 139
    },
    {
      "id": "forConstructorDeclaration",
      "name": "forConstructorDeclaration",
      "val": 216
    },
    {
      "id": "forFunctionLikeDeclaration",
      "name": "forFunctionLikeDeclaration",
      "val": 280
    },
    {
      "id": "forSignaturedDeclaration",
      "name": "forSignaturedDeclaration",
      "val": 114
    },
    {
      "id": "forParameteredNode",
      "name": "forParameteredNode",
      "val": 140
    },
    {
      "id": "forStatementedNode",
      "name": "forStatementedNode",
      "val": 129
    },
    {
      "id": "forConstructorDeclarationOverload",
      "name": "forConstructorDeclarationOverload",
      "val": 235
    },
    {
      "id": "forGetAccessorDeclaration",
      "name": "forGetAccessorDeclaration",
      "val": 175
    },
    {
      "id": "forMethodDeclaration",
      "name": "forMethodDeclaration",
      "val": 258
    },
    {
      "id": "forMethodDeclarationOverload",
      "name": "forMethodDeclarationOverload",
      "val": 230
    },
    {
      "id": "forPropertyDeclaration",
      "name": "forPropertyDeclaration",
      "val": 162
    },
    {
      "id": "forSetAccessorDeclaration",
      "name": "forSetAccessorDeclaration",
      "val": 175
    },
    {
      "id": "forJSDoc",
      "name": "forJSDoc",
      "val": 123
    },
    {
      "id": "forEnumDeclaration",
      "name": "forEnumDeclaration",
      "val": 188
    },
    {
      "id": "forEnumMember",
      "name": "forEnumMember",
      "val": 101
    },
    {
      "id": "forFunctionDeclaration",
      "name": "forFunctionDeclaration",
      "val": 210
    },
    {
      "id": "forFunctionDeclarationOverload",
      "name": "forFunctionDeclarationOverload",
      "val": 232
    },
    {
      "id": "forParameterDeclaration",
      "name": "forParameterDeclaration",
      "val": 113
    },
    {
      "id": "forCallSignatureDeclaration",
      "name": "forCallSignatureDeclaration",
      "val": 229
    },
    {
      "id": "forConstructSignatureDeclaration",
      "name": "forConstructSignatureDeclaration",
      "val": 234
    },
    {
      "id": "forIndexSignatureDeclaration",
      "name": "forIndexSignatureDeclaration",
      "val": 116
    },
    {
      "id": "forInterfaceDeclaration",
      "name": "forInterfaceDeclaration",
      "val": 227
    },
    {
      "id": "forTypeElementMemberedNode",
      "name": "forTypeElementMemberedNode",
      "val": 531
    },
    {
      "id": "forMethodSignature",
      "name": "forMethodSignature",
      "val": 220
    },
    {
      "id": "forPropertySignature",
      "name": "forPropertySignature",
      "val": 108
    },
    {
      "id": "forJsxElement",
      "name": "forJsxElement",
      "val": 195
    },
    {
      "id": "forJsxSelfClosingElement",
      "name": "forJsxSelfClosingElement",
      "val": 116
    },
    {
      "id": "forJsxAttributedNode",
      "name": "forJsxAttributedNode",
      "val": 131
    },
    {
      "id": "forExportDeclaration",
      "name": "forExportDeclaration",
      "val": 161
    },
    {
      "id": "forImportDeclaration",
      "name": "forImportDeclaration",
      "val": 161
    },
    {
      "id": "forModuleDeclaration",
      "name": "forModuleDeclaration",
      "val": 160
    },
    {
      "id": "forSourceFile",
      "name": "forSourceFile",
      "val": 103
    },
    {
      "id": "forVariableStatement",
      "name": "forVariableStatement",
      "val": 204
    },
    {
      "id": "forTypeAliasDeclaration",
      "name": "forTypeAliasDeclaration",
      "val": 167
    },
    {
      "id": "forAll",
      "name": "forAll",
      "val": 281
    },
    {
      "id": "forAllIfStructure",
      "name": "forAllIfStructure",
      "val": 360
    },
    {
      "id": "forAllUnknownKindIfStructure",
      "name": "forAllUnknownKindIfStructure",
      "val": 347
    },
    {
      "id": "ensureKind",
      "name": "ensureKind",
      "val": 131
    },
    {
      "id": "isStructure",
      "name": "isStructure",
      "val": 95
    },
    {
      "id": "isLastNonWhitespaceCharCloseBrace",
      "name": "isLastNonWhitespaceCharCloseBrace",
      "val": 345
    },
    {
      "id": "ClassMemberStructurePrinter",
      "name": "ClassMemberStructurePrinter",
      "val": 2459
    },
    {
      "id": "ConstructorDeclarationStructurePrinter",
      "name": "ConstructorDeclarationStructurePrinter",
      "val": 2196
    },
    {
      "id": "GetAccessorDeclarationStructurePrinter",
      "name": "GetAccessorDeclarationStructurePrinter",
      "val": 1254
    },
    {
      "id": "MethodDeclarationStructurePrinter",
      "name": "MethodDeclarationStructurePrinter",
      "val": 2820
    },
    {
      "id": "PropertyDeclarationStructurePrinter",
      "name": "PropertyDeclarationStructurePrinter",
      "val": 972
    },
    {
      "id": "SetAccessorDeclarationStructurePrinter",
      "name": "SetAccessorDeclarationStructurePrinter",
      "val": 1252
    },
    {
      "id": "StringStructurePrinter",
      "name": "StringStructurePrinter",
      "val": 250
    },
    {
      "id": "DecoratorStructurePrinter",
      "name": "DecoratorStructurePrinter",
      "val": 1183
    },
    {
      "id": "JSDocStructurePrinter",
      "name": "JSDocStructurePrinter",
      "val": 1933
    },
    {
      "id": "JSDocTagStructurePrinter",
      "name": "JSDocTagStructurePrinter",
      "val": 1801
    },
    {
      "id": "EnumDeclarationStructurePrinter",
      "name": "EnumDeclarationStructurePrinter",
      "val": 725
    },
    {
      "id": "EnumMemberStructurePrinter",
      "name": "EnumMemberStructurePrinter",
      "val": 1242
    },
    {
      "id": "ObjectLiteralExpressionPropertyStructurePrinter",
      "name": "ObjectLiteralExpressionPropertyStructurePrinter",
      "val": 1772
    },
    {
      "id": "PropertyAssignmentStructurePrinter",
      "name": "PropertyAssignmentStructurePrinter",
      "val": 292
    },
    {
      "id": "ShorthandPropertyAssignmentStructurePrinter",
      "name": "ShorthandPropertyAssignmentStructurePrinter",
      "val": 171
    },
    {
      "id": "SpreadAssignmentStructurePrinter",
      "name": "SpreadAssignmentStructurePrinter",
      "val": 273
    },
    {
      "id": "FunctionDeclarationStructurePrinter",
      "name": "FunctionDeclarationStructurePrinter",
      "val": 2938
    },
    {
      "id": "ParameterDeclarationStructurePrinter",
      "name": "ParameterDeclarationStructurePrinter",
      "val": 1496
    },
    {
      "id": "CallSignatureDeclarationStructurePrinter",
      "name": "CallSignatureDeclarationStructurePrinter",
      "val": 752
    },
    {
      "id": "ConstructSignatureDeclarationStructurePrinter",
      "name": "ConstructSignatureDeclarationStructurePrinter",
      "val": 783
    },
    {
      "id": "IndexSignatureDeclarationStructurePrinter",
      "name": "IndexSignatureDeclarationStructurePrinter",
      "val": 700
    },
    {
      "id": "InterfaceDeclarationStructurePrinter",
      "name": "InterfaceDeclarationStructurePrinter",
      "val": 1246
    },
    {
      "id": "MethodSignatureStructurePrinter",
      "name": "MethodSignatureStructurePrinter",
      "val": 845
    },
    {
      "id": "PropertySignatureStructurePrinter",
      "name": "PropertySignatureStructurePrinter",
      "val": 790
    },
    {
      "id": "TypeElementMemberedNodeStructurePrinter",
      "name": "TypeElementMemberedNodeStructurePrinter",
      "val": 1133
    },
    {
      "id": "TypeElementMemberStructurePrinter",
      "name": "TypeElementMemberStructurePrinter",
      "val": 1930
    },
    {
      "id": "JsxAttributeDeciderStructurePrinter",
      "name": "JsxAttributeDeciderStructurePrinter",
      "val": 635
    },
    {
      "id": "JsxAttributeStructurePrinter",
      "name": "JsxAttributeStructurePrinter",
      "val": 256
    },
    {
      "id": "JsxChildDeciderStructurePrinter",
      "name": "JsxChildDeciderStructurePrinter",
      "val": 626
    },
    {
      "id": "JsxElementStructurePrinter",
      "name": "JsxElementStructurePrinter",
      "val": 1059
    },
    {
      "id": "JsxSelfClosingElementStructurePrinter",
      "name": "JsxSelfClosingElementStructurePrinter",
      "val": 627
    },
    {
      "id": "JsxSpreadAttributeStructurePrinter",
      "name": "JsxSpreadAttributeStructurePrinter",
      "val": 252
    },
    {
      "id": "ExportAssignmentStructurePrinter",
      "name": "ExportAssignmentStructurePrinter",
      "val": 630
    },
    {
      "id": "ExportDeclarationStructurePrinter",
      "name": "ExportDeclarationStructurePrinter",
      "val": 1837
    },
    {
      "id": "ImportDeclarationStructurePrinter",
      "name": "ImportDeclarationStructurePrinter",
      "val": 1568
    },
    {
      "id": "ModuleDeclarationStructurePrinter",
      "name": "ModuleDeclarationStructurePrinter",
      "val": 2137
    },
    {
      "id": "NamedImportExportSpecifierStructurePrinter",
      "name": "NamedImportExportSpecifierStructurePrinter",
      "val": 1856
    },
    {
      "id": "SourceFileStructurePrinter",
      "name": "SourceFileStructurePrinter",
      "val": 399
    },
    {
      "id": "StatementedNodeStructurePrinter",
      "name": "StatementedNodeStructurePrinter",
      "val": 322
    },
    {
      "id": "StatementStructurePrinter",
      "name": "StatementStructurePrinter",
      "val": 3184
    },
    {
      "id": "VariableStatementStructurePrinter",
      "name": "VariableStatementStructurePrinter",
      "val": 780
    },
    {
      "id": "TypeAliasDeclarationStructurePrinter",
      "name": "TypeAliasDeclarationStructurePrinter",
      "val": 760
    },
    {
      "id": "TypeParameterDeclarationStructurePrinter",
      "name": "TypeParameterDeclarationStructurePrinter",
      "val": 1370
    },
    {
      "id": "VariableDeclarationStructurePrinter",
      "name": "VariableDeclarationStructurePrinter",
      "val": 622
    },
    {
      "id": "ExtendsClauseableNode",
      "name": "ExtendsClauseableNode",
      "val": 3492
    },
    {
      "id": "GeneratorableNode",
      "name": "GeneratorableNode",
      "val": 1600
    },
    {
      "id": "getAsteriskInsertPos",
      "name": "getAsteriskInsertPos",
      "val": 425
    },
    {
      "id": "HeritageClauseableNode",
      "name": "HeritageClauseableNode",
      "val": 782
    },
    {
      "id": "ImplementsClauseableNode",
      "name": "ImplementsClauseableNode",
      "val": 3759
    },
    {
      "id": "InitializerExpressionGetableNode",
      "name": "InitializerExpressionGetableNode",
      "val": 957
    },
    {
      "id": "InitializerExpressionableNode",
      "name": "InitializerExpressionableNode",
      "val": 112
    },
    {
      "id": "apply$1",
      "name": "apply$1",
      "val": 1811
    },
    {
      "id": "JSDocableNode",
      "name": "JSDocableNode",
      "val": 2048
    },
    {
      "id": "LiteralLikeNode",
      "name": "LiteralLikeNode",
      "val": 386
    },
    {
      "id": "ModuledNode",
      "name": "ModuledNode",
      "val": 10961
    },
    {
      "id": "NamedNodeBase",
      "name": "NamedNodeBase",
      "val": 659
    },
    {
      "id": "ReferenceFindableNode",
      "name": "ReferenceFindableNode",
      "val": 364
    },
    {
      "id": "getNodeForReferences",
      "name": "getNodeForReferences",
      "val": 339
    },
    {
      "id": "RenameableNode",
      "name": "RenameableNode",
      "val": 1132
    },
    {
      "id": "BindingNamedNode",
      "name": "BindingNamedNode",
      "val": 134
    },
    {
      "id": "ModuleNamedNode",
      "name": "ModuleNamedNode",
      "val": 133
    },
    {
      "id": "NameableNode",
      "name": "NameableNode",
      "val": 113
    },
    {
      "id": "NameableNodeInternal",
      "name": "NameableNodeInternal",
      "val": 2232
    },
    {
      "id": "addNameNode",
      "name": "addNameNode",
      "val": 662
    },
    {
      "id": "NamedNode",
      "name": "NamedNode",
      "val": 127
    },
    {
      "id": "PropertyNamedNode",
      "name": "PropertyNamedNode",
      "val": 135
    },
    {
      "id": "ParameteredNode",
      "name": "ParameteredNode",
      "val": 2500
    },
    {
      "id": "QuestionDotTokenableNode",
      "name": "QuestionDotTokenableNode",
      "val": 2455
    },
    {
      "id": "QuestionTokenableNode",
      "name": "QuestionTokenableNode",
      "val": 2233
    },
    {
      "id": "ReadonlyableNode",
      "name": "ReadonlyableNode",
      "val": 988
    },
    {
      "id": "ReturnTypedNode",
      "name": "ReturnTypedNode",
      "val": 2904
    },
    {
      "id": "ScopeableNode",
      "name": "ScopeableNode",
      "val": 1195
    },
    {
      "id": "getScopeForNode",
      "name": "getScopeForNode",
      "val": 461
    },
    {
      "id": "setScopeForNode",
      "name": "setScopeForNode",
      "val": 256
    },
    {
      "id": "ScopedNode",
      "name": "ScopedNode",
      "val": 791
    },
    {
      "id": "SignaturedDeclaration",
      "name": "SignaturedDeclaration",
      "val": 95
    },
    {
      "id": "StaticableNode",
      "name": "StaticableNode",
      "val": 976
    },
    {
      "id": "TextInsertableNode",
      "name": "TextInsertableNode",
      "val": 1848
    },
    {
      "id": "getValidRange",
      "name": "getValidRange",
      "val": 680
    },
    {
      "id": "TypeArgumentedNode",
      "name": "TypeArgumentedNode",
      "val": 3107
    },
    {
      "id": "TypedNode",
      "name": "TypedNode",
      "val": 3470
    },
    {
      "id": "getSeparatorSyntaxKindForNode",
      "name": "getSeparatorSyntaxKindForNode",
      "val": 262
    },
    {
      "id": "TypeElementMemberedNode",
      "name": "TypeElementMemberedNode",
      "val": 10005
    },
    {
      "id": "insertChildren",
      "name": "insertChildren",
      "val": 526
    },
    {
      "id": "TypeParameteredNode",
      "name": "TypeParameteredNode",
      "val": 3028
    },
    {
      "id": "getInsertPos",
      "name": "getInsertPos",
      "val": 493
    },
    {
      "id": "UnwrappableNode",
      "name": "UnwrappableNode",
      "val": 140
    },
    {
      "id": "ArrayBindingPattern",
      "name": "ArrayBindingPattern",
      "val": 160
    },
    {
      "id": "createBase",
      "name": "createBase",
      "val": 107
    },
    {
      "id": "BindingElementBase",
      "name": "BindingElementBase",
      "val": 44
    },
    {
      "id": "BindingElement",
      "name": "BindingElement",
      "val": 344
    },
    {
      "id": "ObjectBindingPattern",
      "name": "ObjectBindingPattern",
      "val": 161
    },
    {
      "id": "AbstractableNode",
      "name": "AbstractableNode",
      "val": 999
    },
    {
      "id": "Expression",
      "name": "Expression",
      "val": 137
    },
    {
      "id": "BinaryExpressionBase",
      "name": "BinaryExpressionBase",
      "val": 40
    },
    {
      "id": "BinaryExpression",
      "name": "BinaryExpression",
      "val": 363
    },
    {
      "id": "AssignmentExpressionBase",
      "name": "AssignmentExpressionBase",
      "val": 50
    },
    {
      "id": "AssignmentExpression",
      "name": "AssignmentExpression",
      "val": 179
    },
    {
      "id": "ArrayDestructuringAssignmentBase",
      "name": "ArrayDestructuringAssignmentBase",
      "val": 62
    },
    {
      "id": "ArrayDestructuringAssignment",
      "name": "ArrayDestructuringAssignment",
      "val": 177
    },
    {
      "id": "UnaryExpression",
      "name": "UnaryExpression",
      "val": 47
    },
    {
      "id": "UpdateExpression",
      "name": "UpdateExpression",
      "val": 53
    },
    {
      "id": "LeftHandSideExpression",
      "name": "LeftHandSideExpression",
      "val": 60
    },
    {
      "id": "MemberExpression",
      "name": "MemberExpression",
      "val": 60
    },
    {
      "id": "PrimaryExpression",
      "name": "PrimaryExpression",
      "val": 55
    },
    {
      "id": "ArrayLiteralExpression",
      "name": "ArrayLiteralExpression",
      "val": 3251
    },
    {
      "id": "ExpressionableNode",
      "name": "ExpressionableNode",
      "val": 833
    },
    {
      "id": "BaseExpressionedNode",
      "name": "BaseExpressionedNode",
      "val": 1059
    },
    {
      "id": "ExpressionedNode",
      "name": "ExpressionedNode",
      "val": 78
    },
    {
      "id": "ImportExpressionedNode",
      "name": "ImportExpressionedNode",
      "val": 84
    },
    {
      "id": "LeftHandSideExpressionedNode",
      "name": "LeftHandSideExpressionedNode",
      "val": 90
    },
    {
      "id": "SuperExpressionedNode",
      "name": "SuperExpressionedNode",
      "val": 83
    },
    {
      "id": "UnaryExpressionedNode",
      "name": "UnaryExpressionedNode",
      "val": 83
    },
    {
      "id": "createBase$1",
      "name": "createBase$1",
      "val": 65
    },
    {
      "id": "AsExpressionBase",
      "name": "AsExpressionBase",
      "val": 50
    },
    {
      "id": "AsExpression",
      "name": "AsExpression",
      "val": 50
    },
    {
      "id": "AwaitExpressionBase",
      "name": "AwaitExpressionBase",
      "val": 67
    },
    {
      "id": "AwaitExpression",
      "name": "AwaitExpression",
      "val": 56
    },
    {
      "id": "createBase$2",
      "name": "createBase$2",
      "val": 128
    },
    {
      "id": "CallExpressionBase",
      "name": "CallExpressionBase",
      "val": 64
    },
    {
      "id": "CallExpression",
      "name": "CallExpression",
      "val": 151
    },
    {
      "id": "CommaListExpressionBase",
      "name": "CommaListExpressionBase",
      "val": 43
    },
    {
      "id": "CommaListExpression",
      "name": "CommaListExpression",
      "val": 179
    },
    {
      "id": "ConditionalExpressionBase",
      "name": "ConditionalExpressionBase",
      "val": 45
    },
    {
      "id": "ConditionalExpression",
      "name": "ConditionalExpression",
      "val": 601
    },
    {
      "id": "DeleteExpressionBase",
      "name": "DeleteExpressionBase",
      "val": 68
    },
    {
      "id": "DeleteExpression",
      "name": "DeleteExpression",
      "val": 58
    },
    {
      "id": "createBase$3",
      "name": "createBase$3",
      "val": 92
    },
    {
      "id": "ElementAccessExpressionBase",
      "name": "ElementAccessExpressionBase",
      "val": 67
    },
    {
      "id": "ElementAccessExpression",
      "name": "ElementAccessExpression",
      "val": 376
    },
    {
      "id": "ImportExpressionBase",
      "name": "ImportExpressionBase",
      "val": 47
    },
    {
      "id": "ImportExpression",
      "name": "ImportExpression",
      "val": 58
    },
    {
      "id": "LiteralExpressionBase",
      "name": "LiteralExpressionBase",
      "val": 65
    },
    {
      "id": "LiteralExpression",
      "name": "LiteralExpression",
      "val": 60
    },
    {
      "id": "MetaPropertyBase",
      "name": "MetaPropertyBase",
      "val": 54
    },
    {
      "id": "MetaProperty",
      "name": "MetaProperty",
      "val": 130
    },
    {
      "id": "createBase$4",
      "name": "createBase$4",
      "val": 102
    },
    {
      "id": "NewExpressionBase",
      "name": "NewExpressionBase",
      "val": 58
    },
    {
      "id": "NewExpression",
      "name": "NewExpression",
      "val": 52
    },
    {
      "id": "NonNullExpressionBase",
      "name": "NonNullExpressionBase",
      "val": 71
    },
    {
      "id": "NonNullExpression",
      "name": "NonNullExpression",
      "val": 60
    },
    {
      "id": "ObjectLiteralElement",
      "name": "ObjectLiteralElement",
      "val": 111
    },
    {
      "id": "CommentObjectLiteralElement",
      "name": "CommentObjectLiteralElement",
      "val": 69
    },
    {
      "id": "ObjectDestructuringAssignmentBase",
      "name": "ObjectDestructuringAssignmentBase",
      "val": 63
    },
    {
      "id": "ObjectDestructuringAssignment",
      "name": "ObjectDestructuringAssignment",
      "val": 179
    },
    {
      "id": "ObjectLiteralExpressionBase",
      "name": "ObjectLiteralExpressionBase",
      "val": 54
    },
    {
      "id": "ObjectLiteralExpression",
      "name": "ObjectLiteralExpression",
      "val": 6594
    },
    {
      "id": "createBase$5",
      "name": "createBase$5",
      "val": 112
    },
    {
      "id": "PropertyAssignmentBase",
      "name": "PropertyAssignmentBase",
      "val": 66
    },
    {
      "id": "PropertyAssignment",
      "name": "PropertyAssignment",
      "val": 2129
    },
    {
      "id": "createBase$6",
      "name": "createBase$6",
      "val": 104
    },
    {
      "id": "ShorthandPropertyAssignmentBase",
      "name": "ShorthandPropertyAssignmentBase",
      "val": 75
    },
    {
      "id": "ShorthandPropertyAssignment",
      "name": "ShorthandPropertyAssignment",
      "val": 2183
    },
    {
      "id": "SpreadAssignmentBase",
      "name": "SpreadAssignmentBase",
      "val": 68
    },
    {
      "id": "SpreadAssignment",
      "name": "SpreadAssignment",
      "val": 415
    },
    {
      "id": "OmittedExpressionBase",
      "name": "OmittedExpressionBase",
      "val": 41
    },
    {
      "id": "OmittedExpression",
      "name": "OmittedExpression",
      "val": 60
    },
    {
      "id": "ParenthesizedExpressionBase",
      "name": "ParenthesizedExpressionBase",
      "val": 65
    },
    {
      "id": "ParenthesizedExpression",
      "name": "ParenthesizedExpression",
      "val": 72
    },
    {
      "id": "PartiallyEmittedExpressionBase",
      "name": "PartiallyEmittedExpressionBase",
      "val": 68
    },
    {
      "id": "PartiallyEmittedExpression",
      "name": "PartiallyEmittedExpression",
      "val": 78
    },
    {
      "id": "PostfixUnaryExpressionBase",
      "name": "PostfixUnaryExpressionBase",
      "val": 51
    },
    {
      "id": "PostfixUnaryExpression",
      "name": "PostfixUnaryExpression",
      "val": 248
    },
    {
      "id": "PrefixUnaryExpressionBase",
      "name": "PrefixUnaryExpressionBase",
      "val": 50
    },
    {
      "id": "PrefixUnaryExpression",
      "name": "PrefixUnaryExpression",
      "val": 246
    },
    {
      "id": "createBase$7",
      "name": "createBase$7",
      "val": 103
    },
    {
      "id": "PropertyAccessExpressionBase",
      "name": "PropertyAccessExpressionBase",
      "val": 68
    },
    {
      "id": "PropertyAccessExpression",
      "name": "PropertyAccessExpression",
      "val": 74
    },
    {
      "id": "SpreadElementBase",
      "name": "SpreadElementBase",
      "val": 55
    },
    {
      "id": "SpreadElement",
      "name": "SpreadElement",
      "val": 52
    },
    {
      "id": "SuperElementAccessExpressionBase",
      "name": "SuperElementAccessExpressionBase",
      "val": 88
    },
    {
      "id": "SuperElementAccessExpression",
      "name": "SuperElementAccessExpression",
      "val": 82
    },
    {
      "id": "SuperExpressionBase",
      "name": "SuperExpressionBase",
      "val": 46
    },
    {
      "id": "SuperExpression",
      "name": "SuperExpression",
      "val": 56
    },
    {
      "id": "SuperPropertyAccessExpressionBase",
      "name": "SuperPropertyAccessExpressionBase",
      "val": 90
    },
    {
      "id": "SuperPropertyAccessExpression",
      "name": "SuperPropertyAccessExpression",
      "val": 84
    },
    {
      "id": "ThisExpressionBase",
      "name": "ThisExpressionBase",
      "val": 45
    },
    {
      "id": "ThisExpression",
      "name": "ThisExpression",
      "val": 54
    },
    {
      "id": "createBase$8",
      "name": "createBase$8",
      "val": 70
    },
    {
      "id": "TypeAssertionBase",
      "name": "TypeAssertionBase",
      "val": 56
    },
    {
      "id": "TypeAssertion",
      "name": "TypeAssertion",
      "val": 52
    },
    {
      "id": "TypeOfExpressionBase",
      "name": "TypeOfExpressionBase",
      "val": 68
    },
    {
      "id": "TypeOfExpression",
      "name": "TypeOfExpression",
      "val": 58
    },
    {
      "id": "VoidExpressionBase",
      "name": "VoidExpressionBase",
      "val": 66
    },
    {
      "id": "VoidExpression",
      "name": "VoidExpression",
      "val": 54
    },
    {
      "id": "YieldExpressionBase",
      "name": "YieldExpressionBase",
      "val": 78
    },
    {
      "id": "YieldExpression",
      "name": "YieldExpression",
      "val": 56
    },
    {
      "id": "StatementBase",
      "name": "StatementBase",
      "val": 47
    },
    {
      "id": "Statement",
      "name": "Statement",
      "val": 110
    },
    {
      "id": "StatementedNode",
      "name": "StatementedNode",
      "val": 18605
    },
    {
      "id": "addBodyIfNotExists",
      "name": "addBodyIfNotExists",
      "val": 120
    },
    {
      "id": "createBase$9",
      "name": "createBase$9",
      "val": 73
    },
    {
      "id": "BlockBase",
      "name": "BlockBase",
      "val": 42
    },
    {
      "id": "Block",
      "name": "Block",
      "val": 36
    },
    {
      "id": "BreakStatement",
      "name": "BreakStatement",
      "val": 282
    },
    {
      "id": "CaseBlockBase",
      "name": "CaseBlockBase",
      "val": 47
    },
    {
      "id": "CaseBlock",
      "name": "CaseBlock",
      "val": 641
    },
    {
      "id": "createBase$a",
      "name": "createBase$a",
      "val": 91
    },
    {
      "id": "CaseClauseBase",
      "name": "CaseClauseBase",
      "val": 42
    },
    {
      "id": "CaseClause",
      "name": "CaseClause",
      "val": 108
    },
    {
      "id": "CatchClauseBase",
      "name": "CatchClauseBase",
      "val": 29
    },
    {
      "id": "CatchClause",
      "name": "CatchClause",
      "val": 453
    },
    {
      "id": "CommentStatement",
      "name": "CommentStatement",
      "val": 47
    },
    {
      "id": "ContinueStatement",
      "name": "ContinueStatement",
      "val": 349
    },
    {
      "id": "DebuggerStatementBase",
      "name": "DebuggerStatementBase",
      "val": 40
    },
    {
      "id": "DebuggerStatement",
      "name": "DebuggerStatement",
      "val": 60
    },
    {
      "id": "createBase$b",
      "name": "createBase$b",
      "val": 73
    },
    {
      "id": "DefaultClauseBase",
      "name": "DefaultClauseBase",
      "val": 45
    },
    {
      "id": "DefaultClause",
      "name": "DefaultClause",
      "val": 114
    },
    {
      "id": "IterationStatement",
      "name": "IterationStatement",
      "val": 154
    },
    {
      "id": "DoStatementBase",
      "name": "DoStatementBase",
      "val": 61
    },
    {
      "id": "DoStatement",
      "name": "DoStatement",
      "val": 48
    },
    {
      "id": "EmptyStatementBase",
      "name": "EmptyStatementBase",
      "val": 37
    },
    {
      "id": "EmptyStatement",
      "name": "EmptyStatement",
      "val": 54
    },
    {
      "id": "ExpressionStatementBase",
      "name": "ExpressionStatementBase",
      "val": 75
    },
    {
      "id": "ExpressionStatement",
      "name": "ExpressionStatement",
      "val": 64
    },
    {
      "id": "ForInStatementBase",
      "name": "ForInStatementBase",
      "val": 64
    },
    {
      "id": "ForInStatement",
      "name": "ForInStatement",
      "val": 163
    },
    {
      "id": "ForOfStatementBase",
      "name": "ForOfStatementBase",
      "val": 79
    },
    {
      "id": "ForOfStatement",
      "name": "ForOfStatement",
      "val": 163
    },
    {
      "id": "ForStatementBase",
      "name": "ForStatementBase",
      "val": 44
    },
    {
      "id": "ForStatement",
      "name": "ForStatement",
      "val": 843
    },
    {
      "id": "IfStatementBase",
      "name": "IfStatementBase",
      "val": 52
    },
    {
      "id": "IfStatement",
      "name": "IfStatement",
      "val": 558
    },
    {
      "id": "LabeledStatementBase",
      "name": "LabeledStatementBase",
      "val": 54
    },
    {
      "id": "LabeledStatement",
      "name": "LabeledStatement",
      "val": 260
    },
    {
      "id": "NotEmittedStatementBase",
      "name": "NotEmittedStatementBase",
      "val": 42
    },
    {
      "id": "NotEmittedStatement",
      "name": "NotEmittedStatement",
      "val": 64
    },
    {
      "id": "ReturnStatementBase",
      "name": "ReturnStatementBase",
      "val": 58
    },
    {
      "id": "ReturnStatement",
      "name": "ReturnStatement",
      "val": 56
    },
    {
      "id": "SwitchStatementBase",
      "name": "SwitchStatementBase",
      "val": 56
    },
    {
      "id": "SwitchStatement",
      "name": "SwitchStatement",
      "val": 432
    },
    {
      "id": "ThrowStatementBase",
      "name": "ThrowStatementBase",
      "val": 55
    },
    {
      "id": "ThrowStatement",
      "name": "ThrowStatement",
      "val": 54
    },
    {
      "id": "TryStatementBase",
      "name": "TryStatementBase",
      "val": 35
    },
    {
      "id": "TryStatement",
      "name": "TryStatement",
      "val": 825
    },
    {
      "id": "ExportAssignmentBase",
      "name": "ExportAssignmentBase",
      "val": 57
    },
    {
      "id": "ExportAssignment",
      "name": "ExportAssignment",
      "val": 1126
    },
    {
      "id": "ExportDeclarationBase",
      "name": "ExportDeclarationBase",
      "val": 40
    },
    {
      "id": "ExportDeclaration",
      "name": "ExportDeclaration",
      "val": 10960
    },
    {
      "id": "setEmptyNamedExport",
      "name": "setEmptyNamedExport",
      "val": 612
    },
    {
      "id": "ExportSpecifierBase",
      "name": "ExportSpecifierBase",
      "val": 33
    },
    {
      "id": "ExportSpecifier",
      "name": "ExportSpecifier",
      "val": 4018
    },
    {
      "id": "ExternalModuleReferenceBase",
      "name": "ExternalModuleReferenceBase",
      "val": 61
    },
    {
      "id": "ExternalModuleReference",
      "name": "ExternalModuleReference",
      "val": 844
    },
    {
      "id": "ImportClauseBase",
      "name": "ImportClauseBase",
      "val": 30
    },
    {
      "id": "ImportClause",
      "name": "ImportClause",
      "val": 1855
    },
    {
      "id": "ImportDeclarationBase",
      "name": "ImportDeclarationBase",
      "val": 40
    },
    {
      "id": "ImportDeclaration",
      "name": "ImportDeclaration",
      "val": 12998
    },
    {
      "id": "setEmptyNamedImport",
      "name": "setEmptyNamedImport",
      "val": 1454
    },
    {
      "id": "getErrorWhenNamespaceImportsExist",
      "name": "getErrorWhenNamespaceImportsExist",
      "val": 187
    },
    {
      "id": "createBase$c",
      "name": "createBase$c",
      "val": 62
    },
    {
      "id": "ImportEqualsDeclarationBase",
      "name": "ImportEqualsDeclarationBase",
      "val": 60
    },
    {
      "id": "ImportEqualsDeclaration",
      "name": "ImportEqualsDeclaration",
      "val": 1550
    },
    {
      "id": "ImportSpecifierBase",
      "name": "ImportSpecifierBase",
      "val": 33
    },
    {
      "id": "ImportSpecifier",
      "name": "ImportSpecifier",
      "val": 3459
    },
    {
      "id": "ModuleBlockBase",
      "name": "ModuleBlockBase",
      "val": 51
    },
    {
      "id": "ModuleBlock",
      "name": "ModuleBlock",
      "val": 48
    },
    {
      "id": "ModuleChildableNode",
      "name": "ModuleChildableNode",
      "val": 612
    },
    {
      "id": "createBase$d",
      "name": "createBase$d",
      "val": 221
    },
    {
      "id": "ModuleDeclarationBase",
      "name": "ModuleDeclarationBase",
      "val": 54
    },
    {
      "id": "ModuleDeclaration",
      "name": "ModuleDeclaration",
      "val": 5322
    },
    {
      "id": "addNamespaceKeywordIfNecessary",
      "name": "addNamespaceKeywordIfNecessary",
      "val": 228
    },
    {
      "id": "changeToAmbientModuleIfNecessary",
      "name": "changeToAmbientModuleIfNecessary",
      "val": 281
    },
    {
      "id": "NamedExportsBase",
      "name": "NamedExportsBase",
      "val": 30
    },
    {
      "id": "NamedExports",
      "name": "NamedExports",
      "val": 165
    },
    {
      "id": "NamedImportsBase",
      "name": "NamedImportsBase",
      "val": 30
    },
    {
      "id": "NamedImports",
      "name": "NamedImports",
      "val": 165
    },
    {
      "id": "NamespaceExportBase",
      "name": "NamespaceExportBase",
      "val": 49
    },
    {
      "id": "NamespaceExport",
      "name": "NamespaceExport",
      "val": 430
    },
    {
      "id": "NamespaceImportBase",
      "name": "NamespaceImportBase",
      "val": 49
    },
    {
      "id": "NamespaceImport",
      "name": "NamespaceImport",
      "val": 430
    },
    {
      "id": "FileReference",
      "name": "FileReference",
      "val": 216
    },
    {
      "id": "__decorate",
      "name": "__decorate",
      "val": 1365
    },
    {
      "id": "__awaiter",
      "name": "__awaiter",
      "val": 656
    },
    {
      "id": "SourceFileBase",
      "name": "SourceFileBase",
      "val": 78
    },
    {
      "id": "SourceFile",
      "name": "SourceFile",
      "val": 21524
    },
    {
      "id": "updateStringLiteralReferences",
      "name": "updateStringLiteralReferences",
      "val": 335
    },
    {
      "id": "getReferencingNodeFromStringLiteral",
      "name": "getReferencingNodeFromStringLiteral",
      "val": 293
    },
    {
      "id": "createBase$e",
      "name": "createBase$e",
      "val": 123
    },
    {
      "id": "VariableStatementBase",
      "name": "VariableStatementBase",
      "val": 54
    },
    {
      "id": "VariableStatement",
      "name": "VariableStatement",
      "val": 1887
    },
    {
      "id": "WhileStatementBase",
      "name": "WhileStatementBase",
      "val": 64
    },
    {
      "id": "WhileStatement",
      "name": "WhileStatement",
      "val": 54
    },
    {
      "id": "WithStatementBase",
      "name": "WithStatementBase",
      "val": 54
    },
    {
      "id": "WithStatement",
      "name": "WithStatement",
      "val": 157
    },
    {
      "id": "FunctionLikeDeclaration",
      "name": "FunctionLikeDeclaration",
      "val": 157
    },
    {
      "id": "createBase$f",
      "name": "createBase$f",
      "val": 108
    },
    {
      "id": "ArrowFunctionBase",
      "name": "ArrowFunctionBase",
      "val": 51
    },
    {
      "id": "ArrowFunction",
      "name": "ArrowFunction",
      "val": 178
    },
    {
      "id": "OverloadableNode",
      "name": "OverloadableNode",
      "val": 772
    },
    {
      "id": "getOverloadsAndImplementation",
      "name": "getOverloadsAndImplementation",
      "val": 394
    },
    {
      "id": "getNameIfNamedNode",
      "name": "getNameIfNamedNode",
      "val": 195
    },
    {
      "id": "insertOverloads",
      "name": "insertOverloads",
      "val": 1392
    },
    {
      "id": "createBase$g",
      "name": "createBase$g",
      "val": 232
    },
    {
      "id": "FunctionDeclarationBase",
      "name": "FunctionDeclarationBase",
      "val": 56
    },
    {
      "id": "createOverloadBase",
      "name": "createOverloadBase",
      "val": 244
    },
    {
      "id": "FunctionDeclarationOverloadBase",
      "name": "FunctionDeclarationOverloadBase",
      "val": 70
    },
    {
      "id": "FunctionDeclaration",
      "name": "FunctionDeclaration",
      "val": 2502
    },
    {
      "id": "createBase$h",
      "name": "createBase$h",
      "val": 210
    },
    {
      "id": "FunctionExpressionBase",
      "name": "FunctionExpressionBase",
      "val": 63
    },
    {
      "id": "FunctionExpression",
      "name": "FunctionExpression",
      "val": 62
    },
    {
      "id": "createBase$i",
      "name": "createBase$i",
      "val": 211
    },
    {
      "id": "ParameterDeclarationBase",
      "name": "ParameterDeclarationBase",
      "val": 52
    },
    {
      "id": "ParameterDeclaration",
      "name": "ParameterDeclaration",
      "val": 1907
    },
    {
      "id": "addParensIfNecessary",
      "name": "addParensIfNecessary",
      "val": 911
    },
    {
      "id": "ClassElement",
      "name": "ClassElement",
      "val": 430
    },
    {
      "id": "createBase$j",
      "name": "createBase$j",
      "val": 272
    },
    {
      "id": "MethodDeclarationBase",
      "name": "MethodDeclarationBase",
      "val": 57
    },
    {
      "id": "createOverloadBase$1",
      "name": "createOverloadBase$1",
      "val": 264
    },
    {
      "id": "MethodDeclarationOverloadBase",
      "name": "MethodDeclarationOverloadBase",
      "val": 73
    },
    {
      "id": "MethodDeclaration",
      "name": "MethodDeclaration",
      "val": 2431
    },
    {
      "id": "ClassLikeDeclarationBase",
      "name": "ClassLikeDeclarationBase",
      "val": 271
    },
    {
      "id": "ClassLikeDeclarationBaseSpecific",
      "name": "ClassLikeDeclarationBaseSpecific",
      "val": 20872
    },
    {
      "id": "getAllMembers",
      "name": "getAllMembers",
      "val": 503
    },
    {
      "id": "getImmediateDerivedClasses",
      "name": "getImmediateDerivedClasses",
      "val": 829
    },
    {
      "id": "isClassPropertyType",
      "name": "isClassPropertyType",
      "val": 214
    },
    {
      "id": "isSupportedClassMember",
      "name": "isSupportedClassMember",
      "val": 259
    },
    {
      "id": "insertChildren$1",
      "name": "insertChildren$1",
      "val": 233
    },
    {
      "id": "createBase$k",
      "name": "createBase$k",
      "val": 116
    },
    {
      "id": "ClassDeclarationBase",
      "name": "ClassDeclarationBase",
      "val": 53
    },
    {
      "id": "ClassDeclaration",
      "name": "ClassDeclaration",
      "val": 4922
    },
    {
      "id": "getExtractedClassDetails",
      "name": "getExtractedClassDetails",
      "val": 1069
    },
    {
      "id": "getDefaultExtractedName",
      "name": "getDefaultExtractedName",
      "val": 260
    },
    {
      "id": "getExtractedInterfacePropertyStructure",
      "name": "getExtractedInterfacePropertyStructure",
      "val": 366
    },
    {
      "id": "getExtractedInterfaceAccessorStructure",
      "name": "getExtractedInterfaceAccessorStructure",
      "val": 414
    },
    {
      "id": "getExtractedInterfaceMethodStructure",
      "name": "getExtractedInterfaceMethodStructure",
      "val": 516
    },
    {
      "id": "getExtractedInterfaceParameterStructure",
      "name": "getExtractedInterfaceParameterStructure",
      "val": 150
    },
    {
      "id": "ClassExpressionBase",
      "name": "ClassExpressionBase",
      "val": 72
    },
    {
      "id": "ClassExpression",
      "name": "ClassExpression",
      "val": 56
    },
    {
      "id": "CommentClassElement",
      "name": "CommentClassElement",
      "val": 53
    },
    {
      "id": "createBase$l",
      "name": "createBase$l",
      "val": 145
    },
    {
      "id": "ConstructorDeclarationBase",
      "name": "ConstructorDeclarationBase",
      "val": 62
    },
    {
      "id": "createOverloadBase$2",
      "name": "createOverloadBase$2",
      "val": 173
    },
    {
      "id": "ConstructorDeclarationOverloadBase",
      "name": "ConstructorDeclarationOverloadBase",
      "val": 78
    },
    {
      "id": "ConstructorDeclaration",
      "name": "ConstructorDeclaration",
      "val": 2423
    },
    {
      "id": "createBase$m",
      "name": "createBase$m",
      "val": 197
    },
    {
      "id": "GetAccessorDeclarationBase",
      "name": "GetAccessorDeclarationBase",
      "val": 62
    },
    {
      "id": "GetAccessorDeclaration",
      "name": "GetAccessorDeclaration",
      "val": 955
    },
    {
      "id": "createBase$n",
      "name": "createBase$n",
      "val": 297
    },
    {
      "id": "PropertyDeclarationBase",
      "name": "PropertyDeclarationBase",
      "val": 59
    },
    {
      "id": "PropertyDeclaration",
      "name": "PropertyDeclaration",
      "val": 740
    },
    {
      "id": "createBase$o",
      "name": "createBase$o",
      "val": 197
    },
    {
      "id": "SetAccessorDeclarationBase",
      "name": "SetAccessorDeclarationBase",
      "val": 62
    },
    {
      "id": "SetAccessorDeclaration",
      "name": "SetAccessorDeclaration",
      "val": 955
    },
    {
      "id": "DecoratorBase",
      "name": "DecoratorBase",
      "val": 57
    },
    {
      "id": "Decorator",
      "name": "Decorator",
      "val": 7286
    },
    {
      "id": "JSDocPropertyLikeTag",
      "name": "JSDocPropertyLikeTag",
      "val": 677
    },
    {
      "id": "JSDocTypeExpressionableTag",
      "name": "JSDocTypeExpressionableTag",
      "val": 542
    },
    {
      "id": "JSDocTypeParameteredTag",
      "name": "JSDocTypeParameteredTag",
      "val": 291
    },
    {
      "id": "getTextWithoutStars",
      "name": "getTextWithoutStars",
      "val": 863
    },
    {
      "id": "JSDocBase",
      "name": "JSDocBase",
      "val": 23
    },
    {
      "id": "JSDoc",
      "name": "JSDoc",
      "val": 6620
    },
    {
      "id": "JSDocTagBase",
      "name": "JSDocTagBase",
      "val": 26
    },
    {
      "id": "JSDocTag",
      "name": "JSDocTag",
      "val": 2913
    },
    {
      "id": "getText",
      "name": "getText",
      "val": 366
    },
    {
      "id": "getTagEnd",
      "name": "getTagEnd",
      "val": 121
    },
    {
      "id": "getNextTagStartOrDocEnd",
      "name": "getNextTagStartOrDocEnd",
      "val": 297
    },
    {
      "id": "getNextJsDocTag",
      "name": "getNextJsDocTag",
      "val": 242
    },
    {
      "id": "getPreviousNonWhiteSpacePos",
      "name": "getPreviousNonWhiteSpacePos",
      "val": 282
    },
    {
      "id": "JSDocAugmentsTag",
      "name": "JSDocAugmentsTag",
      "val": 46
    },
    {
      "id": "JSDocAuthorTag",
      "name": "JSDocAuthorTag",
      "val": 44
    },
    {
      "id": "JSDocCallbackTag",
      "name": "JSDocCallbackTag",
      "val": 46
    },
    {
      "id": "JSDocClassTag",
      "name": "JSDocClassTag",
      "val": 43
    },
    {
      "id": "JSDocDeprecatedTag",
      "name": "JSDocDeprecatedTag",
      "val": 48
    },
    {
      "id": "JSDocEnumTag",
      "name": "JSDocEnumTag",
      "val": 42
    },
    {
      "id": "TypeNode",
      "name": "TypeNode",
      "val": 34
    },
    {
      "id": "ArrayTypeNode",
      "name": "ArrayTypeNode",
      "val": 156
    },
    {
      "id": "ConditionalTypeNode",
      "name": "ConditionalTypeNode",
      "val": 471
    },
    {
      "id": "FunctionOrConstructorTypeNodeBaseBase",
      "name": "FunctionOrConstructorTypeNodeBaseBase",
      "val": 78
    },
    {
      "id": "FunctionOrConstructorTypeNodeBase",
      "name": "FunctionOrConstructorTypeNodeBase",
      "val": 92
    },
    {
      "id": "ConstructorTypeNodeBase",
      "name": "ConstructorTypeNodeBase",
      "val": 102
    },
    {
      "id": "ConstructorTypeNode",
      "name": "ConstructorTypeNode",
      "val": 64
    },
    {
      "id": "ExpressionWithTypeArgumentsBase",
      "name": "ExpressionWithTypeArgumentsBase",
      "val": 79
    },
    {
      "id": "ExpressionWithTypeArguments",
      "name": "ExpressionWithTypeArguments",
      "val": 316
    },
    {
      "id": "FunctionTypeNodeBase",
      "name": "FunctionTypeNodeBase",
      "val": 84
    },
    {
      "id": "FunctionTypeNode",
      "name": "FunctionTypeNode",
      "val": 58
    },
    {
      "id": "ImportTypeNodeBase",
      "name": "ImportTypeNodeBase",
      "val": 56
    },
    {
      "id": "ImportTypeNode",
      "name": "ImportTypeNode",
      "val": 1484
    },
    {
      "id": "IndexedAccessTypeNode",
      "name": "IndexedAccessTypeNode",
      "val": 271
    },
    {
      "id": "InferTypeNode",
      "name": "InferTypeNode",
      "val": 156
    },
    {
      "id": "IntersectionTypeNode",
      "name": "IntersectionTypeNode",
      "val": 163
    },
    {
      "id": "LiteralTypeNode",
      "name": "LiteralTypeNode",
      "val": 184
    },
    {
      "id": "createBase$p",
      "name": "createBase$p",
      "val": 120
    },
    {
      "id": "NamedTupleMemberBase",
      "name": "NamedTupleMemberBase",
      "val": 52
    },
    {
      "id": "NamedTupleMember",
      "name": "NamedTupleMember",
      "val": 257
    },
    {
      "id": "ParenthesizedTypeNode",
      "name": "ParenthesizedTypeNode",
      "val": 283
    },
    {
      "id": "TemplateLiteralTypeNode",
      "name": "TemplateLiteralTypeNode",
      "val": 53
    },
    {
      "id": "ThisTypeNode",
      "name": "ThisTypeNode",
      "val": 42
    },
    {
      "id": "TupleTypeNode",
      "name": "TupleTypeNode",
      "val": 158
    },
    {
      "id": "createBase$q",
      "name": "createBase$q",
      "val": 145
    },
    {
      "id": "TypeAliasDeclarationBase",
      "name": "TypeAliasDeclarationBase",
      "val": 57
    },
    {
      "id": "TypeAliasDeclaration",
      "name": "TypeAliasDeclaration",
      "val": 423
    },
    {
      "id": "TypeLiteralNodeBase",
      "name": "TypeLiteralNodeBase",
      "val": 62
    },
    {
      "id": "TypeLiteralNode",
      "name": "TypeLiteralNode",
      "val": 56
    },
    {
      "id": "TypeParameterDeclarationBase",
      "name": "TypeParameterDeclarationBase",
      "val": 53
    },
    {
      "id": "TypeParameterDeclaration",
      "name": "TypeParameterDeclaration",
      "val": 3960
    },
    {
      "id": "removeConstraintOrDefault",
      "name": "removeConstraintOrDefault",
      "val": 279
    },
    {
      "id": "TypePredicateNode",
      "name": "TypePredicateNode",
      "val": 796
    },
    {
      "id": "TypeReferenceNode",
      "name": "TypeReferenceNode",
      "val": 353
    },
    {
      "id": "UnionTypeNode",
      "name": "UnionTypeNode",
      "val": 156
    },
    {
      "id": "JSDocType",
      "name": "JSDocType",
      "val": 39
    },
    {
      "id": "JSDocFunctionTypeBase",
      "name": "JSDocFunctionTypeBase",
      "val": 63
    },
    {
      "id": "JSDocFunctionType",
      "name": "JSDocFunctionType",
      "val": 60
    },
    {
      "id": "JSDocImplementsTag",
      "name": "JSDocImplementsTag",
      "val": 48
    },
    {
      "id": "JSDocParameterTagBase",
      "name": "JSDocParameterTagBase",
      "val": 61
    },
    {
      "id": "JSDocParameterTag",
      "name": "JSDocParameterTag",
      "val": 60
    },
    {
      "id": "JSDocPrivateTag",
      "name": "JSDocPrivateTag",
      "val": 45
    },
    {
      "id": "JSDocPropertyTagBase",
      "name": "JSDocPropertyTagBase",
      "val": 60
    },
    {
      "id": "JSDocPropertyTag",
      "name": "JSDocPropertyTag",
      "val": 58
    },
    {
      "id": "JSDocProtectedTag",
      "name": "JSDocProtectedTag",
      "val": 47
    },
    {
      "id": "JSDocPublicTag",
      "name": "JSDocPublicTag",
      "val": 44
    },
    {
      "id": "JSDocReadonlyTag",
      "name": "JSDocReadonlyTag",
      "val": 46
    },
    {
      "id": "JSDocReturnTagBase",
      "name": "JSDocReturnTagBase",
      "val": 64
    },
    {
      "id": "JSDocReturnTag",
      "name": "JSDocReturnTag",
      "val": 54
    },
    {
      "id": "JSDocSeeTagBase",
      "name": "JSDocSeeTagBase",
      "val": 61
    },
    {
      "id": "JSDocSeeTag",
      "name": "JSDocSeeTag",
      "val": 48
    },
    {
      "id": "JSDocSignature",
      "name": "JSDocSignature",
      "val": 152
    },
    {
      "id": "JSDocTagInfo",
      "name": "JSDocTagInfo",
      "val": 320
    },
    {
      "id": "JSDocTemplateTagBase",
      "name": "JSDocTemplateTagBase",
      "val": 63
    },
    {
      "id": "JSDocTemplateTag",
      "name": "JSDocTemplateTag",
      "val": 344
    },
    {
      "id": "JSDocThisTagBase",
      "name": "JSDocThisTagBase",
      "val": 62
    },
    {
      "id": "JSDocThisTag",
      "name": "JSDocThisTag",
      "val": 50
    },
    {
      "id": "JSDocTypedefTag",
      "name": "JSDocTypedefTag",
      "val": 45
    },
    {
      "id": "JSDocTypeExpression",
      "name": "JSDocTypeExpression",
      "val": 148
    },
    {
      "id": "JSDocTypeTag",
      "name": "JSDocTypeTag",
      "val": 304
    },
    {
      "id": "JSDocUnknownTag",
      "name": "JSDocUnknownTag",
      "val": 45
    },
    {
      "id": "CommentEnumMember",
      "name": "CommentEnumMember",
      "val": 215
    },
    {
      "id": "createBase$r",
      "name": "createBase$r",
      "val": 154
    },
    {
      "id": "EnumDeclarationBase",
      "name": "EnumDeclarationBase",
      "val": 52
    },
    {
      "id": "EnumDeclaration",
      "name": "EnumDeclaration",
      "val": 3094
    },
    {
      "id": "createBase$s",
      "name": "createBase$s",
      "val": 101
    },
    {
      "id": "EnumMemberBase",
      "name": "EnumMemberBase",
      "val": 42
    },
    {
      "id": "EnumMember",
      "name": "EnumMember",
      "val": 1459
    },
    {
      "id": "HeritageClause",
      "name": "HeritageClause",
      "val": 1260
    },
    {
      "id": "TypeElement",
      "name": "TypeElement",
      "val": 98
    },
    {
      "id": "createBase$t",
      "name": "createBase$t",
      "val": 115
    },
    {
      "id": "CallSignatureDeclarationBase",
      "name": "CallSignatureDeclarationBase",
      "val": 63
    },
    {
      "id": "CallSignatureDeclaration",
      "name": "CallSignatureDeclaration",
      "val": 387
    },
    {
      "id": "CommentTypeElement",
      "name": "CommentTypeElement",
      "val": 51
    },
    {
      "id": "createBase$u",
      "name": "createBase$u",
      "val": 115
    },
    {
      "id": "ConstructSignatureDeclarationBase",
      "name": "ConstructSignatureDeclarationBase",
      "val": 68
    },
    {
      "id": "ConstructSignatureDeclaration",
      "name": "ConstructSignatureDeclaration",
      "val": 412
    },
    {
      "id": "createBase$v",
      "name": "createBase$v",
      "val": 124
    },
    {
      "id": "IndexSignatureDeclarationBase",
      "name": "IndexSignatureDeclarationBase",
      "val": 64
    },
    {
      "id": "IndexSignatureDeclaration",
      "name": "IndexSignatureDeclaration",
      "val": 1743
    },
    {
      "id": "createBase$w",
      "name": "createBase$w",
      "val": 247
    },
    {
      "id": "InterfaceDeclarationBase",
      "name": "InterfaceDeclarationBase",
      "val": 57
    },
    {
      "id": "InterfaceDeclaration",
      "name": "InterfaceDeclaration",
      "val": 836
    },
    {
      "id": "createBase$x",
      "name": "createBase$x",
      "val": 157
    },
    {
      "id": "MethodSignatureBase",
      "name": "MethodSignatureBase",
      "val": 54
    },
    {
      "id": "MethodSignature",
      "name": "MethodSignature",
      "val": 353
    },
    {
      "id": "createBase$y",
      "name": "createBase$y",
      "val": 191
    },
    {
      "id": "PropertySignatureBase",
      "name": "PropertySignatureBase",
      "val": 56
    },
    {
      "id": "PropertySignature",
      "name": "PropertySignature",
      "val": 363
    },
    {
      "id": "JsxAttributedNode",
      "name": "JsxAttributedNode",
      "val": 2530
    },
    {
      "id": "JsxTagNamedNode",
      "name": "JsxTagNamedNode",
      "val": 605
    },
    {
      "id": "JsxAttributeBase",
      "name": "JsxAttributeBase",
      "val": 41
    },
    {
      "id": "JsxAttribute",
      "name": "JsxAttribute",
      "val": 2248
    },
    {
      "id": "createBase$z",
      "name": "createBase$z",
      "val": 53
    },
    {
      "id": "JsxClosingElementBase",
      "name": "JsxClosingElementBase",
      "val": 49
    },
    {
      "id": "JsxClosingElement",
      "name": "JsxClosingElement",
      "val": 60
    },
    {
      "id": "JsxClosingFragment",
      "name": "JsxClosingFragment",
      "val": 50
    },
    {
      "id": "JsxElementBase",
      "name": "JsxElementBase",
      "val": 41
    },
    {
      "id": "JsxElement",
      "name": "JsxElement",
      "val": 2535
    },
    {
      "id": "setText",
      "name": "setText",
      "val": 426
    },
    {
      "id": "JsxExpressionBase",
      "name": "JsxExpressionBase",
      "val": 81
    },
    {
      "id": "JsxExpression",
      "name": "JsxExpression",
      "val": 52
    },
    {
      "id": "JsxFragment",
      "name": "JsxFragment",
      "val": 402
    },
    {
      "id": "createBase$A",
      "name": "createBase$A",
      "val": 72
    },
    {
      "id": "JsxOpeningElementBase",
      "name": "JsxOpeningElementBase",
      "val": 55
    },
    {
      "id": "JsxOpeningElement",
      "name": "JsxOpeningElement",
      "val": 60
    },
    {
      "id": "JsxOpeningFragment",
      "name": "JsxOpeningFragment",
      "val": 50
    },
    {
      "id": "createBase$B",
      "name": "createBase$B",
      "val": 72
    },
    {
      "id": "JsxSelfClosingElementBase",
      "name": "JsxSelfClosingElementBase",
      "val": 66
    },
    {
      "id": "JsxSelfClosingElement",
      "name": "JsxSelfClosingElement",
      "val": 383
    },
    {
      "id": "JsxSpreadAttributeBase",
      "name": "JsxSpreadAttributeBase",
      "val": 54
    },
    {
      "id": "JsxSpreadAttribute",
      "name": "JsxSpreadAttribute",
      "val": 702
    },
    {
      "id": "JsxTextBase",
      "name": "JsxTextBase",
      "val": 42
    },
    {
      "id": "JsxText",
      "name": "JsxText",
      "val": 339
    },
    {
      "id": "BigIntLiteralBase",
      "name": "BigIntLiteralBase",
      "val": 44
    },
    {
      "id": "BigIntLiteral",
      "name": "BigIntLiteral",
      "val": 824
    },
    {
      "id": "TrueLiteralBase",
      "name": "TrueLiteralBase",
      "val": 42
    },
    {
      "id": "TrueLiteral",
      "name": "TrueLiteral",
      "val": 202
    },
    {
      "id": "FalseLiteralBase",
      "name": "FalseLiteralBase",
      "val": 43
    },
    {
      "id": "FalseLiteral",
      "name": "FalseLiteral",
      "val": 204
    },
    {
      "id": "setLiteralValue",
      "name": "setLiteralValue",
      "val": 320
    },
    {
      "id": "getLiteralValue",
      "name": "getLiteralValue",
      "val": 99
    },
    {
      "id": "NullLiteralBase",
      "name": "NullLiteralBase",
      "val": 42
    },
    {
      "id": "NullLiteral",
      "name": "NullLiteral",
      "val": 48
    },
    {
      "id": "NumericLiteralBase",
      "name": "NumericLiteralBase",
      "val": 45
    },
    {
      "id": "NumericLiteral",
      "name": "NumericLiteral",
      "val": 511
    },
    {
      "id": "RegularExpressionLiteralBase",
      "name": "RegularExpressionLiteralBase",
      "val": 55
    },
    {
      "id": "RegularExpressionLiteral",
      "name": "RegularExpressionLiteral",
      "val": 821
    },
    {
      "id": "StringLiteralBase",
      "name": "StringLiteralBase",
      "val": 44
    },
    {
      "id": "StringLiteral",
      "name": "StringLiteral",
      "val": 576
    },
    {
      "id": "NoSubstitutionTemplateLiteralBase",
      "name": "NoSubstitutionTemplateLiteralBase",
      "val": 60
    },
    {
      "id": "NoSubstitutionTemplateLiteral",
      "name": "NoSubstitutionTemplateLiteral",
      "val": 578
    },
    {
      "id": "TaggedTemplateExpression",
      "name": "TaggedTemplateExpression",
      "val": 981
    },
    {
      "id": "TemplateExpressionBase",
      "name": "TemplateExpressionBase",
      "val": 49
    },
    {
      "id": "TemplateExpression",
      "name": "TemplateExpression",
      "val": 758
    },
    {
      "id": "TemplateHeadBase",
      "name": "TemplateHeadBase",
      "val": 47
    },
    {
      "id": "TemplateHead",
      "name": "TemplateHead",
      "val": 50
    },
    {
      "id": "TemplateMiddleBase",
      "name": "TemplateMiddleBase",
      "val": 49
    },
    {
      "id": "TemplateMiddle",
      "name": "TemplateMiddle",
      "val": 54
    },
    {
      "id": "TemplateSpanBase",
      "name": "TemplateSpanBase",
      "val": 48
    },
    {
      "id": "TemplateSpan",
      "name": "TemplateSpan",
      "val": 151
    },
    {
      "id": "TemplateTailBase",
      "name": "TemplateTailBase",
      "val": 47
    },
    {
      "id": "TemplateTail",
      "name": "TemplateTail",
      "val": 50
    },
    {
      "id": "CommonIdentifierBase",
      "name": "CommonIdentifierBase",
      "val": 412
    },
    {
      "id": "ComputedPropertyNameBase",
      "name": "ComputedPropertyNameBase",
      "val": 56
    },
    {
      "id": "ComputedPropertyName",
      "name": "ComputedPropertyName",
      "val": 66
    },
    {
      "id": "IdentifierBase",
      "name": "IdentifierBase",
      "val": 102
    },
    {
      "id": "Identifier",
      "name": "Identifier",
      "val": 153
    },
    {
      "id": "PrivateIdentifierBase",
      "name": "PrivateIdentifierBase",
      "val": 96
    },
    {
      "id": "PrivateIdentifier",
      "name": "PrivateIdentifier",
      "val": 60
    },
    {
      "id": "QualifiedName",
      "name": "QualifiedName",
      "val": 231
    },
    {
      "id": "createBase$C",
      "name": "createBase$C",
      "val": 141
    },
    {
      "id": "VariableDeclarationBase",
      "name": "VariableDeclarationBase",
      "val": 51
    },
    {
      "id": "VariableDeclaration",
      "name": "VariableDeclaration",
      "val": 2074
    },
    {
      "id": "VariableDeclarationListBase",
      "name": "VariableDeclarationListBase",
      "val": 59
    },
    {
      "id": "VariableDeclarationList",
      "name": "VariableDeclarationList",
      "val": 2894
    },
    {
      "id": "Signature",
      "name": "Signature",
      "val": 1424
    },
    {
      "id": "Symbol",
      "name": "Symbol",
      "val": 4346
    },
    {
      "id": "TextSpan",
      "name": "TextSpan",
      "val": 417
    },
    {
      "id": "TextChange",
      "name": "TextChange",
      "val": 338
    },
    {
      "id": "FileTextChanges",
      "name": "FileTextChanges",
      "val": 1775
    },
    {
      "id": "CodeAction",
      "name": "CodeAction",
      "val": 439
    },
    {
      "id": "CodeFixAction",
      "name": "CodeFixAction",
      "val": 277
    },
    {
      "id": "CombinedCodeActions",
      "name": "CombinedCodeActions",
      "val": 518
    },
    {
      "id": "DocumentSpan",
      "name": "DocumentSpan",
      "val": 1989
    },
    {
      "id": "DefinitionInfo",
      "name": "DefinitionInfo",
      "val": 1337
    },
    {
      "id": "DiagnosticMessageChain",
      "name": "DiagnosticMessageChain",
      "val": 702
    },
    {
      "id": "Diagnostic",
      "name": "Diagnostic",
      "val": 1536
    },
    {
      "id": "DiagnosticWithLocation",
      "name": "DiagnosticWithLocation",
      "val": 404
    },
    {
      "id": "OutputFile",
      "name": "OutputFile",
      "val": 529
    },
    {
      "id": "EmitOutput",
      "name": "EmitOutput",
      "val": 432
    },
    {
      "id": "EmitResult",
      "name": "EmitResult",
      "val": 478
    },
    {
      "id": "ImplementationLocation",
      "name": "ImplementationLocation",
      "val": 360
    },
    {
      "id": "MemoryEmitResult",
      "name": "MemoryEmitResult",
      "val": 738
    },
    {
      "id": "RefactorEditInfo",
      "name": "RefactorEditInfo",
      "val": 677
    },
    {
      "id": "ReferencedSymbol",
      "name": "ReferencedSymbol",
      "val": 557
    },
    {
      "id": "ReferencedSymbolDefinitionInfo",
      "name": "ReferencedSymbolDefinitionInfo",
      "val": 304
    },
    {
      "id": "ReferenceEntry",
      "name": "ReferenceEntry",
      "val": 375
    },
    {
      "id": "RenameLocation",
      "name": "RenameLocation",
      "val": 206
    },
    {
      "id": "SymbolDisplayPart",
      "name": "SymbolDisplayPart",
      "val": 325
    },
    {
      "id": "TypeChecker",
      "name": "TypeChecker",
      "val": 5259
    },
    {
      "id": "Program",
      "name": "Program",
      "val": 4916
    },
    {
      "id": "LanguageService",
      "name": "LanguageService",
      "val": 10245
    },
    {
      "id": "Type",
      "name": "Type",
      "val": 9522
    },
    {
      "id": "TypeParameter",
      "name": "TypeParameter",
      "val": 1468
    },
    {
      "id": "DirectoryEmitResult",
      "name": "DirectoryEmitResult",
      "val": 349
    },
    {
      "id": "Directory",
      "name": "Directory",
      "val": 26658
    },
    {
      "id": "getDirectoryCopyOptions",
      "name": "getDirectoryCopyOptions",
      "val": 191
    },
    {
      "id": "isStandardizedFilePath",
      "name": "isStandardizedFilePath",
      "val": 90
    },
    {
      "id": "DirectoryCoordinator",
      "name": "DirectoryCoordinator",
      "val": 2449
    },
    {
      "id": "DirectoryCache",
      "name": "DirectoryCache",
      "val": 6515
    },
    {
      "id": "ForgetfulNodeCache",
      "name": "ForgetfulNodeCache",
      "val": 1605
    },
    {
      "id": "kindToWrapperMappings",
      "name": "kindToWrapperMappings",
      "val": 10784
    },
    {
      "id": "CompilerFactory",
      "name": "CompilerFactory",
      "val": 17659
    },
    {
      "id": "InProjectCoordinator",
      "name": "InProjectCoordinator",
      "val": 4424
    },
    {
      "id": "StructurePrinterFactory",
      "name": "StructurePrinterFactory",
      "val": 5244
    },
    {
      "id": "createWrappedNode",
      "name": "createWrappedNode",
      "val": 1670
    },
    {
      "id": "ProjectContext",
      "name": "ProjectContext",
      "val": 6494
    },
    {
      "id": "Project",
      "name": "Project",
      "val": 14921
    },
    {
      "id": "normalizeAmbientModuleName",
      "name": "normalizeAmbientModuleName",
      "val": 317
    },
    {
      "id": "structurePrinterFactory",
      "name": "structurePrinterFactory",
      "val": 235
    },
    {
      "id": "Writers",
      "name": "Writers",
      "val": 2205
    },
    {
      "id": "getWriteFunctionForUnionOrIntersectionType",
      "name": "getWriteFunctionForUnionOrIntersectionType",
      "val": 174
    },
    {
      "id": "anyPropertyHasValue",
      "name": "anyPropertyHasValue",
      "val": 273
    },
    {
      "id": "writeSeparatedByString",
      "name": "writeSeparatedByString",
      "val": 211
    },
    {
      "id": "writeValue",
      "name": "writeValue",
      "val": 152
    },
    {
      "id": "{ InvalidOperationError, FileNotFoundError, ArgumentError, ArgumentNullOrWhitespaceError, ArgumentOutOfRangeError, ArgumentTypeError, BaseError, DirectoryNotFoundError, NotImplementedError, NotSupportedError, PathNotFoundError }",
      "name": "{ InvalidOperationError, FileNotFoundError, ArgumentError, ArgumentNullOrWhitespaceError, ArgumentOutOfRangeError, ArgumentTypeError, BaseError, DirectoryNotFoundError, NotImplementedError, NotSupportedError, PathNotFoundError }",
      "val": 251
    },
    {
      "id": "WriterFunctions",
      "name": "WriterFunctions",
      "val": 32
    },
    {
      "id": "TypeGuards",
      "name": "TypeGuards",
      "val": 24
    },
    {
      "id": "exp#: 'use strict';",
      "name": "exp#: 'use strict';",
      "val": 13
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 64
    },
    {
      "id": "IndentationText()",
      "name": "IndentationText()",
      "val": 268
    },
    {
      "id": "common()",
      "name": "common()",
      "val": 57
    },
    {
      "id": "FormattingKind()",
      "name": "FormattingKind()",
      "val": 326
    },
    {
      "id": "CommentNodeKind()",
      "name": "CommentNodeKind()",
      "val": 479
    },
    {
      "id": "CommentKind()",
      "name": "CommentKind()",
      "val": 247
    },
    {
      "id": "exp#: Node.isAnyKeyword = Node.is(common.SyntaxKind.AnyK",
      "name": "exp#: Node.isAnyKeyword = Node.is(common.SyntaxKind.AnyK",
      "val": 60
    },
    {
      "id": "exp#: Node.isArrayBindingPattern = Node.is(common.Syntax",
      "name": "exp#: Node.isArrayBindingPattern = Node.is(common.Syntax",
      "val": 78
    },
    {
      "id": "exp#: Node.isArrayLiteralExpression = Node.is(common.Syn",
      "name": "exp#: Node.isArrayLiteralExpression = Node.is(common.Syn",
      "val": 84
    },
    {
      "id": "exp#: Node.isArrowFunction = Node.is(common.SyntaxKind.A",
      "name": "exp#: Node.isArrowFunction = Node.is(common.SyntaxKind.A",
      "val": 66
    },
    {
      "id": "exp#: Node.isAsExpression = Node.is(common.SyntaxKind.As",
      "name": "exp#: Node.isAsExpression = Node.is(common.SyntaxKind.As",
      "val": 64
    },
    {
      "id": "exp#: Node.isAwaitExpression = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isAwaitExpression = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isBigIntLiteral = Node.is(common.SyntaxKind.B",
      "name": "exp#: Node.isBigIntLiteral = Node.is(common.SyntaxKind.B",
      "val": 66
    },
    {
      "id": "exp#: Node.isBinaryExpression = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isBinaryExpression = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isBindingElement = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isBindingElement = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isBlock = Node.is(common.SyntaxKind.Block);",
      "name": "exp#: Node.isBlock = Node.is(common.SyntaxKind.Block);",
      "val": 50
    },
    {
      "id": "exp#: Node.isBooleanKeyword = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isBooleanKeyword = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isBreakStatement = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isBreakStatement = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isCallExpression = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isCallExpression = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isCaseBlock = Node.is(common.SyntaxKind.CaseB",
      "name": "exp#: Node.isCaseBlock = Node.is(common.SyntaxKind.CaseB",
      "val": 58
    },
    {
      "id": "exp#: Node.isCaseClause = Node.is(common.SyntaxKind.Case",
      "name": "exp#: Node.isCaseClause = Node.is(common.SyntaxKind.Case",
      "val": 60
    },
    {
      "id": "exp#: Node.isCatchClause = Node.is(common.SyntaxKind.Cat",
      "name": "exp#: Node.isCatchClause = Node.is(common.SyntaxKind.Cat",
      "val": 62
    },
    {
      "id": "exp#: Node.isClassDeclaration = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isClassDeclaration = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isClassExpression = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isClassExpression = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isCommaListExpression = Node.is(common.Syntax",
      "name": "exp#: Node.isCommaListExpression = Node.is(common.Syntax",
      "val": 78
    },
    {
      "id": "exp#: Node.isComputedPropertyName = Node.is(common.Synta",
      "name": "exp#: Node.isComputedPropertyName = Node.is(common.Synta",
      "val": 80
    },
    {
      "id": "exp#: Node.isConditionalExpression = Node.is(common.Synt",
      "name": "exp#: Node.isConditionalExpression = Node.is(common.Synt",
      "val": 82
    },
    {
      "id": "exp#: Node.isContinueStatement = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isContinueStatement = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isDebuggerStatement = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isDebuggerStatement = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isDecorator = Node.is(common.SyntaxKind.Decor",
      "name": "exp#: Node.isDecorator = Node.is(common.SyntaxKind.Decor",
      "val": 58
    },
    {
      "id": "exp#: Node.isDefaultClause = Node.is(common.SyntaxKind.D",
      "name": "exp#: Node.isDefaultClause = Node.is(common.SyntaxKind.D",
      "val": 66
    },
    {
      "id": "exp#: Node.isDeleteExpression = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isDeleteExpression = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isDoStatement = Node.is(common.SyntaxKind.DoS",
      "name": "exp#: Node.isDoStatement = Node.is(common.SyntaxKind.DoS",
      "val": 62
    },
    {
      "id": "exp#: Node.isElementAccessExpression = Node.is(common.Sy",
      "name": "exp#: Node.isElementAccessExpression = Node.is(common.Sy",
      "val": 86
    },
    {
      "id": "exp#: Node.isEmptyStatement = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isEmptyStatement = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isEnumDeclaration = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isEnumDeclaration = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isEnumMember = Node.is(common.SyntaxKind.Enum",
      "name": "exp#: Node.isEnumMember = Node.is(common.SyntaxKind.Enum",
      "val": 60
    },
    {
      "id": "exp#: Node.isExportAssignment = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isExportAssignment = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isExportDeclaration = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isExportDeclaration = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isExportSpecifier = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isExportSpecifier = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isExpressionStatement = Node.is(common.Syntax",
      "name": "exp#: Node.isExpressionStatement = Node.is(common.Syntax",
      "val": 78
    },
    {
      "id": "exp#: Node.isExpressionWithTypeArguments = Node.is(commo",
      "name": "exp#: Node.isExpressionWithTypeArguments = Node.is(commo",
      "val": 94
    },
    {
      "id": "exp#: Node.isExternalModuleReference = Node.is(common.Sy",
      "name": "exp#: Node.isExternalModuleReference = Node.is(common.Sy",
      "val": 86
    },
    {
      "id": "exp#: Node.isForInStatement = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isForInStatement = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isForOfStatement = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isForOfStatement = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isForStatement = Node.is(common.SyntaxKind.Fo",
      "name": "exp#: Node.isForStatement = Node.is(common.SyntaxKind.Fo",
      "val": 64
    },
    {
      "id": "exp#: Node.isFunctionDeclaration = Node.is(common.Syntax",
      "name": "exp#: Node.isFunctionDeclaration = Node.is(common.Syntax",
      "val": 78
    },
    {
      "id": "exp#: Node.isFunctionExpression = Node.is(common.SyntaxK",
      "name": "exp#: Node.isFunctionExpression = Node.is(common.SyntaxK",
      "val": 76
    },
    {
      "id": "exp#: Node.isHeritageClause = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isHeritageClause = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isIdentifier = Node.is(common.SyntaxKind.Iden",
      "name": "exp#: Node.isIdentifier = Node.is(common.SyntaxKind.Iden",
      "val": 60
    },
    {
      "id": "exp#: Node.isIfStatement = Node.is(common.SyntaxKind.IfS",
      "name": "exp#: Node.isIfStatement = Node.is(common.SyntaxKind.IfS",
      "val": 62
    },
    {
      "id": "exp#: Node.isImportClause = Node.is(common.SyntaxKind.Im",
      "name": "exp#: Node.isImportClause = Node.is(common.SyntaxKind.Im",
      "val": 64
    },
    {
      "id": "exp#: Node.isImportDeclaration = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isImportDeclaration = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isImportEqualsDeclaration = Node.is(common.Sy",
      "name": "exp#: Node.isImportEqualsDeclaration = Node.is(common.Sy",
      "val": 86
    },
    {
      "id": "exp#: Node.isImportSpecifier = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isImportSpecifier = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isInferKeyword = Node.is(common.SyntaxKind.In",
      "name": "exp#: Node.isInferKeyword = Node.is(common.SyntaxKind.In",
      "val": 64
    },
    {
      "id": "exp#: Node.isInterfaceDeclaration = Node.is(common.Synta",
      "name": "exp#: Node.isInterfaceDeclaration = Node.is(common.Synta",
      "val": 80
    },
    {
      "id": "exp#: Node.isJSDocAugmentsTag = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isJSDocAugmentsTag = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isJSDocAuthorTag = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isJSDocAuthorTag = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isJSDocCallbackTag = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isJSDocCallbackTag = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isJSDocClassTag = Node.is(common.SyntaxKind.J",
      "name": "exp#: Node.isJSDocClassTag = Node.is(common.SyntaxKind.J",
      "val": 66
    },
    {
      "id": "exp#: Node.isJSDocDeprecatedTag = Node.is(common.SyntaxK",
      "name": "exp#: Node.isJSDocDeprecatedTag = Node.is(common.SyntaxK",
      "val": 76
    },
    {
      "id": "exp#: Node.isJSDocEnumTag = Node.is(common.SyntaxKind.JS",
      "name": "exp#: Node.isJSDocEnumTag = Node.is(common.SyntaxKind.JS",
      "val": 64
    },
    {
      "id": "exp#: Node.isJSDocFunctionType = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isJSDocFunctionType = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isJSDocImplementsTag = Node.is(common.SyntaxK",
      "name": "exp#: Node.isJSDocImplementsTag = Node.is(common.SyntaxK",
      "val": 76
    },
    {
      "id": "exp#: Node.isJSDocParameterTag = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isJSDocParameterTag = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isJSDocPrivateTag = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isJSDocPrivateTag = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isJSDocPropertyTag = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isJSDocPropertyTag = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isJSDocProtectedTag = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isJSDocProtectedTag = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isJSDocPublicTag = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isJSDocPublicTag = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isJSDocReadonlyTag = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isJSDocReadonlyTag = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isJSDocReturnTag = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isJSDocReturnTag = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isJSDocSeeTag = Node.is(common.SyntaxKind.JSD",
      "name": "exp#: Node.isJSDocSeeTag = Node.is(common.SyntaxKind.JSD",
      "val": 62
    },
    {
      "id": "exp#: Node.isJSDocSignature = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isJSDocSignature = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isJSDocTemplateTag = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isJSDocTemplateTag = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isJSDocThisTag = Node.is(common.SyntaxKind.JS",
      "name": "exp#: Node.isJSDocThisTag = Node.is(common.SyntaxKind.JS",
      "val": 64
    },
    {
      "id": "exp#: Node.isJSDocTypeExpression = Node.is(common.Syntax",
      "name": "exp#: Node.isJSDocTypeExpression = Node.is(common.Syntax",
      "val": 78
    },
    {
      "id": "exp#: Node.isJSDocTypeTag = Node.is(common.SyntaxKind.JS",
      "name": "exp#: Node.isJSDocTypeTag = Node.is(common.SyntaxKind.JS",
      "val": 64
    },
    {
      "id": "exp#: Node.isJSDocTypedefTag = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isJSDocTypedefTag = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isJsxAttribute = Node.is(common.SyntaxKind.Js",
      "name": "exp#: Node.isJsxAttribute = Node.is(common.SyntaxKind.Js",
      "val": 64
    },
    {
      "id": "exp#: Node.isJsxClosingElement = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isJsxClosingElement = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isJsxClosingFragment = Node.is(common.SyntaxK",
      "name": "exp#: Node.isJsxClosingFragment = Node.is(common.SyntaxK",
      "val": 76
    },
    {
      "id": "exp#: Node.isJsxElement = Node.is(common.SyntaxKind.JsxE",
      "name": "exp#: Node.isJsxElement = Node.is(common.SyntaxKind.JsxE",
      "val": 60
    },
    {
      "id": "exp#: Node.isJsxExpression = Node.is(common.SyntaxKind.J",
      "name": "exp#: Node.isJsxExpression = Node.is(common.SyntaxKind.J",
      "val": 66
    },
    {
      "id": "exp#: Node.isJsxFragment = Node.is(common.SyntaxKind.Jsx",
      "name": "exp#: Node.isJsxFragment = Node.is(common.SyntaxKind.Jsx",
      "val": 62
    },
    {
      "id": "exp#: Node.isJsxOpeningElement = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isJsxOpeningElement = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isJsxOpeningFragment = Node.is(common.SyntaxK",
      "name": "exp#: Node.isJsxOpeningFragment = Node.is(common.SyntaxK",
      "val": 76
    },
    {
      "id": "exp#: Node.isJsxSelfClosingElement = Node.is(common.Synt",
      "name": "exp#: Node.isJsxSelfClosingElement = Node.is(common.Synt",
      "val": 82
    },
    {
      "id": "exp#: Node.isJsxSpreadAttribute = Node.is(common.SyntaxK",
      "name": "exp#: Node.isJsxSpreadAttribute = Node.is(common.SyntaxK",
      "val": 76
    },
    {
      "id": "exp#: Node.isJsxText = Node.is(common.SyntaxKind.JsxText",
      "name": "exp#: Node.isJsxText = Node.is(common.SyntaxKind.JsxText",
      "val": 54
    },
    {
      "id": "exp#: Node.isLabeledStatement = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isLabeledStatement = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isMetaProperty = Node.is(common.SyntaxKind.Me",
      "name": "exp#: Node.isMetaProperty = Node.is(common.SyntaxKind.Me",
      "val": 64
    },
    {
      "id": "exp#: Node.isMethodDeclaration = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isMethodDeclaration = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isMethodSignature = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isMethodSignature = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isModuleBlock = Node.is(common.SyntaxKind.Mod",
      "name": "exp#: Node.isModuleBlock = Node.is(common.SyntaxKind.Mod",
      "val": 62
    },
    {
      "id": "exp#: Node.isModuleDeclaration = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isModuleDeclaration = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isNamedExports = Node.is(common.SyntaxKind.Na",
      "name": "exp#: Node.isNamedExports = Node.is(common.SyntaxKind.Na",
      "val": 64
    },
    {
      "id": "exp#: Node.isNamedImports = Node.is(common.SyntaxKind.Na",
      "name": "exp#: Node.isNamedImports = Node.is(common.SyntaxKind.Na",
      "val": 64
    },
    {
      "id": "exp#: Node.isNamedTupleMember = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isNamedTupleMember = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isNamespaceExport = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isNamespaceExport = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isNamespaceImport = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isNamespaceImport = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isNeverKeyword = Node.is(common.SyntaxKind.Ne",
      "name": "exp#: Node.isNeverKeyword = Node.is(common.SyntaxKind.Ne",
      "val": 64
    },
    {
      "id": "exp#: Node.isNewExpression = Node.is(common.SyntaxKind.N",
      "name": "exp#: Node.isNewExpression = Node.is(common.SyntaxKind.N",
      "val": 66
    },
    {
      "id": "exp#: Node.isNoSubstitutionTemplateLiteral = Node.is(com",
      "name": "exp#: Node.isNoSubstitutionTemplateLiteral = Node.is(com",
      "val": 98
    },
    {
      "id": "exp#: Node.isNonNullExpression = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isNonNullExpression = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isNotEmittedStatement = Node.is(common.Syntax",
      "name": "exp#: Node.isNotEmittedStatement = Node.is(common.Syntax",
      "val": 78
    },
    {
      "id": "exp#: Node.isNumberKeyword = Node.is(common.SyntaxKind.N",
      "name": "exp#: Node.isNumberKeyword = Node.is(common.SyntaxKind.N",
      "val": 66
    },
    {
      "id": "exp#: Node.isNumericLiteral = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isNumericLiteral = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isObjectBindingPattern = Node.is(common.Synta",
      "name": "exp#: Node.isObjectBindingPattern = Node.is(common.Synta",
      "val": 80
    },
    {
      "id": "exp#: Node.isObjectKeyword = Node.is(common.SyntaxKind.O",
      "name": "exp#: Node.isObjectKeyword = Node.is(common.SyntaxKind.O",
      "val": 66
    },
    {
      "id": "exp#: Node.isObjectLiteralExpression = Node.is(common.Sy",
      "name": "exp#: Node.isObjectLiteralExpression = Node.is(common.Sy",
      "val": 86
    },
    {
      "id": "exp#: Node.isOmittedExpression = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isOmittedExpression = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isParenthesizedExpression = Node.is(common.Sy",
      "name": "exp#: Node.isParenthesizedExpression = Node.is(common.Sy",
      "val": 86
    },
    {
      "id": "exp#: Node.isPartiallyEmittedExpression = Node.is(common",
      "name": "exp#: Node.isPartiallyEmittedExpression = Node.is(common",
      "val": 92
    },
    {
      "id": "exp#: Node.isPostfixUnaryExpression = Node.is(common.Syn",
      "name": "exp#: Node.isPostfixUnaryExpression = Node.is(common.Syn",
      "val": 84
    },
    {
      "id": "exp#: Node.isPrefixUnaryExpression = Node.is(common.Synt",
      "name": "exp#: Node.isPrefixUnaryExpression = Node.is(common.Synt",
      "val": 82
    },
    {
      "id": "exp#: Node.isPrivateIdentifier = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isPrivateIdentifier = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isPropertyAccessExpression = Node.is(common.S",
      "name": "exp#: Node.isPropertyAccessExpression = Node.is(common.S",
      "val": 88
    },
    {
      "id": "exp#: Node.isPropertyAssignment = Node.is(common.SyntaxK",
      "name": "exp#: Node.isPropertyAssignment = Node.is(common.SyntaxK",
      "val": 76
    },
    {
      "id": "exp#: Node.isPropertyDeclaration = Node.is(common.Syntax",
      "name": "exp#: Node.isPropertyDeclaration = Node.is(common.Syntax",
      "val": 78
    },
    {
      "id": "exp#: Node.isPropertySignature = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isPropertySignature = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isQualifiedName = Node.is(common.SyntaxKind.Q",
      "name": "exp#: Node.isQualifiedName = Node.is(common.SyntaxKind.Q",
      "val": 66
    },
    {
      "id": "exp#: Node.isRegularExpressionLiteral = Node.is(common.S",
      "name": "exp#: Node.isRegularExpressionLiteral = Node.is(common.S",
      "val": 88
    },
    {
      "id": "exp#: Node.isReturnStatement = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isReturnStatement = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isSemicolonToken = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isSemicolonToken = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isShorthandPropertyAssignment = Node.is(commo",
      "name": "exp#: Node.isShorthandPropertyAssignment = Node.is(commo",
      "val": 94
    },
    {
      "id": "exp#: Node.isSourceFile = Node.is(common.SyntaxKind.Sour",
      "name": "exp#: Node.isSourceFile = Node.is(common.SyntaxKind.Sour",
      "val": 60
    },
    {
      "id": "exp#: Node.isSpreadAssignment = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isSpreadAssignment = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isSpreadElement = Node.is(common.SyntaxKind.S",
      "name": "exp#: Node.isSpreadElement = Node.is(common.SyntaxKind.S",
      "val": 66
    },
    {
      "id": "exp#: Node.isStringKeyword = Node.is(common.SyntaxKind.S",
      "name": "exp#: Node.isStringKeyword = Node.is(common.SyntaxKind.S",
      "val": 66
    },
    {
      "id": "exp#: Node.isStringLiteral = Node.is(common.SyntaxKind.S",
      "name": "exp#: Node.isStringLiteral = Node.is(common.SyntaxKind.S",
      "val": 66
    },
    {
      "id": "exp#: Node.isSwitchStatement = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isSwitchStatement = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "exp#: Node.isSymbolKeyword = Node.is(common.SyntaxKind.S",
      "name": "exp#: Node.isSymbolKeyword = Node.is(common.SyntaxKind.S",
      "val": 66
    },
    {
      "id": "exp#: Node.isSyntaxList = Node.is(common.SyntaxKind.Synt",
      "name": "exp#: Node.isSyntaxList = Node.is(common.SyntaxKind.Synt",
      "val": 60
    },
    {
      "id": "exp#: Node.isTaggedTemplateExpression = Node.is(common.S",
      "name": "exp#: Node.isTaggedTemplateExpression = Node.is(common.S",
      "val": 88
    },
    {
      "id": "exp#: Node.isTemplateExpression = Node.is(common.SyntaxK",
      "name": "exp#: Node.isTemplateExpression = Node.is(common.SyntaxK",
      "val": 76
    },
    {
      "id": "exp#: Node.isTemplateHead = Node.is(common.SyntaxKind.Te",
      "name": "exp#: Node.isTemplateHead = Node.is(common.SyntaxKind.Te",
      "val": 64
    },
    {
      "id": "exp#: Node.isTemplateMiddle = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isTemplateMiddle = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isTemplateSpan = Node.is(common.SyntaxKind.Te",
      "name": "exp#: Node.isTemplateSpan = Node.is(common.SyntaxKind.Te",
      "val": 64
    },
    {
      "id": "exp#: Node.isTemplateTail = Node.is(common.SyntaxKind.Te",
      "name": "exp#: Node.isTemplateTail = Node.is(common.SyntaxKind.Te",
      "val": 64
    },
    {
      "id": "exp#: Node.isThrowStatement = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isThrowStatement = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isTryStatement = Node.is(common.SyntaxKind.Tr",
      "name": "exp#: Node.isTryStatement = Node.is(common.SyntaxKind.Tr",
      "val": 64
    },
    {
      "id": "exp#: Node.isTypeAliasDeclaration = Node.is(common.Synta",
      "name": "exp#: Node.isTypeAliasDeclaration = Node.is(common.Synta",
      "val": 80
    },
    {
      "id": "exp#: Node.isTypeOfExpression = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isTypeOfExpression = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isUndefinedKeyword = Node.is(common.SyntaxKin",
      "name": "exp#: Node.isUndefinedKeyword = Node.is(common.SyntaxKin",
      "val": 72
    },
    {
      "id": "exp#: Node.isVariableDeclaration = Node.is(common.Syntax",
      "name": "exp#: Node.isVariableDeclaration = Node.is(common.Syntax",
      "val": 78
    },
    {
      "id": "exp#: Node.isVariableDeclarationList = Node.is(common.Sy",
      "name": "exp#: Node.isVariableDeclarationList = Node.is(common.Sy",
      "val": 86
    },
    {
      "id": "exp#: Node.isVariableStatement = Node.is(common.SyntaxKi",
      "name": "exp#: Node.isVariableStatement = Node.is(common.SyntaxKi",
      "val": 74
    },
    {
      "id": "exp#: Node.isVoidExpression = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isVoidExpression = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isWhileStatement = Node.is(common.SyntaxKind.",
      "name": "exp#: Node.isWhileStatement = Node.is(common.SyntaxKind.",
      "val": 68
    },
    {
      "id": "exp#: Node.isWithStatement = Node.is(common.SyntaxKind.W",
      "name": "exp#: Node.isWithStatement = Node.is(common.SyntaxKind.W",
      "val": 66
    },
    {
      "id": "exp#: Node.isYieldExpression = Node.is(common.SyntaxKind",
      "name": "exp#: Node.isYieldExpression = Node.is(common.SyntaxKind",
      "val": 70
    },
    {
      "id": "Scope()",
      "name": "Scope()",
      "val": 172
    },
    {
      "id": "StructureKind()",
      "name": "StructureKind()",
      "val": 3071
    },
    {
      "id": "VariableDeclarationKind()",
      "name": "VariableDeclarationKind()",
      "val": 258
    },
    {
      "id": "ModuleDeclarationKind()",
      "name": "ModuleDeclarationKind()",
      "val": 266
    },
    {
      "id": "FileSystemRefreshResult()",
      "name": "FileSystemRefreshResult()",
      "val": 367
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 92
    },
    {
      "id": "QuoteKind()",
      "name": "QuoteKind()",
      "val": 142
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 78
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 90
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 90
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 84
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 80
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 92
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 93
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 84
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 85
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 85
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 98
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 85
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 90
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 106
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 116
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 103
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 102
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 96
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 103
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 98
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 109
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 109
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 104
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 106
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 109
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 96
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 92
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 95
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 102
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 97
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 118
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 105
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 114
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 103
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 106
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 107
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 111
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 116
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 112
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 107
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 102
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 104
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 110
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 104
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 106
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 99
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 102
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 97
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 108
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 105
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 103
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 104
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 104
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 104
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 113
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 97
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 102
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 96
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 104
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 107
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 111
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 106
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 97
    },
    {
      "id": "__decorate()",
      "name": "__decorate()",
      "val": 98
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 165
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 152
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 132
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 160
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 146
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 136
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 156
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 138
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 134
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 138
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 136
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 140
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 150
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 138
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 136
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 134
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 146
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 120
    },
    {
      "id": "Object()",
      "name": "Object()",
      "val": 159
    },
    {
      "id": "exp#: exports.AbstractableNode = AbstractableNode;",
      "name": "exp#: exports.AbstractableNode = AbstractableNode;",
      "val": 45
    },
    {
      "id": "exp#: exports.AmbientableNode = AmbientableNode;",
      "name": "exp#: exports.AmbientableNode = AmbientableNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.ArgumentError = ArgumentError;",
      "name": "exp#: exports.ArgumentError = ArgumentError;",
      "val": 39
    },
    {
      "id": "exp#: exports.ArgumentNullOrWhitespaceError = ArgumentNu",
      "name": "exp#: exports.ArgumentNullOrWhitespaceError = ArgumentNu",
      "val": 71
    },
    {
      "id": "exp#: exports.ArgumentOutOfRangeError = ArgumentOutOfRan",
      "name": "exp#: exports.ArgumentOutOfRangeError = ArgumentOutOfRan",
      "val": 59
    },
    {
      "id": "exp#: exports.ArgumentTypeError = ArgumentTypeError;",
      "name": "exp#: exports.ArgumentTypeError = ArgumentTypeError;",
      "val": 47
    },
    {
      "id": "exp#: exports.ArgumentedNode = ArgumentedNode;",
      "name": "exp#: exports.ArgumentedNode = ArgumentedNode;",
      "val": 41
    },
    {
      "id": "exp#: exports.ArrayBindingPattern = ArrayBindingPattern;",
      "name": "exp#: exports.ArrayBindingPattern = ArrayBindingPattern;",
      "val": 51
    },
    {
      "id": "exp#: exports.ArrayDestructuringAssignment = ArrayDestru",
      "name": "exp#: exports.ArrayDestructuringAssignment = ArrayDestru",
      "val": 69
    },
    {
      "id": "exp#: exports.ArrayDestructuringAssignmentBase = ArrayDe",
      "name": "exp#: exports.ArrayDestructuringAssignmentBase = ArrayDe",
      "val": 77
    },
    {
      "id": "exp#: exports.ArrayLiteralExpression = ArrayLiteralExpre",
      "name": "exp#: exports.ArrayLiteralExpression = ArrayLiteralExpre",
      "val": 57
    },
    {
      "id": "exp#: exports.ArrayTypeNode = ArrayTypeNode;",
      "name": "exp#: exports.ArrayTypeNode = ArrayTypeNode;",
      "val": 39
    },
    {
      "id": "exp#: exports.ArrowFunction = ArrowFunction;",
      "name": "exp#: exports.ArrowFunction = ArrowFunction;",
      "val": 39
    },
    {
      "id": "exp#: exports.ArrowFunctionBase = ArrowFunctionBase;",
      "name": "exp#: exports.ArrowFunctionBase = ArrowFunctionBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.AsExpression = AsExpression;",
      "name": "exp#: exports.AsExpression = AsExpression;",
      "val": 37
    },
    {
      "id": "exp#: exports.AsExpressionBase = AsExpressionBase;",
      "name": "exp#: exports.AsExpressionBase = AsExpressionBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.AssignmentExpression = AssignmentExpressio",
      "name": "exp#: exports.AssignmentExpression = AssignmentExpressio",
      "val": 53
    },
    {
      "id": "exp#: exports.AssignmentExpressionBase = AssignmentExpre",
      "name": "exp#: exports.AssignmentExpressionBase = AssignmentExpre",
      "val": 61
    },
    {
      "id": "exp#: exports.AsyncableNode = AsyncableNode;",
      "name": "exp#: exports.AsyncableNode = AsyncableNode;",
      "val": 39
    },
    {
      "id": "exp#: exports.AwaitExpression = AwaitExpression;",
      "name": "exp#: exports.AwaitExpression = AwaitExpression;",
      "val": 43
    },
    {
      "id": "exp#: exports.AwaitExpressionBase = AwaitExpressionBase;",
      "name": "exp#: exports.AwaitExpressionBase = AwaitExpressionBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.AwaitableNode = AwaitableNode;",
      "name": "exp#: exports.AwaitableNode = AwaitableNode;",
      "val": 39
    },
    {
      "id": "exp#: exports.BaseError = BaseError;",
      "name": "exp#: exports.BaseError = BaseError;",
      "val": 31
    },
    {
      "id": "exp#: exports.BaseExpressionedNode = BaseExpressionedNod",
      "name": "exp#: exports.BaseExpressionedNode = BaseExpressionedNod",
      "val": 53
    },
    {
      "id": "exp#: exports.BigIntLiteral = BigIntLiteral;",
      "name": "exp#: exports.BigIntLiteral = BigIntLiteral;",
      "val": 39
    },
    {
      "id": "exp#: exports.BigIntLiteralBase = BigIntLiteralBase;",
      "name": "exp#: exports.BigIntLiteralBase = BigIntLiteralBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.BinaryExpression = BinaryExpression;",
      "name": "exp#: exports.BinaryExpression = BinaryExpression;",
      "val": 45
    },
    {
      "id": "exp#: exports.BinaryExpressionBase = BinaryExpressionBas",
      "name": "exp#: exports.BinaryExpressionBase = BinaryExpressionBas",
      "val": 53
    },
    {
      "id": "exp#: exports.BindingElement = BindingElement;",
      "name": "exp#: exports.BindingElement = BindingElement;",
      "val": 41
    },
    {
      "id": "exp#: exports.BindingElementBase = BindingElementBase;",
      "name": "exp#: exports.BindingElementBase = BindingElementBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.BindingNamedNode = BindingNamedNode;",
      "name": "exp#: exports.BindingNamedNode = BindingNamedNode;",
      "val": 45
    },
    {
      "id": "exp#: exports.Block = Block;",
      "name": "exp#: exports.Block = Block;",
      "val": 23
    },
    {
      "id": "exp#: exports.BlockBase = BlockBase;",
      "name": "exp#: exports.BlockBase = BlockBase;",
      "val": 31
    },
    {
      "id": "exp#: exports.BodiedNode = BodiedNode;",
      "name": "exp#: exports.BodiedNode = BodiedNode;",
      "val": 33
    },
    {
      "id": "exp#: exports.BodyableNode = BodyableNode;",
      "name": "exp#: exports.BodyableNode = BodyableNode;",
      "val": 37
    },
    {
      "id": "exp#: exports.BreakStatement = BreakStatement;",
      "name": "exp#: exports.BreakStatement = BreakStatement;",
      "val": 41
    },
    {
      "id": "exp#: exports.CallExpression = CallExpression;",
      "name": "exp#: exports.CallExpression = CallExpression;",
      "val": 41
    },
    {
      "id": "exp#: exports.CallExpressionBase = CallExpressionBase;",
      "name": "exp#: exports.CallExpressionBase = CallExpressionBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.CallSignatureDeclaration = CallSignatureDe",
      "name": "exp#: exports.CallSignatureDeclaration = CallSignatureDe",
      "val": 61
    },
    {
      "id": "exp#: exports.CallSignatureDeclarationBase = CallSignatu",
      "name": "exp#: exports.CallSignatureDeclarationBase = CallSignatu",
      "val": 69
    },
    {
      "id": "exp#: exports.CaseBlock = CaseBlock;",
      "name": "exp#: exports.CaseBlock = CaseBlock;",
      "val": 31
    },
    {
      "id": "exp#: exports.CaseBlockBase = CaseBlockBase;",
      "name": "exp#: exports.CaseBlockBase = CaseBlockBase;",
      "val": 39
    },
    {
      "id": "exp#: exports.CaseClause = CaseClause;",
      "name": "exp#: exports.CaseClause = CaseClause;",
      "val": 33
    },
    {
      "id": "exp#: exports.CaseClauseBase = CaseClauseBase;",
      "name": "exp#: exports.CaseClauseBase = CaseClauseBase;",
      "val": 41
    },
    {
      "id": "exp#: exports.CatchClause = CatchClause;",
      "name": "exp#: exports.CatchClause = CatchClause;",
      "val": 35
    },
    {
      "id": "exp#: exports.CatchClauseBase = CatchClauseBase;",
      "name": "exp#: exports.CatchClauseBase = CatchClauseBase;",
      "val": 43
    },
    {
      "id": "exp#: exports.ChildOrderableNode = ChildOrderableNode;",
      "name": "exp#: exports.ChildOrderableNode = ChildOrderableNode;",
      "val": 49
    },
    {
      "id": "exp#: exports.ClassDeclaration = ClassDeclaration;",
      "name": "exp#: exports.ClassDeclaration = ClassDeclaration;",
      "val": 45
    },
    {
      "id": "exp#: exports.ClassDeclarationBase = ClassDeclarationBas",
      "name": "exp#: exports.ClassDeclarationBase = ClassDeclarationBas",
      "val": 53
    },
    {
      "id": "exp#: exports.ClassElement = ClassElement;",
      "name": "exp#: exports.ClassElement = ClassElement;",
      "val": 37
    },
    {
      "id": "exp#: exports.ClassExpression = ClassExpression;",
      "name": "exp#: exports.ClassExpression = ClassExpression;",
      "val": 43
    },
    {
      "id": "exp#: exports.ClassExpressionBase = ClassExpressionBase;",
      "name": "exp#: exports.ClassExpressionBase = ClassExpressionBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.ClassLikeDeclarationBase = ClassLikeDeclar",
      "name": "exp#: exports.ClassLikeDeclarationBase = ClassLikeDeclar",
      "val": 61
    },
    {
      "id": "exp#: exports.ClassLikeDeclarationBaseSpecific = ClassLi",
      "name": "exp#: exports.ClassLikeDeclarationBaseSpecific = ClassLi",
      "val": 77
    },
    {
      "id": "exp#: exports.CodeAction = CodeAction;",
      "name": "exp#: exports.CodeAction = CodeAction;",
      "val": 33
    },
    {
      "id": "exp#: exports.CodeFixAction = CodeFixAction;",
      "name": "exp#: exports.CodeFixAction = CodeFixAction;",
      "val": 39
    },
    {
      "id": "exp#: exports.CombinedCodeActions = CombinedCodeActions;",
      "name": "exp#: exports.CombinedCodeActions = CombinedCodeActions;",
      "val": 51
    },
    {
      "id": "exp#: exports.CommaListExpression = CommaListExpression;",
      "name": "exp#: exports.CommaListExpression = CommaListExpression;",
      "val": 51
    },
    {
      "id": "exp#: exports.CommaListExpressionBase = CommaListExpress",
      "name": "exp#: exports.CommaListExpressionBase = CommaListExpress",
      "val": 59
    },
    {
      "id": "exp#: exports.CommentClassElement = CommentClassElement;",
      "name": "exp#: exports.CommentClassElement = CommentClassElement;",
      "val": 51
    },
    {
      "id": "exp#: exports.CommentEnumMember = CommentEnumMember;",
      "name": "exp#: exports.CommentEnumMember = CommentEnumMember;",
      "val": 47
    },
    {
      "id": "exp#: exports.CommentObjectLiteralElement = CommentObjec",
      "name": "exp#: exports.CommentObjectLiteralElement = CommentObjec",
      "val": 67
    },
    {
      "id": "exp#: exports.CommentRange = CommentRange;",
      "name": "exp#: exports.CommentRange = CommentRange;",
      "val": 37
    },
    {
      "id": "exp#: exports.CommentStatement = CommentStatement;",
      "name": "exp#: exports.CommentStatement = CommentStatement;",
      "val": 45
    },
    {
      "id": "exp#: exports.CommentTypeElement = CommentTypeElement;",
      "name": "exp#: exports.CommentTypeElement = CommentTypeElement;",
      "val": 49
    },
    {
      "id": "exp#: exports.CommonIdentifierBase = CommonIdentifierBas",
      "name": "exp#: exports.CommonIdentifierBase = CommonIdentifierBas",
      "val": 53
    },
    {
      "id": "exp#: exports.CompilerCommentClassElement = CompilerComm",
      "name": "exp#: exports.CompilerCommentClassElement = CompilerComm",
      "val": 67
    },
    {
      "id": "exp#: exports.CompilerCommentEnumMember = CompilerCommen",
      "name": "exp#: exports.CompilerCommentEnumMember = CompilerCommen",
      "val": 63
    },
    {
      "id": "exp#: exports.CompilerCommentNode = CompilerCommentNode;",
      "name": "exp#: exports.CompilerCommentNode = CompilerCommentNode;",
      "val": 51
    },
    {
      "id": "exp#: exports.CompilerCommentObjectLiteralElement = Comp",
      "name": "exp#: exports.CompilerCommentObjectLiteralElement = Comp",
      "val": 83
    },
    {
      "id": "exp#: exports.CompilerCommentStatement = CompilerComment",
      "name": "exp#: exports.CompilerCommentStatement = CompilerComment",
      "val": 61
    },
    {
      "id": "exp#: exports.CompilerCommentTypeElement = CompilerComme",
      "name": "exp#: exports.CompilerCommentTypeElement = CompilerComme",
      "val": 65
    },
    {
      "id": "exp#: exports.ComputedPropertyName = ComputedPropertyNam",
      "name": "exp#: exports.ComputedPropertyName = ComputedPropertyNam",
      "val": 53
    },
    {
      "id": "exp#: exports.ComputedPropertyNameBase = ComputedPropert",
      "name": "exp#: exports.ComputedPropertyNameBase = ComputedPropert",
      "val": 61
    },
    {
      "id": "exp#: exports.ConditionalExpression = ConditionalExpress",
      "name": "exp#: exports.ConditionalExpression = ConditionalExpress",
      "val": 55
    },
    {
      "id": "exp#: exports.ConditionalExpressionBase = ConditionalExp",
      "name": "exp#: exports.ConditionalExpressionBase = ConditionalExp",
      "val": 63
    },
    {
      "id": "exp#: exports.ConditionalTypeNode = ConditionalTypeNode;",
      "name": "exp#: exports.ConditionalTypeNode = ConditionalTypeNode;",
      "val": 51
    },
    {
      "id": "exp#: exports.ConstructSignatureDeclaration = ConstructS",
      "name": "exp#: exports.ConstructSignatureDeclaration = ConstructS",
      "val": 71
    },
    {
      "id": "exp#: exports.ConstructSignatureDeclarationBase = Constr",
      "name": "exp#: exports.ConstructSignatureDeclarationBase = Constr",
      "val": 79
    },
    {
      "id": "exp#: exports.ConstructorDeclaration = ConstructorDeclar",
      "name": "exp#: exports.ConstructorDeclaration = ConstructorDeclar",
      "val": 57
    },
    {
      "id": "exp#: exports.ConstructorDeclarationBase = ConstructorDe",
      "name": "exp#: exports.ConstructorDeclarationBase = ConstructorDe",
      "val": 65
    },
    {
      "id": "exp#: exports.ConstructorDeclarationOverloadBase = Const",
      "name": "exp#: exports.ConstructorDeclarationOverloadBase = Const",
      "val": 81
    },
    {
      "id": "exp#: exports.ConstructorTypeNode = ConstructorTypeNode;",
      "name": "exp#: exports.ConstructorTypeNode = ConstructorTypeNode;",
      "val": 51
    },
    {
      "id": "exp#: exports.ConstructorTypeNodeBase = ConstructorTypeN",
      "name": "exp#: exports.ConstructorTypeNodeBase = ConstructorTypeN",
      "val": 59
    },
    {
      "id": "exp#: exports.ContinueStatement = ContinueStatement;",
      "name": "exp#: exports.ContinueStatement = ContinueStatement;",
      "val": 47
    },
    {
      "id": "exp#: exports.DebuggerStatement = DebuggerStatement;",
      "name": "exp#: exports.DebuggerStatement = DebuggerStatement;",
      "val": 47
    },
    {
      "id": "exp#: exports.DebuggerStatementBase = DebuggerStatementB",
      "name": "exp#: exports.DebuggerStatementBase = DebuggerStatementB",
      "val": 55
    },
    {
      "id": "exp#: exports.DecoratableNode = DecoratableNode;",
      "name": "exp#: exports.DecoratableNode = DecoratableNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.Decorator = Decorator;",
      "name": "exp#: exports.Decorator = Decorator;",
      "val": 31
    },
    {
      "id": "exp#: exports.DecoratorBase = DecoratorBase;",
      "name": "exp#: exports.DecoratorBase = DecoratorBase;",
      "val": 39
    },
    {
      "id": "exp#: exports.DefaultClause = DefaultClause;",
      "name": "exp#: exports.DefaultClause = DefaultClause;",
      "val": 39
    },
    {
      "id": "exp#: exports.DefaultClauseBase = DefaultClauseBase;",
      "name": "exp#: exports.DefaultClauseBase = DefaultClauseBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.DefinitionInfo = DefinitionInfo;",
      "name": "exp#: exports.DefinitionInfo = DefinitionInfo;",
      "val": 41
    },
    {
      "id": "exp#: exports.DeleteExpression = DeleteExpression;",
      "name": "exp#: exports.DeleteExpression = DeleteExpression;",
      "val": 45
    },
    {
      "id": "exp#: exports.DeleteExpressionBase = DeleteExpressionBas",
      "name": "exp#: exports.DeleteExpressionBase = DeleteExpressionBas",
      "val": 53
    },
    {
      "id": "exp#: exports.Diagnostic = Diagnostic;",
      "name": "exp#: exports.Diagnostic = Diagnostic;",
      "val": 33
    },
    {
      "id": "exp#: exports.DiagnosticMessageChain = DiagnosticMessage",
      "name": "exp#: exports.DiagnosticMessageChain = DiagnosticMessage",
      "val": 57
    },
    {
      "id": "exp#: exports.DiagnosticWithLocation = DiagnosticWithLoc",
      "name": "exp#: exports.DiagnosticWithLocation = DiagnosticWithLoc",
      "val": 57
    },
    {
      "id": "exp#: exports.Directory = Directory;",
      "name": "exp#: exports.Directory = Directory;",
      "val": 31
    },
    {
      "id": "exp#: exports.DirectoryEmitResult = DirectoryEmitResult;",
      "name": "exp#: exports.DirectoryEmitResult = DirectoryEmitResult;",
      "val": 51
    },
    {
      "id": "exp#: exports.DirectoryNotFoundError = DirectoryNotFound",
      "name": "exp#: exports.DirectoryNotFoundError = DirectoryNotFound",
      "val": 57
    },
    {
      "id": "exp#: exports.DoStatement = DoStatement;",
      "name": "exp#: exports.DoStatement = DoStatement;",
      "val": 35
    },
    {
      "id": "exp#: exports.DoStatementBase = DoStatementBase;",
      "name": "exp#: exports.DoStatementBase = DoStatementBase;",
      "val": 43
    },
    {
      "id": "exp#: exports.DocumentSpan = DocumentSpan;",
      "name": "exp#: exports.DocumentSpan = DocumentSpan;",
      "val": 37
    },
    {
      "id": "exp#: exports.DotDotDotTokenableNode = DotDotDotTokenabl",
      "name": "exp#: exports.DotDotDotTokenableNode = DotDotDotTokenabl",
      "val": 57
    },
    {
      "id": "exp#: exports.ElementAccessExpression = ElementAccessExp",
      "name": "exp#: exports.ElementAccessExpression = ElementAccessExp",
      "val": 59
    },
    {
      "id": "exp#: exports.ElementAccessExpressionBase = ElementAcces",
      "name": "exp#: exports.ElementAccessExpressionBase = ElementAcces",
      "val": 67
    },
    {
      "id": "exp#: exports.EmitOutput = EmitOutput;",
      "name": "exp#: exports.EmitOutput = EmitOutput;",
      "val": 33
    },
    {
      "id": "exp#: exports.EmitResult = EmitResult;",
      "name": "exp#: exports.EmitResult = EmitResult;",
      "val": 33
    },
    {
      "id": "exp#: exports.EmptyStatement = EmptyStatement;",
      "name": "exp#: exports.EmptyStatement = EmptyStatement;",
      "val": 41
    },
    {
      "id": "exp#: exports.EmptyStatementBase = EmptyStatementBase;",
      "name": "exp#: exports.EmptyStatementBase = EmptyStatementBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.EnumDeclaration = EnumDeclaration;",
      "name": "exp#: exports.EnumDeclaration = EnumDeclaration;",
      "val": 43
    },
    {
      "id": "exp#: exports.EnumDeclarationBase = EnumDeclarationBase;",
      "name": "exp#: exports.EnumDeclarationBase = EnumDeclarationBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.EnumMember = EnumMember;",
      "name": "exp#: exports.EnumMember = EnumMember;",
      "val": 33
    },
    {
      "id": "exp#: exports.EnumMemberBase = EnumMemberBase;",
      "name": "exp#: exports.EnumMemberBase = EnumMemberBase;",
      "val": 41
    },
    {
      "id": "exp#: exports.ExclamationTokenableNode = ExclamationToke",
      "name": "exp#: exports.ExclamationTokenableNode = ExclamationToke",
      "val": 61
    },
    {
      "id": "exp#: exports.ExportAssignment = ExportAssignment;",
      "name": "exp#: exports.ExportAssignment = ExportAssignment;",
      "val": 45
    },
    {
      "id": "exp#: exports.ExportAssignmentBase = ExportAssignmentBas",
      "name": "exp#: exports.ExportAssignmentBase = ExportAssignmentBas",
      "val": 53
    },
    {
      "id": "exp#: exports.ExportDeclaration = ExportDeclaration;",
      "name": "exp#: exports.ExportDeclaration = ExportDeclaration;",
      "val": 47
    },
    {
      "id": "exp#: exports.ExportDeclarationBase = ExportDeclarationB",
      "name": "exp#: exports.ExportDeclarationBase = ExportDeclarationB",
      "val": 55
    },
    {
      "id": "exp#: exports.ExportGetableNode = ExportGetableNode;",
      "name": "exp#: exports.ExportGetableNode = ExportGetableNode;",
      "val": 47
    },
    {
      "id": "exp#: exports.ExportSpecifier = ExportSpecifier;",
      "name": "exp#: exports.ExportSpecifier = ExportSpecifier;",
      "val": 43
    },
    {
      "id": "exp#: exports.ExportSpecifierBase = ExportSpecifierBase;",
      "name": "exp#: exports.ExportSpecifierBase = ExportSpecifierBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.ExportableNode = ExportableNode;",
      "name": "exp#: exports.ExportableNode = ExportableNode;",
      "val": 41
    },
    {
      "id": "exp#: exports.Expression = Expression;",
      "name": "exp#: exports.Expression = Expression;",
      "val": 33
    },
    {
      "id": "exp#: exports.ExpressionStatement = ExpressionStatement;",
      "name": "exp#: exports.ExpressionStatement = ExpressionStatement;",
      "val": 51
    },
    {
      "id": "exp#: exports.ExpressionStatementBase = ExpressionStatem",
      "name": "exp#: exports.ExpressionStatementBase = ExpressionStatem",
      "val": 59
    },
    {
      "id": "exp#: exports.ExpressionWithTypeArguments = ExpressionWi",
      "name": "exp#: exports.ExpressionWithTypeArguments = ExpressionWi",
      "val": 67
    },
    {
      "id": "exp#: exports.ExpressionWithTypeArgumentsBase = Expressi",
      "name": "exp#: exports.ExpressionWithTypeArgumentsBase = Expressi",
      "val": 75
    },
    {
      "id": "exp#: exports.ExpressionableNode = ExpressionableNode;",
      "name": "exp#: exports.ExpressionableNode = ExpressionableNode;",
      "val": 49
    },
    {
      "id": "exp#: exports.ExpressionedNode = ExpressionedNode;",
      "name": "exp#: exports.ExpressionedNode = ExpressionedNode;",
      "val": 45
    },
    {
      "id": "exp#: exports.ExtendsClauseableNode = ExtendsClauseableN",
      "name": "exp#: exports.ExtendsClauseableNode = ExtendsClauseableN",
      "val": 55
    },
    {
      "id": "exp#: exports.ExternalModuleReference = ExternalModuleRe",
      "name": "exp#: exports.ExternalModuleReference = ExternalModuleRe",
      "val": 59
    },
    {
      "id": "exp#: exports.ExternalModuleReferenceBase = ExternalModu",
      "name": "exp#: exports.ExternalModuleReferenceBase = ExternalModu",
      "val": 67
    },
    {
      "id": "exp#: exports.FalseLiteral = FalseLiteral;",
      "name": "exp#: exports.FalseLiteral = FalseLiteral;",
      "val": 37
    },
    {
      "id": "exp#: exports.FalseLiteralBase = FalseLiteralBase;",
      "name": "exp#: exports.FalseLiteralBase = FalseLiteralBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.FileNotFoundError = FileNotFoundError;",
      "name": "exp#: exports.FileNotFoundError = FileNotFoundError;",
      "val": 47
    },
    {
      "id": "exp#: exports.FileReference = FileReference;",
      "name": "exp#: exports.FileReference = FileReference;",
      "val": 39
    },
    {
      "id": "exp#: exports.FileTextChanges = FileTextChanges;",
      "name": "exp#: exports.FileTextChanges = FileTextChanges;",
      "val": 43
    },
    {
      "id": "exp#: exports.ForInStatement = ForInStatement;",
      "name": "exp#: exports.ForInStatement = ForInStatement;",
      "val": 41
    },
    {
      "id": "exp#: exports.ForInStatementBase = ForInStatementBase;",
      "name": "exp#: exports.ForInStatementBase = ForInStatementBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.ForOfStatement = ForOfStatement;",
      "name": "exp#: exports.ForOfStatement = ForOfStatement;",
      "val": 41
    },
    {
      "id": "exp#: exports.ForOfStatementBase = ForOfStatementBase;",
      "name": "exp#: exports.ForOfStatementBase = ForOfStatementBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.ForStatement = ForStatement;",
      "name": "exp#: exports.ForStatement = ForStatement;",
      "val": 37
    },
    {
      "id": "exp#: exports.ForStatementBase = ForStatementBase;",
      "name": "exp#: exports.ForStatementBase = ForStatementBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.FunctionDeclaration = FunctionDeclaration;",
      "name": "exp#: exports.FunctionDeclaration = FunctionDeclaration;",
      "val": 51
    },
    {
      "id": "exp#: exports.FunctionDeclarationBase = FunctionDeclarat",
      "name": "exp#: exports.FunctionDeclarationBase = FunctionDeclarat",
      "val": 59
    },
    {
      "id": "exp#: exports.FunctionDeclarationOverloadBase = Function",
      "name": "exp#: exports.FunctionDeclarationOverloadBase = Function",
      "val": 75
    },
    {
      "id": "exp#: exports.FunctionExpression = FunctionExpression;",
      "name": "exp#: exports.FunctionExpression = FunctionExpression;",
      "val": 49
    },
    {
      "id": "exp#: exports.FunctionExpressionBase = FunctionExpressio",
      "name": "exp#: exports.FunctionExpressionBase = FunctionExpressio",
      "val": 57
    },
    {
      "id": "exp#: exports.FunctionLikeDeclaration = FunctionLikeDecl",
      "name": "exp#: exports.FunctionLikeDeclaration = FunctionLikeDecl",
      "val": 59
    },
    {
      "id": "exp#: exports.FunctionOrConstructorTypeNodeBase = Functi",
      "name": "exp#: exports.FunctionOrConstructorTypeNodeBase = Functi",
      "val": 79
    },
    {
      "id": "exp#: exports.FunctionOrConstructorTypeNodeBaseBase = Fu",
      "name": "exp#: exports.FunctionOrConstructorTypeNodeBaseBase = Fu",
      "val": 87
    },
    {
      "id": "exp#: exports.FunctionTypeNode = FunctionTypeNode;",
      "name": "exp#: exports.FunctionTypeNode = FunctionTypeNode;",
      "val": 45
    },
    {
      "id": "exp#: exports.FunctionTypeNodeBase = FunctionTypeNodeBas",
      "name": "exp#: exports.FunctionTypeNodeBase = FunctionTypeNodeBas",
      "val": 53
    },
    {
      "id": "exp#: exports.GeneratorableNode = GeneratorableNode;",
      "name": "exp#: exports.GeneratorableNode = GeneratorableNode;",
      "val": 47
    },
    {
      "id": "exp#: exports.GetAccessorDeclaration = GetAccessorDeclar",
      "name": "exp#: exports.GetAccessorDeclaration = GetAccessorDeclar",
      "val": 57
    },
    {
      "id": "exp#: exports.GetAccessorDeclarationBase = GetAccessorDe",
      "name": "exp#: exports.GetAccessorDeclarationBase = GetAccessorDe",
      "val": 65
    },
    {
      "id": "exp#: exports.HeritageClause = HeritageClause;",
      "name": "exp#: exports.HeritageClause = HeritageClause;",
      "val": 41
    },
    {
      "id": "exp#: exports.HeritageClauseableNode = HeritageClauseabl",
      "name": "exp#: exports.HeritageClauseableNode = HeritageClauseabl",
      "val": 57
    },
    {
      "id": "exp#: exports.Identifier = Identifier;",
      "name": "exp#: exports.Identifier = Identifier;",
      "val": 33
    },
    {
      "id": "exp#: exports.IdentifierBase = IdentifierBase;",
      "name": "exp#: exports.IdentifierBase = IdentifierBase;",
      "val": 41
    },
    {
      "id": "exp#: exports.IfStatement = IfStatement;",
      "name": "exp#: exports.IfStatement = IfStatement;",
      "val": 35
    },
    {
      "id": "exp#: exports.IfStatementBase = IfStatementBase;",
      "name": "exp#: exports.IfStatementBase = IfStatementBase;",
      "val": 43
    },
    {
      "id": "exp#: exports.ImplementationLocation = ImplementationLoc",
      "name": "exp#: exports.ImplementationLocation = ImplementationLoc",
      "val": 57
    },
    {
      "id": "exp#: exports.ImplementsClauseableNode = ImplementsClaus",
      "name": "exp#: exports.ImplementsClauseableNode = ImplementsClaus",
      "val": 61
    },
    {
      "id": "exp#: exports.ImportClause = ImportClause;",
      "name": "exp#: exports.ImportClause = ImportClause;",
      "val": 37
    },
    {
      "id": "exp#: exports.ImportClauseBase = ImportClauseBase;",
      "name": "exp#: exports.ImportClauseBase = ImportClauseBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.ImportDeclaration = ImportDeclaration;",
      "name": "exp#: exports.ImportDeclaration = ImportDeclaration;",
      "val": 47
    },
    {
      "id": "exp#: exports.ImportDeclarationBase = ImportDeclarationB",
      "name": "exp#: exports.ImportDeclarationBase = ImportDeclarationB",
      "val": 55
    },
    {
      "id": "exp#: exports.ImportEqualsDeclaration = ImportEqualsDecl",
      "name": "exp#: exports.ImportEqualsDeclaration = ImportEqualsDecl",
      "val": 59
    },
    {
      "id": "exp#: exports.ImportEqualsDeclarationBase = ImportEquals",
      "name": "exp#: exports.ImportEqualsDeclarationBase = ImportEquals",
      "val": 67
    },
    {
      "id": "exp#: exports.ImportExpression = ImportExpression;",
      "name": "exp#: exports.ImportExpression = ImportExpression;",
      "val": 45
    },
    {
      "id": "exp#: exports.ImportExpressionBase = ImportExpressionBas",
      "name": "exp#: exports.ImportExpressionBase = ImportExpressionBas",
      "val": 53
    },
    {
      "id": "exp#: exports.ImportExpressionedNode = ImportExpressione",
      "name": "exp#: exports.ImportExpressionedNode = ImportExpressione",
      "val": 57
    },
    {
      "id": "exp#: exports.ImportSpecifier = ImportSpecifier;",
      "name": "exp#: exports.ImportSpecifier = ImportSpecifier;",
      "val": 43
    },
    {
      "id": "exp#: exports.ImportSpecifierBase = ImportSpecifierBase;",
      "name": "exp#: exports.ImportSpecifierBase = ImportSpecifierBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.ImportTypeNode = ImportTypeNode;",
      "name": "exp#: exports.ImportTypeNode = ImportTypeNode;",
      "val": 41
    },
    {
      "id": "exp#: exports.ImportTypeNodeBase = ImportTypeNodeBase;",
      "name": "exp#: exports.ImportTypeNodeBase = ImportTypeNodeBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.IndexSignatureDeclaration = IndexSignature",
      "name": "exp#: exports.IndexSignatureDeclaration = IndexSignature",
      "val": 63
    },
    {
      "id": "exp#: exports.IndexSignatureDeclarationBase = IndexSigna",
      "name": "exp#: exports.IndexSignatureDeclarationBase = IndexSigna",
      "val": 71
    },
    {
      "id": "exp#: exports.IndexedAccessTypeNode = IndexedAccessTypeN",
      "name": "exp#: exports.IndexedAccessTypeNode = IndexedAccessTypeN",
      "val": 55
    },
    {
      "id": "exp#: exports.InferTypeNode = InferTypeNode;",
      "name": "exp#: exports.InferTypeNode = InferTypeNode;",
      "val": 39
    },
    {
      "id": "exp#: exports.InitializerExpressionGetableNode = Initial",
      "name": "exp#: exports.InitializerExpressionGetableNode = Initial",
      "val": 77
    },
    {
      "id": "exp#: exports.InitializerExpressionableNode = Initialize",
      "name": "exp#: exports.InitializerExpressionableNode = Initialize",
      "val": 71
    },
    {
      "id": "exp#: exports.InterfaceDeclaration = InterfaceDeclaratio",
      "name": "exp#: exports.InterfaceDeclaration = InterfaceDeclaratio",
      "val": 53
    },
    {
      "id": "exp#: exports.InterfaceDeclarationBase = InterfaceDeclar",
      "name": "exp#: exports.InterfaceDeclarationBase = InterfaceDeclar",
      "val": 61
    },
    {
      "id": "exp#: exports.IntersectionTypeNode = IntersectionTypeNod",
      "name": "exp#: exports.IntersectionTypeNode = IntersectionTypeNod",
      "val": 53
    },
    {
      "id": "exp#: exports.InvalidOperationError = InvalidOperationEr",
      "name": "exp#: exports.InvalidOperationError = InvalidOperationEr",
      "val": 55
    },
    {
      "id": "exp#: exports.IterationStatement = IterationStatement;",
      "name": "exp#: exports.IterationStatement = IterationStatement;",
      "val": 49
    },
    {
      "id": "exp#: exports.JSDoc = JSDoc;",
      "name": "exp#: exports.JSDoc = JSDoc;",
      "val": 23
    },
    {
      "id": "exp#: exports.JSDocAugmentsTag = JSDocAugmentsTag;",
      "name": "exp#: exports.JSDocAugmentsTag = JSDocAugmentsTag;",
      "val": 45
    },
    {
      "id": "exp#: exports.JSDocAuthorTag = JSDocAuthorTag;",
      "name": "exp#: exports.JSDocAuthorTag = JSDocAuthorTag;",
      "val": 41
    },
    {
      "id": "exp#: exports.JSDocBase = JSDocBase;",
      "name": "exp#: exports.JSDocBase = JSDocBase;",
      "val": 31
    },
    {
      "id": "exp#: exports.JSDocCallbackTag = JSDocCallbackTag;",
      "name": "exp#: exports.JSDocCallbackTag = JSDocCallbackTag;",
      "val": 45
    },
    {
      "id": "exp#: exports.JSDocClassTag = JSDocClassTag;",
      "name": "exp#: exports.JSDocClassTag = JSDocClassTag;",
      "val": 39
    },
    {
      "id": "exp#: exports.JSDocDeprecatedTag = JSDocDeprecatedTag;",
      "name": "exp#: exports.JSDocDeprecatedTag = JSDocDeprecatedTag;",
      "val": 49
    },
    {
      "id": "exp#: exports.JSDocEnumTag = JSDocEnumTag;",
      "name": "exp#: exports.JSDocEnumTag = JSDocEnumTag;",
      "val": 37
    },
    {
      "id": "exp#: exports.JSDocFunctionType = JSDocFunctionType;",
      "name": "exp#: exports.JSDocFunctionType = JSDocFunctionType;",
      "val": 47
    },
    {
      "id": "exp#: exports.JSDocFunctionTypeBase = JSDocFunctionTypeB",
      "name": "exp#: exports.JSDocFunctionTypeBase = JSDocFunctionTypeB",
      "val": 55
    },
    {
      "id": "exp#: exports.JSDocImplementsTag = JSDocImplementsTag;",
      "name": "exp#: exports.JSDocImplementsTag = JSDocImplementsTag;",
      "val": 49
    },
    {
      "id": "exp#: exports.JSDocParameterTag = JSDocParameterTag;",
      "name": "exp#: exports.JSDocParameterTag = JSDocParameterTag;",
      "val": 47
    },
    {
      "id": "exp#: exports.JSDocParameterTagBase = JSDocParameterTagB",
      "name": "exp#: exports.JSDocParameterTagBase = JSDocParameterTagB",
      "val": 55
    },
    {
      "id": "exp#: exports.JSDocPrivateTag = JSDocPrivateTag;",
      "name": "exp#: exports.JSDocPrivateTag = JSDocPrivateTag;",
      "val": 43
    },
    {
      "id": "exp#: exports.JSDocPropertyLikeTag = JSDocPropertyLikeTa",
      "name": "exp#: exports.JSDocPropertyLikeTag = JSDocPropertyLikeTa",
      "val": 53
    },
    {
      "id": "exp#: exports.JSDocPropertyTag = JSDocPropertyTag;",
      "name": "exp#: exports.JSDocPropertyTag = JSDocPropertyTag;",
      "val": 45
    },
    {
      "id": "exp#: exports.JSDocPropertyTagBase = JSDocPropertyTagBas",
      "name": "exp#: exports.JSDocPropertyTagBase = JSDocPropertyTagBas",
      "val": 53
    },
    {
      "id": "exp#: exports.JSDocProtectedTag = JSDocProtectedTag;",
      "name": "exp#: exports.JSDocProtectedTag = JSDocProtectedTag;",
      "val": 47
    },
    {
      "id": "exp#: exports.JSDocPublicTag = JSDocPublicTag;",
      "name": "exp#: exports.JSDocPublicTag = JSDocPublicTag;",
      "val": 41
    },
    {
      "id": "exp#: exports.JSDocReadonlyTag = JSDocReadonlyTag;",
      "name": "exp#: exports.JSDocReadonlyTag = JSDocReadonlyTag;",
      "val": 45
    },
    {
      "id": "exp#: exports.JSDocReturnTag = JSDocReturnTag;",
      "name": "exp#: exports.JSDocReturnTag = JSDocReturnTag;",
      "val": 41
    },
    {
      "id": "exp#: exports.JSDocReturnTagBase = JSDocReturnTagBase;",
      "name": "exp#: exports.JSDocReturnTagBase = JSDocReturnTagBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.JSDocSeeTag = JSDocSeeTag;",
      "name": "exp#: exports.JSDocSeeTag = JSDocSeeTag;",
      "val": 35
    },
    {
      "id": "exp#: exports.JSDocSeeTagBase = JSDocSeeTagBase;",
      "name": "exp#: exports.JSDocSeeTagBase = JSDocSeeTagBase;",
      "val": 43
    },
    {
      "id": "exp#: exports.JSDocSignature = JSDocSignature;",
      "name": "exp#: exports.JSDocSignature = JSDocSignature;",
      "val": 41
    },
    {
      "id": "exp#: exports.JSDocTag = JSDocTag;",
      "name": "exp#: exports.JSDocTag = JSDocTag;",
      "val": 29
    },
    {
      "id": "exp#: exports.JSDocTagBase = JSDocTagBase;",
      "name": "exp#: exports.JSDocTagBase = JSDocTagBase;",
      "val": 37
    },
    {
      "id": "exp#: exports.JSDocTagInfo = JSDocTagInfo;",
      "name": "exp#: exports.JSDocTagInfo = JSDocTagInfo;",
      "val": 37
    },
    {
      "id": "exp#: exports.JSDocTemplateTag = JSDocTemplateTag;",
      "name": "exp#: exports.JSDocTemplateTag = JSDocTemplateTag;",
      "val": 45
    },
    {
      "id": "exp#: exports.JSDocTemplateTagBase = JSDocTemplateTagBas",
      "name": "exp#: exports.JSDocTemplateTagBase = JSDocTemplateTagBas",
      "val": 53
    },
    {
      "id": "exp#: exports.JSDocThisTag = JSDocThisTag;",
      "name": "exp#: exports.JSDocThisTag = JSDocThisTag;",
      "val": 37
    },
    {
      "id": "exp#: exports.JSDocThisTagBase = JSDocThisTagBase;",
      "name": "exp#: exports.JSDocThisTagBase = JSDocThisTagBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.JSDocType = JSDocType;",
      "name": "exp#: exports.JSDocType = JSDocType;",
      "val": 31
    },
    {
      "id": "exp#: exports.JSDocTypeExpression = JSDocTypeExpression;",
      "name": "exp#: exports.JSDocTypeExpression = JSDocTypeExpression;",
      "val": 51
    },
    {
      "id": "exp#: exports.JSDocTypeExpressionableTag = JSDocTypeExpr",
      "name": "exp#: exports.JSDocTypeExpressionableTag = JSDocTypeExpr",
      "val": 65
    },
    {
      "id": "exp#: exports.JSDocTypeParameteredTag = JSDocTypeParamet",
      "name": "exp#: exports.JSDocTypeParameteredTag = JSDocTypeParamet",
      "val": 59
    },
    {
      "id": "exp#: exports.JSDocTypeTag = JSDocTypeTag;",
      "name": "exp#: exports.JSDocTypeTag = JSDocTypeTag;",
      "val": 37
    },
    {
      "id": "exp#: exports.JSDocTypedefTag = JSDocTypedefTag;",
      "name": "exp#: exports.JSDocTypedefTag = JSDocTypedefTag;",
      "val": 43
    },
    {
      "id": "exp#: exports.JSDocUnknownTag = JSDocUnknownTag;",
      "name": "exp#: exports.JSDocUnknownTag = JSDocUnknownTag;",
      "val": 43
    },
    {
      "id": "exp#: exports.JSDocableNode = JSDocableNode;",
      "name": "exp#: exports.JSDocableNode = JSDocableNode;",
      "val": 39
    },
    {
      "id": "exp#: exports.JsxAttribute = JsxAttribute;",
      "name": "exp#: exports.JsxAttribute = JsxAttribute;",
      "val": 37
    },
    {
      "id": "exp#: exports.JsxAttributeBase = JsxAttributeBase;",
      "name": "exp#: exports.JsxAttributeBase = JsxAttributeBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.JsxAttributedNode = JsxAttributedNode;",
      "name": "exp#: exports.JsxAttributedNode = JsxAttributedNode;",
      "val": 47
    },
    {
      "id": "exp#: exports.JsxClosingElement = JsxClosingElement;",
      "name": "exp#: exports.JsxClosingElement = JsxClosingElement;",
      "val": 47
    },
    {
      "id": "exp#: exports.JsxClosingElementBase = JsxClosingElementB",
      "name": "exp#: exports.JsxClosingElementBase = JsxClosingElementB",
      "val": 55
    },
    {
      "id": "exp#: exports.JsxClosingFragment = JsxClosingFragment;",
      "name": "exp#: exports.JsxClosingFragment = JsxClosingFragment;",
      "val": 49
    },
    {
      "id": "exp#: exports.JsxElement = JsxElement;",
      "name": "exp#: exports.JsxElement = JsxElement;",
      "val": 33
    },
    {
      "id": "exp#: exports.JsxElementBase = JsxElementBase;",
      "name": "exp#: exports.JsxElementBase = JsxElementBase;",
      "val": 41
    },
    {
      "id": "exp#: exports.JsxExpression = JsxExpression;",
      "name": "exp#: exports.JsxExpression = JsxExpression;",
      "val": 39
    },
    {
      "id": "exp#: exports.JsxExpressionBase = JsxExpressionBase;",
      "name": "exp#: exports.JsxExpressionBase = JsxExpressionBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.JsxFragment = JsxFragment;",
      "name": "exp#: exports.JsxFragment = JsxFragment;",
      "val": 35
    },
    {
      "id": "exp#: exports.JsxOpeningElement = JsxOpeningElement;",
      "name": "exp#: exports.JsxOpeningElement = JsxOpeningElement;",
      "val": 47
    },
    {
      "id": "exp#: exports.JsxOpeningElementBase = JsxOpeningElementB",
      "name": "exp#: exports.JsxOpeningElementBase = JsxOpeningElementB",
      "val": 55
    },
    {
      "id": "exp#: exports.JsxOpeningFragment = JsxOpeningFragment;",
      "name": "exp#: exports.JsxOpeningFragment = JsxOpeningFragment;",
      "val": 49
    },
    {
      "id": "exp#: exports.JsxSelfClosingElement = JsxSelfClosingElem",
      "name": "exp#: exports.JsxSelfClosingElement = JsxSelfClosingElem",
      "val": 55
    },
    {
      "id": "exp#: exports.JsxSelfClosingElementBase = JsxSelfClosing",
      "name": "exp#: exports.JsxSelfClosingElementBase = JsxSelfClosing",
      "val": 63
    },
    {
      "id": "exp#: exports.JsxSpreadAttribute = JsxSpreadAttribute;",
      "name": "exp#: exports.JsxSpreadAttribute = JsxSpreadAttribute;",
      "val": 49
    },
    {
      "id": "exp#: exports.JsxSpreadAttributeBase = JsxSpreadAttribut",
      "name": "exp#: exports.JsxSpreadAttributeBase = JsxSpreadAttribut",
      "val": 57
    },
    {
      "id": "exp#: exports.JsxTagNamedNode = JsxTagNamedNode;",
      "name": "exp#: exports.JsxTagNamedNode = JsxTagNamedNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.JsxText = JsxText;",
      "name": "exp#: exports.JsxText = JsxText;",
      "val": 27
    },
    {
      "id": "exp#: exports.JsxTextBase = JsxTextBase;",
      "name": "exp#: exports.JsxTextBase = JsxTextBase;",
      "val": 35
    },
    {
      "id": "exp#: exports.LabeledStatement = LabeledStatement;",
      "name": "exp#: exports.LabeledStatement = LabeledStatement;",
      "val": 45
    },
    {
      "id": "exp#: exports.LabeledStatementBase = LabeledStatementBas",
      "name": "exp#: exports.LabeledStatementBase = LabeledStatementBas",
      "val": 53
    },
    {
      "id": "exp#: exports.LanguageService = LanguageService;",
      "name": "exp#: exports.LanguageService = LanguageService;",
      "val": 43
    },
    {
      "id": "exp#: exports.LeftHandSideExpression = LeftHandSideExpre",
      "name": "exp#: exports.LeftHandSideExpression = LeftHandSideExpre",
      "val": 57
    },
    {
      "id": "exp#: exports.LeftHandSideExpressionedNode = LeftHandSid",
      "name": "exp#: exports.LeftHandSideExpressionedNode = LeftHandSid",
      "val": 69
    },
    {
      "id": "exp#: exports.LiteralExpression = LiteralExpression;",
      "name": "exp#: exports.LiteralExpression = LiteralExpression;",
      "val": 47
    },
    {
      "id": "exp#: exports.LiteralExpressionBase = LiteralExpressionB",
      "name": "exp#: exports.LiteralExpressionBase = LiteralExpressionB",
      "val": 55
    },
    {
      "id": "exp#: exports.LiteralLikeNode = LiteralLikeNode;",
      "name": "exp#: exports.LiteralLikeNode = LiteralLikeNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.LiteralTypeNode = LiteralTypeNode;",
      "name": "exp#: exports.LiteralTypeNode = LiteralTypeNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.ManipulationError = ManipulationError;",
      "name": "exp#: exports.ManipulationError = ManipulationError;",
      "val": 47
    },
    {
      "id": "exp#: exports.ManipulationSettingsContainer = Manipulati",
      "name": "exp#: exports.ManipulationSettingsContainer = Manipulati",
      "val": 71
    },
    {
      "id": "exp#: exports.MemberExpression = MemberExpression;",
      "name": "exp#: exports.MemberExpression = MemberExpression;",
      "val": 45
    },
    {
      "id": "exp#: exports.MemoryEmitResult = MemoryEmitResult;",
      "name": "exp#: exports.MemoryEmitResult = MemoryEmitResult;",
      "val": 45
    },
    {
      "id": "exp#: exports.MetaProperty = MetaProperty;",
      "name": "exp#: exports.MetaProperty = MetaProperty;",
      "val": 37
    },
    {
      "id": "exp#: exports.MetaPropertyBase = MetaPropertyBase;",
      "name": "exp#: exports.MetaPropertyBase = MetaPropertyBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.MethodDeclaration = MethodDeclaration;",
      "name": "exp#: exports.MethodDeclaration = MethodDeclaration;",
      "val": 47
    },
    {
      "id": "exp#: exports.MethodDeclarationBase = MethodDeclarationB",
      "name": "exp#: exports.MethodDeclarationBase = MethodDeclarationB",
      "val": 55
    },
    {
      "id": "exp#: exports.MethodDeclarationOverloadBase = MethodDecl",
      "name": "exp#: exports.MethodDeclarationOverloadBase = MethodDecl",
      "val": 71
    },
    {
      "id": "exp#: exports.MethodSignature = MethodSignature;",
      "name": "exp#: exports.MethodSignature = MethodSignature;",
      "val": 43
    },
    {
      "id": "exp#: exports.MethodSignatureBase = MethodSignatureBase;",
      "name": "exp#: exports.MethodSignatureBase = MethodSignatureBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.ModifierableNode = ModifierableNode;",
      "name": "exp#: exports.ModifierableNode = ModifierableNode;",
      "val": 45
    },
    {
      "id": "exp#: exports.ModuleBlock = ModuleBlock;",
      "name": "exp#: exports.ModuleBlock = ModuleBlock;",
      "val": 35
    },
    {
      "id": "exp#: exports.ModuleBlockBase = ModuleBlockBase;",
      "name": "exp#: exports.ModuleBlockBase = ModuleBlockBase;",
      "val": 43
    },
    {
      "id": "exp#: exports.ModuleChildableNode = ModuleChildableNode;",
      "name": "exp#: exports.ModuleChildableNode = ModuleChildableNode;",
      "val": 51
    },
    {
      "id": "exp#: exports.ModuleDeclaration = ModuleDeclaration;",
      "name": "exp#: exports.ModuleDeclaration = ModuleDeclaration;",
      "val": 47
    },
    {
      "id": "exp#: exports.ModuleDeclarationBase = ModuleDeclarationB",
      "name": "exp#: exports.ModuleDeclarationBase = ModuleDeclarationB",
      "val": 55
    },
    {
      "id": "exp#: exports.ModuleNamedNode = ModuleNamedNode;",
      "name": "exp#: exports.ModuleNamedNode = ModuleNamedNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.ModuledNode = ModuledNode;",
      "name": "exp#: exports.ModuledNode = ModuledNode;",
      "val": 35
    },
    {
      "id": "exp#: exports.NameableNode = NameableNode;",
      "name": "exp#: exports.NameableNode = NameableNode;",
      "val": 37
    },
    {
      "id": "exp#: exports.NamedExports = NamedExports;",
      "name": "exp#: exports.NamedExports = NamedExports;",
      "val": 37
    },
    {
      "id": "exp#: exports.NamedExportsBase = NamedExportsBase;",
      "name": "exp#: exports.NamedExportsBase = NamedExportsBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.NamedImports = NamedImports;",
      "name": "exp#: exports.NamedImports = NamedImports;",
      "val": 37
    },
    {
      "id": "exp#: exports.NamedImportsBase = NamedImportsBase;",
      "name": "exp#: exports.NamedImportsBase = NamedImportsBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.NamedNode = NamedNode;",
      "name": "exp#: exports.NamedNode = NamedNode;",
      "val": 31
    },
    {
      "id": "exp#: exports.NamedNodeBase = NamedNodeBase;",
      "name": "exp#: exports.NamedNodeBase = NamedNodeBase;",
      "val": 39
    },
    {
      "id": "exp#: exports.NamedTupleMember = NamedTupleMember;",
      "name": "exp#: exports.NamedTupleMember = NamedTupleMember;",
      "val": 45
    },
    {
      "id": "exp#: exports.NamedTupleMemberBase = NamedTupleMemberBas",
      "name": "exp#: exports.NamedTupleMemberBase = NamedTupleMemberBas",
      "val": 53
    },
    {
      "id": "exp#: exports.NamespaceExport = NamespaceExport;",
      "name": "exp#: exports.NamespaceExport = NamespaceExport;",
      "val": 43
    },
    {
      "id": "exp#: exports.NamespaceExportBase = NamespaceExportBase;",
      "name": "exp#: exports.NamespaceExportBase = NamespaceExportBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.NamespaceImport = NamespaceImport;",
      "name": "exp#: exports.NamespaceImport = NamespaceImport;",
      "val": 43
    },
    {
      "id": "exp#: exports.NamespaceImportBase = NamespaceImportBase;",
      "name": "exp#: exports.NamespaceImportBase = NamespaceImportBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.NewExpression = NewExpression;",
      "name": "exp#: exports.NewExpression = NewExpression;",
      "val": 39
    },
    {
      "id": "exp#: exports.NewExpressionBase = NewExpressionBase;",
      "name": "exp#: exports.NewExpressionBase = NewExpressionBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.NoSubstitutionTemplateLiteral = NoSubstitu",
      "name": "exp#: exports.NoSubstitutionTemplateLiteral = NoSubstitu",
      "val": 71
    },
    {
      "id": "exp#: exports.NoSubstitutionTemplateLiteralBase = NoSubs",
      "name": "exp#: exports.NoSubstitutionTemplateLiteralBase = NoSubs",
      "val": 79
    },
    {
      "id": "exp#: exports.Node = Node;",
      "name": "exp#: exports.Node = Node;",
      "val": 21
    },
    {
      "id": "exp#: exports.NonNullExpression = NonNullExpression;",
      "name": "exp#: exports.NonNullExpression = NonNullExpression;",
      "val": 47
    },
    {
      "id": "exp#: exports.NonNullExpressionBase = NonNullExpressionB",
      "name": "exp#: exports.NonNullExpressionBase = NonNullExpressionB",
      "val": 55
    },
    {
      "id": "exp#: exports.NotEmittedStatement = NotEmittedStatement;",
      "name": "exp#: exports.NotEmittedStatement = NotEmittedStatement;",
      "val": 51
    },
    {
      "id": "exp#: exports.NotEmittedStatementBase = NotEmittedStatem",
      "name": "exp#: exports.NotEmittedStatementBase = NotEmittedStatem",
      "val": 59
    },
    {
      "id": "exp#: exports.NotImplementedError = NotImplementedError;",
      "name": "exp#: exports.NotImplementedError = NotImplementedError;",
      "val": 51
    },
    {
      "id": "exp#: exports.NotSupportedError = NotSupportedError;",
      "name": "exp#: exports.NotSupportedError = NotSupportedError;",
      "val": 47
    },
    {
      "id": "exp#: exports.NullLiteral = NullLiteral;",
      "name": "exp#: exports.NullLiteral = NullLiteral;",
      "val": 35
    },
    {
      "id": "exp#: exports.NullLiteralBase = NullLiteralBase;",
      "name": "exp#: exports.NullLiteralBase = NullLiteralBase;",
      "val": 43
    },
    {
      "id": "exp#: exports.NumericLiteral = NumericLiteral;",
      "name": "exp#: exports.NumericLiteral = NumericLiteral;",
      "val": 41
    },
    {
      "id": "exp#: exports.NumericLiteralBase = NumericLiteralBase;",
      "name": "exp#: exports.NumericLiteralBase = NumericLiteralBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.ObjectBindingPattern = ObjectBindingPatter",
      "name": "exp#: exports.ObjectBindingPattern = ObjectBindingPatter",
      "val": 53
    },
    {
      "id": "exp#: exports.ObjectDestructuringAssignment = ObjectDest",
      "name": "exp#: exports.ObjectDestructuringAssignment = ObjectDest",
      "val": 71
    },
    {
      "id": "exp#: exports.ObjectDestructuringAssignmentBase = Object",
      "name": "exp#: exports.ObjectDestructuringAssignmentBase = Object",
      "val": 79
    },
    {
      "id": "exp#: exports.ObjectLiteralElement = ObjectLiteralElemen",
      "name": "exp#: exports.ObjectLiteralElement = ObjectLiteralElemen",
      "val": 53
    },
    {
      "id": "exp#: exports.ObjectLiteralExpression = ObjectLiteralExp",
      "name": "exp#: exports.ObjectLiteralExpression = ObjectLiteralExp",
      "val": 59
    },
    {
      "id": "exp#: exports.ObjectLiteralExpressionBase = ObjectLitera",
      "name": "exp#: exports.ObjectLiteralExpressionBase = ObjectLitera",
      "val": 67
    },
    {
      "id": "exp#: exports.OmittedExpression = OmittedExpression;",
      "name": "exp#: exports.OmittedExpression = OmittedExpression;",
      "val": 47
    },
    {
      "id": "exp#: exports.OmittedExpressionBase = OmittedExpressionB",
      "name": "exp#: exports.OmittedExpressionBase = OmittedExpressionB",
      "val": 55
    },
    {
      "id": "exp#: exports.OutputFile = OutputFile;",
      "name": "exp#: exports.OutputFile = OutputFile;",
      "val": 33
    },
    {
      "id": "exp#: exports.OverloadableNode = OverloadableNode;",
      "name": "exp#: exports.OverloadableNode = OverloadableNode;",
      "val": 45
    },
    {
      "id": "exp#: exports.ParameterDeclaration = ParameterDeclaratio",
      "name": "exp#: exports.ParameterDeclaration = ParameterDeclaratio",
      "val": 53
    },
    {
      "id": "exp#: exports.ParameterDeclarationBase = ParameterDeclar",
      "name": "exp#: exports.ParameterDeclarationBase = ParameterDeclar",
      "val": 61
    },
    {
      "id": "exp#: exports.ParameteredNode = ParameteredNode;",
      "name": "exp#: exports.ParameteredNode = ParameteredNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.ParenthesizedExpression = ParenthesizedExp",
      "name": "exp#: exports.ParenthesizedExpression = ParenthesizedExp",
      "val": 59
    },
    {
      "id": "exp#: exports.ParenthesizedExpressionBase = Parenthesize",
      "name": "exp#: exports.ParenthesizedExpressionBase = Parenthesize",
      "val": 67
    },
    {
      "id": "exp#: exports.ParenthesizedTypeNode = ParenthesizedTypeN",
      "name": "exp#: exports.ParenthesizedTypeNode = ParenthesizedTypeN",
      "val": 55
    },
    {
      "id": "exp#: exports.PartiallyEmittedExpression = PartiallyEmit",
      "name": "exp#: exports.PartiallyEmittedExpression = PartiallyEmit",
      "val": 65
    },
    {
      "id": "exp#: exports.PartiallyEmittedExpressionBase = Partially",
      "name": "exp#: exports.PartiallyEmittedExpressionBase = Partially",
      "val": 73
    },
    {
      "id": "exp#: exports.PathNotFoundError = PathNotFoundError;",
      "name": "exp#: exports.PathNotFoundError = PathNotFoundError;",
      "val": 47
    },
    {
      "id": "exp#: exports.PostfixUnaryExpression = PostfixUnaryExpre",
      "name": "exp#: exports.PostfixUnaryExpression = PostfixUnaryExpre",
      "val": 57
    },
    {
      "id": "exp#: exports.PostfixUnaryExpressionBase = PostfixUnaryE",
      "name": "exp#: exports.PostfixUnaryExpressionBase = PostfixUnaryE",
      "val": 65
    },
    {
      "id": "exp#: exports.PrefixUnaryExpression = PrefixUnaryExpress",
      "name": "exp#: exports.PrefixUnaryExpression = PrefixUnaryExpress",
      "val": 55
    },
    {
      "id": "exp#: exports.PrefixUnaryExpressionBase = PrefixUnaryExp",
      "name": "exp#: exports.PrefixUnaryExpressionBase = PrefixUnaryExp",
      "val": 63
    },
    {
      "id": "exp#: exports.PrimaryExpression = PrimaryExpression;",
      "name": "exp#: exports.PrimaryExpression = PrimaryExpression;",
      "val": 47
    },
    {
      "id": "exp#: exports.PrivateIdentifier = PrivateIdentifier;",
      "name": "exp#: exports.PrivateIdentifier = PrivateIdentifier;",
      "val": 47
    },
    {
      "id": "exp#: exports.PrivateIdentifierBase = PrivateIdentifierB",
      "name": "exp#: exports.PrivateIdentifierBase = PrivateIdentifierB",
      "val": 55
    },
    {
      "id": "exp#: exports.Program = Program;",
      "name": "exp#: exports.Program = Program;",
      "val": 27
    },
    {
      "id": "exp#: exports.Project = Project;",
      "name": "exp#: exports.Project = Project;",
      "val": 27
    },
    {
      "id": "exp#: exports.PropertyAccessExpression = PropertyAccessE",
      "name": "exp#: exports.PropertyAccessExpression = PropertyAccessE",
      "val": 61
    },
    {
      "id": "exp#: exports.PropertyAccessExpressionBase = PropertyAcc",
      "name": "exp#: exports.PropertyAccessExpressionBase = PropertyAcc",
      "val": 69
    },
    {
      "id": "exp#: exports.PropertyAssignment = PropertyAssignment;",
      "name": "exp#: exports.PropertyAssignment = PropertyAssignment;",
      "val": 49
    },
    {
      "id": "exp#: exports.PropertyAssignmentBase = PropertyAssignmen",
      "name": "exp#: exports.PropertyAssignmentBase = PropertyAssignmen",
      "val": 57
    },
    {
      "id": "exp#: exports.PropertyDeclaration = PropertyDeclaration;",
      "name": "exp#: exports.PropertyDeclaration = PropertyDeclaration;",
      "val": 51
    },
    {
      "id": "exp#: exports.PropertyDeclarationBase = PropertyDeclarat",
      "name": "exp#: exports.PropertyDeclarationBase = PropertyDeclarat",
      "val": 59
    },
    {
      "id": "exp#: exports.PropertyNamedNode = PropertyNamedNode;",
      "name": "exp#: exports.PropertyNamedNode = PropertyNamedNode;",
      "val": 47
    },
    {
      "id": "exp#: exports.PropertySignature = PropertySignature;",
      "name": "exp#: exports.PropertySignature = PropertySignature;",
      "val": 47
    },
    {
      "id": "exp#: exports.PropertySignatureBase = PropertySignatureB",
      "name": "exp#: exports.PropertySignatureBase = PropertySignatureB",
      "val": 55
    },
    {
      "id": "exp#: exports.QualifiedName = QualifiedName;",
      "name": "exp#: exports.QualifiedName = QualifiedName;",
      "val": 39
    },
    {
      "id": "exp#: exports.QuestionDotTokenableNode = QuestionDotToke",
      "name": "exp#: exports.QuestionDotTokenableNode = QuestionDotToke",
      "val": 61
    },
    {
      "id": "exp#: exports.QuestionTokenableNode = QuestionTokenableN",
      "name": "exp#: exports.QuestionTokenableNode = QuestionTokenableN",
      "val": 55
    },
    {
      "id": "exp#: exports.ReadonlyableNode = ReadonlyableNode;",
      "name": "exp#: exports.ReadonlyableNode = ReadonlyableNode;",
      "val": 45
    },
    {
      "id": "exp#: exports.RefactorEditInfo = RefactorEditInfo;",
      "name": "exp#: exports.RefactorEditInfo = RefactorEditInfo;",
      "val": 45
    },
    {
      "id": "exp#: exports.ReferenceEntry = ReferenceEntry;",
      "name": "exp#: exports.ReferenceEntry = ReferenceEntry;",
      "val": 41
    },
    {
      "id": "exp#: exports.ReferenceFindableNode = ReferenceFindableN",
      "name": "exp#: exports.ReferenceFindableNode = ReferenceFindableN",
      "val": 55
    },
    {
      "id": "exp#: exports.ReferencedSymbol = ReferencedSymbol;",
      "name": "exp#: exports.ReferencedSymbol = ReferencedSymbol;",
      "val": 45
    },
    {
      "id": "exp#: exports.ReferencedSymbolDefinitionInfo = Reference",
      "name": "exp#: exports.ReferencedSymbolDefinitionInfo = Reference",
      "val": 73
    },
    {
      "id": "exp#: exports.RegularExpressionLiteral = RegularExpressi",
      "name": "exp#: exports.RegularExpressionLiteral = RegularExpressi",
      "val": 61
    },
    {
      "id": "exp#: exports.RegularExpressionLiteralBase = RegularExpr",
      "name": "exp#: exports.RegularExpressionLiteralBase = RegularExpr",
      "val": 69
    },
    {
      "id": "exp#: exports.RenameLocation = RenameLocation;",
      "name": "exp#: exports.RenameLocation = RenameLocation;",
      "val": 41
    },
    {
      "id": "exp#: exports.RenameableNode = RenameableNode;",
      "name": "exp#: exports.RenameableNode = RenameableNode;",
      "val": 41
    },
    {
      "id": "exp#: exports.ReturnStatement = ReturnStatement;",
      "name": "exp#: exports.ReturnStatement = ReturnStatement;",
      "val": 43
    },
    {
      "id": "exp#: exports.ReturnStatementBase = ReturnStatementBase;",
      "name": "exp#: exports.ReturnStatementBase = ReturnStatementBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.ReturnTypedNode = ReturnTypedNode;",
      "name": "exp#: exports.ReturnTypedNode = ReturnTypedNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.ScopeableNode = ScopeableNode;",
      "name": "exp#: exports.ScopeableNode = ScopeableNode;",
      "val": 39
    },
    {
      "id": "exp#: exports.ScopedNode = ScopedNode;",
      "name": "exp#: exports.ScopedNode = ScopedNode;",
      "val": 33
    },
    {
      "id": "exp#: exports.SetAccessorDeclaration = SetAccessorDeclar",
      "name": "exp#: exports.SetAccessorDeclaration = SetAccessorDeclar",
      "val": 57
    },
    {
      "id": "exp#: exports.SetAccessorDeclarationBase = SetAccessorDe",
      "name": "exp#: exports.SetAccessorDeclarationBase = SetAccessorDe",
      "val": 65
    },
    {
      "id": "exp#: exports.ShorthandPropertyAssignment = ShorthandPro",
      "name": "exp#: exports.ShorthandPropertyAssignment = ShorthandPro",
      "val": 67
    },
    {
      "id": "exp#: exports.ShorthandPropertyAssignmentBase = Shorthan",
      "name": "exp#: exports.ShorthandPropertyAssignmentBase = Shorthan",
      "val": 75
    },
    {
      "id": "exp#: exports.Signature = Signature;",
      "name": "exp#: exports.Signature = Signature;",
      "val": 31
    },
    {
      "id": "exp#: exports.SignaturedDeclaration = SignaturedDeclarat",
      "name": "exp#: exports.SignaturedDeclaration = SignaturedDeclarat",
      "val": 55
    },
    {
      "id": "exp#: exports.SourceFile = SourceFile;",
      "name": "exp#: exports.SourceFile = SourceFile;",
      "val": 33
    },
    {
      "id": "exp#: exports.SourceFileBase = SourceFileBase;",
      "name": "exp#: exports.SourceFileBase = SourceFileBase;",
      "val": 41
    },
    {
      "id": "exp#: exports.SpreadAssignment = SpreadAssignment;",
      "name": "exp#: exports.SpreadAssignment = SpreadAssignment;",
      "val": 45
    },
    {
      "id": "exp#: exports.SpreadAssignmentBase = SpreadAssignmentBas",
      "name": "exp#: exports.SpreadAssignmentBase = SpreadAssignmentBas",
      "val": 53
    },
    {
      "id": "exp#: exports.SpreadElement = SpreadElement;",
      "name": "exp#: exports.SpreadElement = SpreadElement;",
      "val": 39
    },
    {
      "id": "exp#: exports.SpreadElementBase = SpreadElementBase;",
      "name": "exp#: exports.SpreadElementBase = SpreadElementBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.Statement = Statement;",
      "name": "exp#: exports.Statement = Statement;",
      "val": 31
    },
    {
      "id": "exp#: exports.StatementBase = StatementBase;",
      "name": "exp#: exports.StatementBase = StatementBase;",
      "val": 39
    },
    {
      "id": "exp#: exports.StatementedNode = StatementedNode;",
      "name": "exp#: exports.StatementedNode = StatementedNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.StaticableNode = StaticableNode;",
      "name": "exp#: exports.StaticableNode = StaticableNode;",
      "val": 41
    },
    {
      "id": "exp#: exports.StringLiteral = StringLiteral;",
      "name": "exp#: exports.StringLiteral = StringLiteral;",
      "val": 39
    },
    {
      "id": "exp#: exports.StringLiteralBase = StringLiteralBase;",
      "name": "exp#: exports.StringLiteralBase = StringLiteralBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.Structure = Structure;",
      "name": "exp#: exports.Structure = Structure;",
      "val": 31
    },
    {
      "id": "exp#: exports.SuperElementAccessExpression = SuperElemen",
      "name": "exp#: exports.SuperElementAccessExpression = SuperElemen",
      "val": 69
    },
    {
      "id": "exp#: exports.SuperElementAccessExpressionBase = SuperEl",
      "name": "exp#: exports.SuperElementAccessExpressionBase = SuperEl",
      "val": 77
    },
    {
      "id": "exp#: exports.SuperExpression = SuperExpression;",
      "name": "exp#: exports.SuperExpression = SuperExpression;",
      "val": 43
    },
    {
      "id": "exp#: exports.SuperExpressionBase = SuperExpressionBase;",
      "name": "exp#: exports.SuperExpressionBase = SuperExpressionBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.SuperExpressionedNode = SuperExpressionedN",
      "name": "exp#: exports.SuperExpressionedNode = SuperExpressionedN",
      "val": 55
    },
    {
      "id": "exp#: exports.SuperPropertyAccessExpression = SuperPrope",
      "name": "exp#: exports.SuperPropertyAccessExpression = SuperPrope",
      "val": 71
    },
    {
      "id": "exp#: exports.SuperPropertyAccessExpressionBase = SuperP",
      "name": "exp#: exports.SuperPropertyAccessExpressionBase = SuperP",
      "val": 79
    },
    {
      "id": "exp#: exports.SwitchStatement = SwitchStatement;",
      "name": "exp#: exports.SwitchStatement = SwitchStatement;",
      "val": 43
    },
    {
      "id": "exp#: exports.SwitchStatementBase = SwitchStatementBase;",
      "name": "exp#: exports.SwitchStatementBase = SwitchStatementBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.Symbol = Symbol;",
      "name": "exp#: exports.Symbol = Symbol;",
      "val": 25
    },
    {
      "id": "exp#: exports.SymbolDisplayPart = SymbolDisplayPart;",
      "name": "exp#: exports.SymbolDisplayPart = SymbolDisplayPart;",
      "val": 47
    },
    {
      "id": "exp#: exports.SyntaxList = SyntaxList;",
      "name": "exp#: exports.SyntaxList = SyntaxList;",
      "val": 33
    },
    {
      "id": "exp#: exports.TaggedTemplateExpression = TaggedTemplateE",
      "name": "exp#: exports.TaggedTemplateExpression = TaggedTemplateE",
      "val": 61
    },
    {
      "id": "exp#: exports.TemplateExpression = TemplateExpression;",
      "name": "exp#: exports.TemplateExpression = TemplateExpression;",
      "val": 49
    },
    {
      "id": "exp#: exports.TemplateExpressionBase = TemplateExpressio",
      "name": "exp#: exports.TemplateExpressionBase = TemplateExpressio",
      "val": 57
    },
    {
      "id": "exp#: exports.TemplateHead = TemplateHead;",
      "name": "exp#: exports.TemplateHead = TemplateHead;",
      "val": 37
    },
    {
      "id": "exp#: exports.TemplateHeadBase = TemplateHeadBase;",
      "name": "exp#: exports.TemplateHeadBase = TemplateHeadBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.TemplateLiteralTypeNode = TemplateLiteralT",
      "name": "exp#: exports.TemplateLiteralTypeNode = TemplateLiteralT",
      "val": 59
    },
    {
      "id": "exp#: exports.TemplateMiddle = TemplateMiddle;",
      "name": "exp#: exports.TemplateMiddle = TemplateMiddle;",
      "val": 41
    },
    {
      "id": "exp#: exports.TemplateMiddleBase = TemplateMiddleBase;",
      "name": "exp#: exports.TemplateMiddleBase = TemplateMiddleBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.TemplateSpan = TemplateSpan;",
      "name": "exp#: exports.TemplateSpan = TemplateSpan;",
      "val": 37
    },
    {
      "id": "exp#: exports.TemplateSpanBase = TemplateSpanBase;",
      "name": "exp#: exports.TemplateSpanBase = TemplateSpanBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.TemplateTail = TemplateTail;",
      "name": "exp#: exports.TemplateTail = TemplateTail;",
      "val": 37
    },
    {
      "id": "exp#: exports.TemplateTailBase = TemplateTailBase;",
      "name": "exp#: exports.TemplateTailBase = TemplateTailBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.TextChange = TextChange;",
      "name": "exp#: exports.TextChange = TextChange;",
      "val": 33
    },
    {
      "id": "exp#: exports.TextInsertableNode = TextInsertableNode;",
      "name": "exp#: exports.TextInsertableNode = TextInsertableNode;",
      "val": 49
    },
    {
      "id": "exp#: exports.TextRange = TextRange;",
      "name": "exp#: exports.TextRange = TextRange;",
      "val": 31
    },
    {
      "id": "exp#: exports.TextSpan = TextSpan;",
      "name": "exp#: exports.TextSpan = TextSpan;",
      "val": 29
    },
    {
      "id": "exp#: exports.ThisExpression = ThisExpression;",
      "name": "exp#: exports.ThisExpression = ThisExpression;",
      "val": 41
    },
    {
      "id": "exp#: exports.ThisExpressionBase = ThisExpressionBase;",
      "name": "exp#: exports.ThisExpressionBase = ThisExpressionBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.ThisTypeNode = ThisTypeNode;",
      "name": "exp#: exports.ThisTypeNode = ThisTypeNode;",
      "val": 37
    },
    {
      "id": "exp#: exports.ThrowStatement = ThrowStatement;",
      "name": "exp#: exports.ThrowStatement = ThrowStatement;",
      "val": 41
    },
    {
      "id": "exp#: exports.ThrowStatementBase = ThrowStatementBase;",
      "name": "exp#: exports.ThrowStatementBase = ThrowStatementBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.TrueLiteral = TrueLiteral;",
      "name": "exp#: exports.TrueLiteral = TrueLiteral;",
      "val": 35
    },
    {
      "id": "exp#: exports.TrueLiteralBase = TrueLiteralBase;",
      "name": "exp#: exports.TrueLiteralBase = TrueLiteralBase;",
      "val": 43
    },
    {
      "id": "exp#: exports.TryStatement = TryStatement;",
      "name": "exp#: exports.TryStatement = TryStatement;",
      "val": 37
    },
    {
      "id": "exp#: exports.TryStatementBase = TryStatementBase;",
      "name": "exp#: exports.TryStatementBase = TryStatementBase;",
      "val": 45
    },
    {
      "id": "exp#: exports.TupleTypeNode = TupleTypeNode;",
      "name": "exp#: exports.TupleTypeNode = TupleTypeNode;",
      "val": 39
    },
    {
      "id": "exp#: exports.Type = Type;",
      "name": "exp#: exports.Type = Type;",
      "val": 21
    },
    {
      "id": "exp#: exports.TypeAliasDeclaration = TypeAliasDeclaratio",
      "name": "exp#: exports.TypeAliasDeclaration = TypeAliasDeclaratio",
      "val": 53
    },
    {
      "id": "exp#: exports.TypeAliasDeclarationBase = TypeAliasDeclar",
      "name": "exp#: exports.TypeAliasDeclarationBase = TypeAliasDeclar",
      "val": 61
    },
    {
      "id": "exp#: exports.TypeArgumentedNode = TypeArgumentedNode;",
      "name": "exp#: exports.TypeArgumentedNode = TypeArgumentedNode;",
      "val": 49
    },
    {
      "id": "exp#: exports.TypeAssertion = TypeAssertion;",
      "name": "exp#: exports.TypeAssertion = TypeAssertion;",
      "val": 39
    },
    {
      "id": "exp#: exports.TypeAssertionBase = TypeAssertionBase;",
      "name": "exp#: exports.TypeAssertionBase = TypeAssertionBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.TypeChecker = TypeChecker;",
      "name": "exp#: exports.TypeChecker = TypeChecker;",
      "val": 35
    },
    {
      "id": "exp#: exports.TypeElement = TypeElement;",
      "name": "exp#: exports.TypeElement = TypeElement;",
      "val": 35
    },
    {
      "id": "exp#: exports.TypeElementMemberedNode = TypeElementMembe",
      "name": "exp#: exports.TypeElementMemberedNode = TypeElementMembe",
      "val": 59
    },
    {
      "id": "exp#: exports.TypeGuards = TypeGuards;",
      "name": "exp#: exports.TypeGuards = TypeGuards;",
      "val": 33
    },
    {
      "id": "exp#: exports.TypeLiteralNode = TypeLiteralNode;",
      "name": "exp#: exports.TypeLiteralNode = TypeLiteralNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.TypeLiteralNodeBase = TypeLiteralNodeBase;",
      "name": "exp#: exports.TypeLiteralNodeBase = TypeLiteralNodeBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.TypeNode = TypeNode;",
      "name": "exp#: exports.TypeNode = TypeNode;",
      "val": 29
    },
    {
      "id": "exp#: exports.TypeOfExpression = TypeOfExpression;",
      "name": "exp#: exports.TypeOfExpression = TypeOfExpression;",
      "val": 45
    },
    {
      "id": "exp#: exports.TypeOfExpressionBase = TypeOfExpressionBas",
      "name": "exp#: exports.TypeOfExpressionBase = TypeOfExpressionBas",
      "val": 53
    },
    {
      "id": "exp#: exports.TypeParameter = TypeParameter;",
      "name": "exp#: exports.TypeParameter = TypeParameter;",
      "val": 39
    },
    {
      "id": "exp#: exports.TypeParameterDeclaration = TypeParameterDe",
      "name": "exp#: exports.TypeParameterDeclaration = TypeParameterDe",
      "val": 61
    },
    {
      "id": "exp#: exports.TypeParameterDeclarationBase = TypeParamet",
      "name": "exp#: exports.TypeParameterDeclarationBase = TypeParamet",
      "val": 69
    },
    {
      "id": "exp#: exports.TypeParameteredNode = TypeParameteredNode;",
      "name": "exp#: exports.TypeParameteredNode = TypeParameteredNode;",
      "val": 51
    },
    {
      "id": "exp#: exports.TypePredicateNode = TypePredicateNode;",
      "name": "exp#: exports.TypePredicateNode = TypePredicateNode;",
      "val": 47
    },
    {
      "id": "exp#: exports.TypeReferenceNode = TypeReferenceNode;",
      "name": "exp#: exports.TypeReferenceNode = TypeReferenceNode;",
      "val": 47
    },
    {
      "id": "exp#: exports.TypedNode = TypedNode;",
      "name": "exp#: exports.TypedNode = TypedNode;",
      "val": 31
    },
    {
      "id": "exp#: exports.UnaryExpression = UnaryExpression;",
      "name": "exp#: exports.UnaryExpression = UnaryExpression;",
      "val": 43
    },
    {
      "id": "exp#: exports.UnaryExpressionedNode = UnaryExpressionedN",
      "name": "exp#: exports.UnaryExpressionedNode = UnaryExpressionedN",
      "val": 55
    },
    {
      "id": "exp#: exports.UnionTypeNode = UnionTypeNode;",
      "name": "exp#: exports.UnionTypeNode = UnionTypeNode;",
      "val": 39
    },
    {
      "id": "exp#: exports.UnwrappableNode = UnwrappableNode;",
      "name": "exp#: exports.UnwrappableNode = UnwrappableNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.UpdateExpression = UpdateExpression;",
      "name": "exp#: exports.UpdateExpression = UpdateExpression;",
      "val": 45
    },
    {
      "id": "exp#: exports.VariableDeclaration = VariableDeclaration;",
      "name": "exp#: exports.VariableDeclaration = VariableDeclaration;",
      "val": 51
    },
    {
      "id": "exp#: exports.VariableDeclarationBase = VariableDeclarat",
      "name": "exp#: exports.VariableDeclarationBase = VariableDeclarat",
      "val": 59
    },
    {
      "id": "exp#: exports.VariableDeclarationList = VariableDeclarat",
      "name": "exp#: exports.VariableDeclarationList = VariableDeclarat",
      "val": 59
    },
    {
      "id": "exp#: exports.VariableDeclarationListBase = VariableDecl",
      "name": "exp#: exports.VariableDeclarationListBase = VariableDecl",
      "val": 67
    },
    {
      "id": "exp#: exports.VariableStatement = VariableStatement;",
      "name": "exp#: exports.VariableStatement = VariableStatement;",
      "val": 47
    },
    {
      "id": "exp#: exports.VariableStatementBase = VariableStatementB",
      "name": "exp#: exports.VariableStatementBase = VariableStatementB",
      "val": 55
    },
    {
      "id": "exp#: exports.VoidExpression = VoidExpression;",
      "name": "exp#: exports.VoidExpression = VoidExpression;",
      "val": 41
    },
    {
      "id": "exp#: exports.VoidExpressionBase = VoidExpressionBase;",
      "name": "exp#: exports.VoidExpressionBase = VoidExpressionBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.WhileStatement = WhileStatement;",
      "name": "exp#: exports.WhileStatement = WhileStatement;",
      "val": 41
    },
    {
      "id": "exp#: exports.WhileStatementBase = WhileStatementBase;",
      "name": "exp#: exports.WhileStatementBase = WhileStatementBase;",
      "val": 49
    },
    {
      "id": "exp#: exports.WithStatement = WithStatement;",
      "name": "exp#: exports.WithStatement = WithStatement;",
      "val": 39
    },
    {
      "id": "exp#: exports.WithStatementBase = WithStatementBase;",
      "name": "exp#: exports.WithStatementBase = WithStatementBase;",
      "val": 47
    },
    {
      "id": "exp#: exports.WriterFunctions = WriterFunctions;",
      "name": "exp#: exports.WriterFunctions = WriterFunctions;",
      "val": 43
    },
    {
      "id": "exp#: exports.Writers = Writers;",
      "name": "exp#: exports.Writers = Writers;",
      "val": 27
    },
    {
      "id": "exp#: exports.YieldExpression = YieldExpression;",
      "name": "exp#: exports.YieldExpression = YieldExpression;",
      "val": 43
    },
    {
      "id": "exp#: exports.YieldExpressionBase = YieldExpressionBase;",
      "name": "exp#: exports.YieldExpressionBase = YieldExpressionBase;",
      "val": 51
    },
    {
      "id": "exp#: exports.createWrappedNode = createWrappedNode;",
      "name": "exp#: exports.createWrappedNode = createWrappedNode;",
      "val": 47
    },
    {
      "id": "exp#: exports.forEachStructureChild = forEachStructureCh",
      "name": "exp#: exports.forEachStructureChild = forEachStructureCh",
      "val": 55
    },
    {
      "id": "exp#: exports.getCompilerOptionsFromTsConfig = getCompil",
      "name": "exp#: exports.getCompilerOptionsFromTsConfig = getCompil",
      "val": 73
    },
    {
      "id": "exp#: exports.getScopeForNode = getScopeForNode;",
      "name": "exp#: exports.getScopeForNode = getScopeForNode;",
      "val": 43
    },
    {
      "id": "exp#: exports.insertOverloads = insertOverloads;",
      "name": "exp#: exports.insertOverloads = insertOverloads;",
      "val": 43
    },
    {
      "id": "exp#: exports.printNode = printNode;",
      "name": "exp#: exports.printNode = printNode;",
      "val": 31
    },
    {
      "id": "exp#: exports.setScopeForNode = setScopeForNode;",
      "name": "exp#: exports.setScopeForNode = setScopeForNode;",
      "val": 43
    }
  ],
  "links": [
    {
      "source": "AdvancedIterator",
      "target": "common"
    },
    {
      "source": "AdvancedIterator",
      "target": "common"
    },
    {
      "source": "AdvancedIterator",
      "target": "common"
    },
    {
      "source": "AdvancedIterator",
      "target": "common"
    },
    {
      "source": "getParentSyntaxList",
      "target": "common"
    },
    {
      "source": "getParentSyntaxList",
      "target": "common"
    },
    {
      "source": "checkNodeIsAmbient",
      "target": "common"
    },
    {
      "source": "checkNodeIsAmbient",
      "target": "common"
    },
    {
      "source": "isStringKind",
      "target": "common"
    },
    {
      "source": "isStringKind",
      "target": "common"
    },
    {
      "source": "isStringKind",
      "target": "common"
    },
    {
      "source": "isStringKind",
      "target": "common"
    },
    {
      "source": "isStringKind",
      "target": "common"
    },
    {
      "source": "ModuleUtils",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "printNode",
      "target": "common"
    },
    {
      "source": "ManipulationSettingsContainer",
      "target": "common"
    },
    {
      "source": "ManipulationSettingsContainer",
      "target": "common"
    },
    {
      "source": "ManipulationSettingsContainer",
      "target": "common"
    },
    {
      "source": "fillDefaultEditorSettings",
      "target": "common"
    },
    {
      "source": "newLineKindToString",
      "target": "common"
    },
    {
      "source": "newLineKindToString",
      "target": "common"
    },
    {
      "source": "newLineKindToString",
      "target": "common"
    },
    {
      "source": "SourceFileReferenceContainer",
      "target": "common"
    },
    {
      "source": "SourceFileReferenceContainer",
      "target": "common"
    },
    {
      "source": "getCompilerOptionsFromTsConfig",
      "target": "common"
    },
    {
      "source": "common()",
      "target": "common"
    },
    {
      "source": "callBaseGetStructure",
      "target": "common"
    },
    {
      "source": "AmbientableNode",
      "target": "common"
    },
    {
      "source": "AmbientableNode",
      "target": "common"
    },
    {
      "source": "getFormattingKindText",
      "target": "common"
    },
    {
      "source": "scanner",
      "target": "common"
    },
    {
      "source": "scanner",
      "target": "common"
    },
    {
      "source": "getAppendCommaPos",
      "target": "common"
    },
    {
      "source": "getAppendCommaPos",
      "target": "common"
    },
    {
      "source": "isNotWhitespace",
      "target": "common"
    },
    {
      "source": "getInsertPosFromIndex",
      "target": "common"
    },
    {
      "source": "getInsertPosFromIndex",
      "target": "common"
    },
    {
      "source": "getEndPosFromIndex",
      "target": "common"
    },
    {
      "source": "getParentContainerOrThrow",
      "target": "common"
    },
    {
      "source": "getRangeWithoutCommentsFromArray",
      "target": "common"
    },
    {
      "source": "getRangeWithoutCommentsFromArray",
      "target": "common"
    },
    {
      "source": "getRangeWithoutCommentsFromArray",
      "target": "common"
    },
    {
      "source": "getRangeWithoutCommentsFromArray",
      "target": "common"
    },
    {
      "source": "getRangeWithoutCommentsFromArray",
      "target": "common"
    },
    {
      "source": "fromConstructorDeclarationOverload",
      "target": "common"
    },
    {
      "source": "fromMethodDeclarationOverload",
      "target": "common"
    },
    {
      "source": "fromMethodDeclarationOverload",
      "target": "common"
    },
    {
      "source": "fromMethodDeclarationOverload",
      "target": "common"
    },
    {
      "source": "fromMethodDeclarationOverload",
      "target": "common"
    },
    {
      "source": "fromFunctionDeclarationOverload",
      "target": "common"
    },
    {
      "source": "fromFunctionDeclarationOverload",
      "target": "common"
    },
    {
      "source": "verifyAndGetIndex",
      "target": "common"
    },
    {
      "source": "verifyAndGetIndex",
      "target": "common"
    },
    {
      "source": "CompilerCommentNode",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "commentNodeParserKinds",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "CommentNodeParser",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "getNodes",
      "target": "common"
    },
    {
      "source": "isSyntaxList",
      "target": "common"
    },
    {
      "source": "isStatementContainerNode",
      "target": "common"
    },
    {
      "source": "isStatementContainerNode",
      "target": "common"
    },
    {
      "source": "isStatementContainerNode",
      "target": "common"
    },
    {
      "source": "isStatementContainerNode",
      "target": "common"
    },
    {
      "source": "isStatementContainerNode",
      "target": "common"
    },
    {
      "source": "ExtendedParser",
      "target": "common"
    },
    {
      "source": "mergeInComments",
      "target": "common"
    },
    {
      "source": "mergeInComments",
      "target": "common"
    },
    {
      "source": "isComment",
      "target": "common"
    },
    {
      "source": "isComment",
      "target": "common"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "common"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "common"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "common"
    },
    {
      "source": "StraightReplacementNodeHandler",
      "target": "common"
    },
    {
      "source": "StraightReplacementNodeHandler",
      "target": "common"
    },
    {
      "source": "ChangeChildOrderParentHandler",
      "target": "common"
    },
    {
      "source": "ForgetChangedNodeHandler",
      "target": "common"
    },
    {
      "source": "RangeHandler",
      "target": "common"
    },
    {
      "source": "RangeHandler",
      "target": "common"
    },
    {
      "source": "getRealEnd",
      "target": "common"
    },
    {
      "source": "getRealEnd",
      "target": "common"
    },
    {
      "source": "getRealEnd",
      "target": "common"
    },
    {
      "source": "RenameNodeHandler",
      "target": "common"
    },
    {
      "source": "RenameNodeHandler",
      "target": "common"
    },
    {
      "source": "RenameNodeHandler",
      "target": "common"
    },
    {
      "source": "RenameNodeHandler",
      "target": "common"
    },
    {
      "source": "RenameNodeHandler",
      "target": "common"
    },
    {
      "source": "RenameNodeHandler",
      "target": "common"
    },
    {
      "source": "TryOrForgetNodeHandler",
      "target": "common"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "common"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "common"
    },
    {
      "source": "getReplacementText",
      "target": "common"
    },
    {
      "source": "getReplacementText",
      "target": "common"
    },
    {
      "source": "getReplacementText",
      "target": "common"
    },
    {
      "source": "ManipulationError",
      "target": "common"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "common"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "common"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "common"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "common"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "common"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "common"
    },
    {
      "source": "removeCommaSeparatedChild",
      "target": "common"
    },
    {
      "source": "removeCommaSeparatedChild",
      "target": "common"
    },
    {
      "source": "ArgumentedNode",
      "target": "common"
    },
    {
      "source": "ArgumentedNode",
      "target": "common"
    },
    {
      "source": "ArgumentedNode",
      "target": "common"
    },
    {
      "source": "ArgumentedNode",
      "target": "common"
    },
    {
      "source": "AsyncableNode",
      "target": "common"
    },
    {
      "source": "AsyncableNode",
      "target": "common"
    },
    {
      "source": "AsyncableNode",
      "target": "common"
    },
    {
      "source": "AwaitableNode",
      "target": "common"
    },
    {
      "source": "getAwaitInsertPos",
      "target": "common"
    },
    {
      "source": "getAwaitInsertPos",
      "target": "common"
    },
    {
      "source": "getAwaitInsertPos",
      "target": "common"
    },
    {
      "source": "getBodyTextWithoutLeadingIndentation",
      "target": "common"
    },
    {
      "source": "TextRange",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "Node",
      "target": "common"
    },
    {
      "source": "exp#: Node.isAnyKeyword = Node.is(common.SyntaxKind.AnyK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isArrayBindingPattern = Node.is(common.Syntax",
      "target": "common"
    },
    {
      "source": "exp#: Node.isArrayLiteralExpression = Node.is(common.Syn",
      "target": "common"
    },
    {
      "source": "exp#: Node.isArrowFunction = Node.is(common.SyntaxKind.A",
      "target": "common"
    },
    {
      "source": "exp#: Node.isAsExpression = Node.is(common.SyntaxKind.As",
      "target": "common"
    },
    {
      "source": "exp#: Node.isAwaitExpression = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isBigIntLiteral = Node.is(common.SyntaxKind.B",
      "target": "common"
    },
    {
      "source": "exp#: Node.isBinaryExpression = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isBindingElement = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isBlock = Node.is(common.SyntaxKind.Block);",
      "target": "common"
    },
    {
      "source": "exp#: Node.isBooleanKeyword = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isBreakStatement = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isCallExpression = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isCaseBlock = Node.is(common.SyntaxKind.CaseB",
      "target": "common"
    },
    {
      "source": "exp#: Node.isCaseClause = Node.is(common.SyntaxKind.Case",
      "target": "common"
    },
    {
      "source": "exp#: Node.isCatchClause = Node.is(common.SyntaxKind.Cat",
      "target": "common"
    },
    {
      "source": "exp#: Node.isClassDeclaration = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isClassExpression = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isCommaListExpression = Node.is(common.Syntax",
      "target": "common"
    },
    {
      "source": "exp#: Node.isComputedPropertyName = Node.is(common.Synta",
      "target": "common"
    },
    {
      "source": "exp#: Node.isConditionalExpression = Node.is(common.Synt",
      "target": "common"
    },
    {
      "source": "exp#: Node.isContinueStatement = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isDebuggerStatement = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isDecorator = Node.is(common.SyntaxKind.Decor",
      "target": "common"
    },
    {
      "source": "exp#: Node.isDefaultClause = Node.is(common.SyntaxKind.D",
      "target": "common"
    },
    {
      "source": "exp#: Node.isDeleteExpression = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isDoStatement = Node.is(common.SyntaxKind.DoS",
      "target": "common"
    },
    {
      "source": "exp#: Node.isElementAccessExpression = Node.is(common.Sy",
      "target": "common"
    },
    {
      "source": "exp#: Node.isEmptyStatement = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isEnumDeclaration = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isEnumMember = Node.is(common.SyntaxKind.Enum",
      "target": "common"
    },
    {
      "source": "exp#: Node.isExportAssignment = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isExportDeclaration = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isExportSpecifier = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isExpressionStatement = Node.is(common.Syntax",
      "target": "common"
    },
    {
      "source": "exp#: Node.isExpressionWithTypeArguments = Node.is(commo",
      "target": "common"
    },
    {
      "source": "exp#: Node.isExternalModuleReference = Node.is(common.Sy",
      "target": "common"
    },
    {
      "source": "exp#: Node.isForInStatement = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isForOfStatement = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isForStatement = Node.is(common.SyntaxKind.Fo",
      "target": "common"
    },
    {
      "source": "exp#: Node.isFunctionDeclaration = Node.is(common.Syntax",
      "target": "common"
    },
    {
      "source": "exp#: Node.isFunctionExpression = Node.is(common.SyntaxK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isHeritageClause = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isIdentifier = Node.is(common.SyntaxKind.Iden",
      "target": "common"
    },
    {
      "source": "exp#: Node.isIfStatement = Node.is(common.SyntaxKind.IfS",
      "target": "common"
    },
    {
      "source": "exp#: Node.isImportClause = Node.is(common.SyntaxKind.Im",
      "target": "common"
    },
    {
      "source": "exp#: Node.isImportDeclaration = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isImportEqualsDeclaration = Node.is(common.Sy",
      "target": "common"
    },
    {
      "source": "exp#: Node.isImportSpecifier = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isInferKeyword = Node.is(common.SyntaxKind.In",
      "target": "common"
    },
    {
      "source": "exp#: Node.isInterfaceDeclaration = Node.is(common.Synta",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocAugmentsTag = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocAuthorTag = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocCallbackTag = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocClassTag = Node.is(common.SyntaxKind.J",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocDeprecatedTag = Node.is(common.SyntaxK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocEnumTag = Node.is(common.SyntaxKind.JS",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocFunctionType = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocImplementsTag = Node.is(common.SyntaxK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocParameterTag = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocPrivateTag = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocPropertyTag = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocProtectedTag = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocPublicTag = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocReadonlyTag = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocReturnTag = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocSeeTag = Node.is(common.SyntaxKind.JSD",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocSignature = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocTemplateTag = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocThisTag = Node.is(common.SyntaxKind.JS",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocTypeExpression = Node.is(common.Syntax",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocTypeTag = Node.is(common.SyntaxKind.JS",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJSDocTypedefTag = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxAttribute = Node.is(common.SyntaxKind.Js",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxClosingElement = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxClosingFragment = Node.is(common.SyntaxK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxElement = Node.is(common.SyntaxKind.JsxE",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxExpression = Node.is(common.SyntaxKind.J",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxFragment = Node.is(common.SyntaxKind.Jsx",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxOpeningElement = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxOpeningFragment = Node.is(common.SyntaxK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxSelfClosingElement = Node.is(common.Synt",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxSpreadAttribute = Node.is(common.SyntaxK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isJsxText = Node.is(common.SyntaxKind.JsxText",
      "target": "common"
    },
    {
      "source": "exp#: Node.isLabeledStatement = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isMetaProperty = Node.is(common.SyntaxKind.Me",
      "target": "common"
    },
    {
      "source": "exp#: Node.isMethodDeclaration = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isMethodSignature = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isModuleBlock = Node.is(common.SyntaxKind.Mod",
      "target": "common"
    },
    {
      "source": "exp#: Node.isModuleDeclaration = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNamedExports = Node.is(common.SyntaxKind.Na",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNamedImports = Node.is(common.SyntaxKind.Na",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNamedTupleMember = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNamespaceExport = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNamespaceImport = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNeverKeyword = Node.is(common.SyntaxKind.Ne",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNewExpression = Node.is(common.SyntaxKind.N",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNoSubstitutionTemplateLiteral = Node.is(com",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNonNullExpression = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNotEmittedStatement = Node.is(common.Syntax",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNumberKeyword = Node.is(common.SyntaxKind.N",
      "target": "common"
    },
    {
      "source": "exp#: Node.isNumericLiteral = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isObjectBindingPattern = Node.is(common.Synta",
      "target": "common"
    },
    {
      "source": "exp#: Node.isObjectKeyword = Node.is(common.SyntaxKind.O",
      "target": "common"
    },
    {
      "source": "exp#: Node.isObjectLiteralExpression = Node.is(common.Sy",
      "target": "common"
    },
    {
      "source": "exp#: Node.isOmittedExpression = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isParenthesizedExpression = Node.is(common.Sy",
      "target": "common"
    },
    {
      "source": "exp#: Node.isPartiallyEmittedExpression = Node.is(common",
      "target": "common"
    },
    {
      "source": "exp#: Node.isPostfixUnaryExpression = Node.is(common.Syn",
      "target": "common"
    },
    {
      "source": "exp#: Node.isPrefixUnaryExpression = Node.is(common.Synt",
      "target": "common"
    },
    {
      "source": "exp#: Node.isPrivateIdentifier = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isPropertyAccessExpression = Node.is(common.S",
      "target": "common"
    },
    {
      "source": "exp#: Node.isPropertyAssignment = Node.is(common.SyntaxK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isPropertyDeclaration = Node.is(common.Syntax",
      "target": "common"
    },
    {
      "source": "exp#: Node.isPropertySignature = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isQualifiedName = Node.is(common.SyntaxKind.Q",
      "target": "common"
    },
    {
      "source": "exp#: Node.isRegularExpressionLiteral = Node.is(common.S",
      "target": "common"
    },
    {
      "source": "exp#: Node.isReturnStatement = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isSemicolonToken = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isShorthandPropertyAssignment = Node.is(commo",
      "target": "common"
    },
    {
      "source": "exp#: Node.isSourceFile = Node.is(common.SyntaxKind.Sour",
      "target": "common"
    },
    {
      "source": "exp#: Node.isSpreadAssignment = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isSpreadElement = Node.is(common.SyntaxKind.S",
      "target": "common"
    },
    {
      "source": "exp#: Node.isStringKeyword = Node.is(common.SyntaxKind.S",
      "target": "common"
    },
    {
      "source": "exp#: Node.isStringLiteral = Node.is(common.SyntaxKind.S",
      "target": "common"
    },
    {
      "source": "exp#: Node.isSwitchStatement = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "exp#: Node.isSymbolKeyword = Node.is(common.SyntaxKind.S",
      "target": "common"
    },
    {
      "source": "exp#: Node.isSyntaxList = Node.is(common.SyntaxKind.Synt",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTaggedTemplateExpression = Node.is(common.S",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTemplateExpression = Node.is(common.SyntaxK",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTemplateHead = Node.is(common.SyntaxKind.Te",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTemplateMiddle = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTemplateSpan = Node.is(common.SyntaxKind.Te",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTemplateTail = Node.is(common.SyntaxKind.Te",
      "target": "common"
    },
    {
      "source": "exp#: Node.isThrowStatement = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTryStatement = Node.is(common.SyntaxKind.Tr",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTypeAliasDeclaration = Node.is(common.Synta",
      "target": "common"
    },
    {
      "source": "exp#: Node.isTypeOfExpression = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isUndefinedKeyword = Node.is(common.SyntaxKin",
      "target": "common"
    },
    {
      "source": "exp#: Node.isVariableDeclaration = Node.is(common.Syntax",
      "target": "common"
    },
    {
      "source": "exp#: Node.isVariableDeclarationList = Node.is(common.Sy",
      "target": "common"
    },
    {
      "source": "exp#: Node.isVariableStatement = Node.is(common.SyntaxKi",
      "target": "common"
    },
    {
      "source": "exp#: Node.isVoidExpression = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isWhileStatement = Node.is(common.SyntaxKind.",
      "target": "common"
    },
    {
      "source": "exp#: Node.isWithStatement = Node.is(common.SyntaxKind.W",
      "target": "common"
    },
    {
      "source": "exp#: Node.isYieldExpression = Node.is(common.SyntaxKind",
      "target": "common"
    },
    {
      "source": "insertWhiteSpaceTextAtPos",
      "target": "common"
    },
    {
      "source": "useParseTreeSearchForKind",
      "target": "common"
    },
    {
      "source": "useParseTreeSearchForKind",
      "target": "common"
    },
    {
      "source": "useParseTreeSearchForKind",
      "target": "common"
    },
    {
      "source": "renameNode",
      "target": "common"
    },
    {
      "source": "renameNode",
      "target": "common"
    },
    {
      "source": "setBodyTextForNode",
      "target": "common"
    },
    {
      "source": "setBodyTextForNode",
      "target": "common"
    },
    {
      "source": "BodiedNode",
      "target": "common"
    },
    {
      "source": "BodyableNode",
      "target": "common"
    },
    {
      "source": "BodyableNode",
      "target": "common"
    },
    {
      "source": "ChildOrderableNode",
      "target": "common"
    },
    {
      "source": "DecoratableNode",
      "target": "common"
    },
    {
      "source": "DecoratableNode",
      "target": "common"
    },
    {
      "source": "areDecoratorsOnSameLine",
      "target": "common"
    },
    {
      "source": "DotDotDotTokenableNode",
      "target": "common"
    },
    {
      "source": "ExclamationTokenableNode",
      "target": "common"
    },
    {
      "source": "ExclamationTokenableNode",
      "target": "common"
    },
    {
      "source": "ExclamationTokenableNode",
      "target": "common"
    },
    {
      "source": "ModifierableNode",
      "target": "common"
    },
    {
      "source": "ModifierableNode",
      "target": "common"
    },
    {
      "source": "ModifierableNode",
      "target": "common"
    },
    {
      "source": "ModifierableNode",
      "target": "common"
    },
    {
      "source": "getAddAfterModifierTexts",
      "target": "common"
    },
    {
      "source": "ExportGetableNode",
      "target": "common"
    },
    {
      "source": "ExportGetableNode",
      "target": "common"
    },
    {
      "source": "ExportGetableNode",
      "target": "common"
    },
    {
      "source": "ExportGetableNode",
      "target": "common"
    },
    {
      "source": "throwForNotModifierableNode",
      "target": "common"
    },
    {
      "source": "apply",
      "target": "common"
    },
    {
      "source": "apply",
      "target": "common"
    },
    {
      "source": "InitializerExpressionableNodeStructurePrinter",
      "target": "common"
    },
    {
      "source": "ReturnTypedNodeStructurePrinter",
      "target": "common"
    },
    {
      "source": "TypedNodeStructurePrinter",
      "target": "common"
    },
    {
      "source": "ClassDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ClassDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ClassDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ClassDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ClassDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "forEachStructureChild",
      "target": "common"
    },
    {
      "source": "isLastNonWhitespaceCharCloseBrace",
      "target": "common"
    },
    {
      "source": "ClassMemberStructurePrinter",
      "target": "common"
    },
    {
      "source": "ConstructorDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "MethodDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "JSDocTagStructurePrinter",
      "target": "common"
    },
    {
      "source": "EnumMemberStructurePrinter",
      "target": "common"
    },
    {
      "source": "ObjectLiteralExpressionPropertyStructurePrinter",
      "target": "common"
    },
    {
      "source": "FunctionDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "FunctionDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ParameterDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "InterfaceDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNodeStructurePrinter",
      "target": "common"
    },
    {
      "source": "TypeElementMemberStructurePrinter",
      "target": "common"
    },
    {
      "source": "JsxAttributeDeciderStructurePrinter",
      "target": "common"
    },
    {
      "source": "JsxChildDeciderStructurePrinter",
      "target": "common"
    },
    {
      "source": "ExportDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ExportDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ImportDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ModuleDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ModuleDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ModuleDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ModuleDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "NamedImportExportSpecifierStructurePrinter",
      "target": "common"
    },
    {
      "source": "NamedImportExportSpecifierStructurePrinter",
      "target": "common"
    },
    {
      "source": "NamedImportExportSpecifierStructurePrinter",
      "target": "common"
    },
    {
      "source": "StatementStructurePrinter",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclarationStructurePrinter",
      "target": "common"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "common"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "common"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "common"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "common"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "common"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "common"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "common"
    },
    {
      "source": "GeneratorableNode",
      "target": "common"
    },
    {
      "source": "getAsteriskInsertPos",
      "target": "common"
    },
    {
      "source": "getAsteriskInsertPos",
      "target": "common"
    },
    {
      "source": "getAsteriskInsertPos",
      "target": "common"
    },
    {
      "source": "HeritageClauseableNode",
      "target": "common"
    },
    {
      "source": "HeritageClauseableNode",
      "target": "common"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "common"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "common"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "common"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "common"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "common"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "common"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "common"
    },
    {
      "source": "InitializerExpressionGetableNode",
      "target": "common"
    },
    {
      "source": "InitializerExpressionGetableNode",
      "target": "common"
    },
    {
      "source": "InitializerExpressionGetableNode",
      "target": "common"
    },
    {
      "source": "apply$1",
      "target": "common"
    },
    {
      "source": "apply$1",
      "target": "common"
    },
    {
      "source": "apply$1",
      "target": "common"
    },
    {
      "source": "JSDocableNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "ModuledNode",
      "target": "common"
    },
    {
      "source": "RenameableNode",
      "target": "common"
    },
    {
      "source": "RenameableNode",
      "target": "common"
    },
    {
      "source": "RenameableNode",
      "target": "common"
    },
    {
      "source": "NameableNodeInternal",
      "target": "common"
    },
    {
      "source": "NameableNodeInternal",
      "target": "common"
    },
    {
      "source": "NameableNodeInternal",
      "target": "common"
    },
    {
      "source": "NameableNodeInternal",
      "target": "common"
    },
    {
      "source": "addNameNode",
      "target": "common"
    },
    {
      "source": "addNameNode",
      "target": "common"
    },
    {
      "source": "ParameteredNode",
      "target": "common"
    },
    {
      "source": "ParameteredNode",
      "target": "common"
    },
    {
      "source": "ParameteredNode",
      "target": "common"
    },
    {
      "source": "ParameteredNode",
      "target": "common"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "common"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "common"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "common"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "common"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "common"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "common"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "common"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "common"
    },
    {
      "source": "ReadonlyableNode",
      "target": "common"
    },
    {
      "source": "ReadonlyableNode",
      "target": "common"
    },
    {
      "source": "ReturnTypedNode",
      "target": "common"
    },
    {
      "source": "ReturnTypedNode",
      "target": "common"
    },
    {
      "source": "ReturnTypedNode",
      "target": "common"
    },
    {
      "source": "ReturnTypedNode",
      "target": "common"
    },
    {
      "source": "ReturnTypedNode",
      "target": "common"
    },
    {
      "source": "ReturnTypedNode",
      "target": "common"
    },
    {
      "source": "ReturnTypedNode",
      "target": "common"
    },
    {
      "source": "getScopeForNode",
      "target": "common"
    },
    {
      "source": "getScopeForNode",
      "target": "common"
    },
    {
      "source": "getScopeForNode",
      "target": "common"
    },
    {
      "source": "StaticableNode",
      "target": "common"
    },
    {
      "source": "StaticableNode",
      "target": "common"
    },
    {
      "source": "StaticableNode",
      "target": "common"
    },
    {
      "source": "TextInsertableNode",
      "target": "common"
    },
    {
      "source": "TextInsertableNode",
      "target": "common"
    },
    {
      "source": "getValidRange",
      "target": "common"
    },
    {
      "source": "getValidRange",
      "target": "common"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "common"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "common"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "common"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "common"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "common"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "common"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "common"
    },
    {
      "source": "TypedNode",
      "target": "common"
    },
    {
      "source": "TypedNode",
      "target": "common"
    },
    {
      "source": "TypedNode",
      "target": "common"
    },
    {
      "source": "TypedNode",
      "target": "common"
    },
    {
      "source": "TypedNode",
      "target": "common"
    },
    {
      "source": "TypedNode",
      "target": "common"
    },
    {
      "source": "TypedNode",
      "target": "common"
    },
    {
      "source": "TypedNode",
      "target": "common"
    },
    {
      "source": "getSeparatorSyntaxKindForNode",
      "target": "common"
    },
    {
      "source": "getSeparatorSyntaxKindForNode",
      "target": "common"
    },
    {
      "source": "getSeparatorSyntaxKindForNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "common"
    },
    {
      "source": "TypeParameteredNode",
      "target": "common"
    },
    {
      "source": "TypeParameteredNode",
      "target": "common"
    },
    {
      "source": "TypeParameteredNode",
      "target": "common"
    },
    {
      "source": "TypeParameteredNode",
      "target": "common"
    },
    {
      "source": "getInsertPos",
      "target": "common"
    },
    {
      "source": "getInsertPos",
      "target": "common"
    },
    {
      "source": "BindingElement",
      "target": "common"
    },
    {
      "source": "AbstractableNode",
      "target": "common"
    },
    {
      "source": "AbstractableNode",
      "target": "common"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "common"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "common"
    },
    {
      "source": "ExpressionableNode",
      "target": "common"
    },
    {
      "source": "ExpressionableNode",
      "target": "common"
    },
    {
      "source": "ExpressionableNode",
      "target": "common"
    },
    {
      "source": "BaseExpressionedNode",
      "target": "common"
    },
    {
      "source": "BaseExpressionedNode",
      "target": "common"
    },
    {
      "source": "ElementAccessExpression",
      "target": "common"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "common"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "common"
    },
    {
      "source": "PropertyAssignment",
      "target": "common"
    },
    {
      "source": "PropertyAssignment",
      "target": "common"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "common"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "common"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "StatementedNode",
      "target": "common"
    },
    {
      "source": "BreakStatement",
      "target": "common"
    },
    {
      "source": "CaseBlock",
      "target": "common"
    },
    {
      "source": "CatchClause",
      "target": "common"
    },
    {
      "source": "ContinueStatement",
      "target": "common"
    },
    {
      "source": "ForStatement",
      "target": "common"
    },
    {
      "source": "ForStatement",
      "target": "common"
    },
    {
      "source": "ForStatement",
      "target": "common"
    },
    {
      "source": "IfStatement",
      "target": "common"
    },
    {
      "source": "TryStatement",
      "target": "common"
    },
    {
      "source": "TryStatement",
      "target": "common"
    },
    {
      "source": "ExportAssignment",
      "target": "common"
    },
    {
      "source": "ExportAssignment",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "ExportDeclaration",
      "target": "common"
    },
    {
      "source": "setEmptyNamedExport",
      "target": "common"
    },
    {
      "source": "ExportSpecifier",
      "target": "common"
    },
    {
      "source": "ExportSpecifier",
      "target": "common"
    },
    {
      "source": "ExportSpecifier",
      "target": "common"
    },
    {
      "source": "ExportSpecifier",
      "target": "common"
    },
    {
      "source": "ExportSpecifier",
      "target": "common"
    },
    {
      "source": "ExternalModuleReference",
      "target": "common"
    },
    {
      "source": "ImportClause",
      "target": "common"
    },
    {
      "source": "ImportClause",
      "target": "common"
    },
    {
      "source": "ImportClause",
      "target": "common"
    },
    {
      "source": "ImportClause",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "ImportDeclaration",
      "target": "common"
    },
    {
      "source": "setEmptyNamedImport",
      "target": "common"
    },
    {
      "source": "getErrorWhenNamespaceImportsExist",
      "target": "common"
    },
    {
      "source": "ImportEqualsDeclaration",
      "target": "common"
    },
    {
      "source": "ImportSpecifier",
      "target": "common"
    },
    {
      "source": "ImportSpecifier",
      "target": "common"
    },
    {
      "source": "ImportSpecifier",
      "target": "common"
    },
    {
      "source": "ImportSpecifier",
      "target": "common"
    },
    {
      "source": "ModuleChildableNode",
      "target": "common"
    },
    {
      "source": "ModuleChildableNode",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "ModuleDeclaration",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "SourceFile",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "OverloadableNode",
      "target": "common"
    },
    {
      "source": "insertOverloads",
      "target": "common"
    },
    {
      "source": "insertOverloads",
      "target": "common"
    },
    {
      "source": "FunctionDeclaration",
      "target": "common"
    },
    {
      "source": "addParensIfNecessary",
      "target": "common"
    },
    {
      "source": "ClassElement",
      "target": "common"
    },
    {
      "source": "MethodDeclaration",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "common"
    },
    {
      "source": "getImmediateDerivedClasses",
      "target": "common"
    },
    {
      "source": "getImmediateDerivedClasses",
      "target": "common"
    },
    {
      "source": "getImmediateDerivedClasses",
      "target": "common"
    },
    {
      "source": "getImmediateDerivedClasses",
      "target": "common"
    },
    {
      "source": "ClassDeclaration",
      "target": "common"
    },
    {
      "source": "ClassDeclaration",
      "target": "common"
    },
    {
      "source": "getExtractedClassDetails",
      "target": "common"
    },
    {
      "source": "getExtractedClassDetails",
      "target": "common"
    },
    {
      "source": "getExtractedClassDetails",
      "target": "common"
    },
    {
      "source": "getDefaultExtractedName",
      "target": "common"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "common"
    },
    {
      "source": "GetAccessorDeclaration",
      "target": "common"
    },
    {
      "source": "PropertyDeclaration",
      "target": "common"
    },
    {
      "source": "PropertyDeclaration",
      "target": "common"
    },
    {
      "source": "SetAccessorDeclaration",
      "target": "common"
    },
    {
      "source": "Decorator",
      "target": "common"
    },
    {
      "source": "Decorator",
      "target": "common"
    },
    {
      "source": "Decorator",
      "target": "common"
    },
    {
      "source": "Decorator",
      "target": "common"
    },
    {
      "source": "Decorator",
      "target": "common"
    },
    {
      "source": "Decorator",
      "target": "common"
    },
    {
      "source": "JSDocPropertyLikeTag",
      "target": "common"
    },
    {
      "source": "JSDocTypeExpressionableTag",
      "target": "common"
    },
    {
      "source": "getTextWithoutStars",
      "target": "common"
    },
    {
      "source": "JSDoc",
      "target": "common"
    },
    {
      "source": "JSDoc",
      "target": "common"
    },
    {
      "source": "JSDoc",
      "target": "common"
    },
    {
      "source": "getNextJsDocTag",
      "target": "common"
    },
    {
      "source": "getPreviousNonWhiteSpacePos",
      "target": "common"
    },
    {
      "source": "ImportTypeNode",
      "target": "common"
    },
    {
      "source": "ImportTypeNode",
      "target": "common"
    },
    {
      "source": "NamedTupleMember",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "common"
    },
    {
      "source": "TypePredicateNode",
      "target": "common"
    },
    {
      "source": "TypePredicateNode",
      "target": "common"
    },
    {
      "source": "JSDocTemplateTag",
      "target": "common"
    },
    {
      "source": "EnumDeclaration",
      "target": "common"
    },
    {
      "source": "EnumDeclaration",
      "target": "common"
    },
    {
      "source": "EnumMember",
      "target": "common"
    },
    {
      "source": "EnumMember",
      "target": "common"
    },
    {
      "source": "IndexSignatureDeclaration",
      "target": "common"
    },
    {
      "source": "IndexSignatureDeclaration",
      "target": "common"
    },
    {
      "source": "InterfaceDeclaration",
      "target": "common"
    },
    {
      "source": "JsxAttributedNode",
      "target": "common"
    },
    {
      "source": "JsxAttributedNode",
      "target": "common"
    },
    {
      "source": "JsxAttribute",
      "target": "common"
    },
    {
      "source": "JsxAttribute",
      "target": "common"
    },
    {
      "source": "JsxAttribute",
      "target": "common"
    },
    {
      "source": "JsxElement",
      "target": "common"
    },
    {
      "source": "BigIntLiteral",
      "target": "common"
    },
    {
      "source": "BigIntLiteral",
      "target": "common"
    },
    {
      "source": "getLiteralValue",
      "target": "common"
    },
    {
      "source": "StringLiteral",
      "target": "common"
    },
    {
      "source": "VariableDeclaration",
      "target": "common"
    },
    {
      "source": "VariableDeclaration",
      "target": "common"
    },
    {
      "source": "VariableDeclaration",
      "target": "common"
    },
    {
      "source": "VariableDeclaration",
      "target": "common"
    },
    {
      "source": "VariableDeclaration",
      "target": "common"
    },
    {
      "source": "VariableDeclaration",
      "target": "common"
    },
    {
      "source": "VariableDeclaration",
      "target": "common"
    },
    {
      "source": "VariableDeclarationList",
      "target": "common"
    },
    {
      "source": "VariableDeclarationList",
      "target": "common"
    },
    {
      "source": "VariableDeclarationList",
      "target": "common"
    },
    {
      "source": "VariableDeclarationList",
      "target": "common"
    },
    {
      "source": "VariableDeclarationList",
      "target": "common"
    },
    {
      "source": "VariableDeclarationList",
      "target": "common"
    },
    {
      "source": "VariableDeclarationList",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "Symbol",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "FileTextChanges",
      "target": "common"
    },
    {
      "source": "FileTextChanges",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "DefinitionInfo",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "Diagnostic",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "TypeChecker",
      "target": "common"
    },
    {
      "source": "TypeChecker",
      "target": "common"
    },
    {
      "source": "TypeChecker",
      "target": "common"
    },
    {
      "source": "TypeChecker",
      "target": "common"
    },
    {
      "source": "TypeChecker",
      "target": "common"
    },
    {
      "source": "TypeChecker",
      "target": "common"
    },
    {
      "source": "TypeChecker",
      "target": "common"
    },
    {
      "source": "TypeChecker",
      "target": "common"
    },
    {
      "source": "Program",
      "target": "common"
    },
    {
      "source": "Program",
      "target": "common"
    },
    {
      "source": "Program",
      "target": "common"
    },
    {
      "source": "LanguageService",
      "target": "common"
    },
    {
      "source": "LanguageService",
      "target": "common"
    },
    {
      "source": "LanguageService",
      "target": "common"
    },
    {
      "source": "LanguageService",
      "target": "common"
    },
    {
      "source": "LanguageService",
      "target": "common"
    },
    {
      "source": "LanguageService",
      "target": "common"
    },
    {
      "source": "LanguageService",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "Type",
      "target": "common"
    },
    {
      "source": "TypeParameter",
      "target": "common"
    },
    {
      "source": "TypeParameter",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "Directory",
      "target": "common"
    },
    {
      "source": "getDirectoryCopyOptions",
      "target": "common"
    },
    {
      "source": "DirectoryCoordinator",
      "target": "common"
    },
    {
      "source": "DirectoryCoordinator",
      "target": "common"
    },
    {
      "source": "DirectoryCoordinator",
      "target": "common"
    },
    {
      "source": "DirectoryCoordinator",
      "target": "common"
    },
    {
      "source": "DirectoryCoordinator",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "DirectoryCache",
      "target": "common"
    },
    {
      "source": "ForgetfulNodeCache",
      "target": "common"
    },
    {
      "source": "ForgetfulNodeCache",
      "target": "common"
    },
    {
      "source": "ForgetfulNodeCache",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "CompilerFactory",
      "target": "common"
    },
    {
      "source": "InProjectCoordinator",
      "target": "common"
    },
    {
      "source": "InProjectCoordinator",
      "target": "common"
    },
    {
      "source": "InProjectCoordinator",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "createWrappedNode",
      "target": "common"
    },
    {
      "source": "createWrappedNode",
      "target": "common"
    },
    {
      "source": "createWrappedNode",
      "target": "common"
    },
    {
      "source": "createWrappedNode",
      "target": "common"
    },
    {
      "source": "createWrappedNode",
      "target": "common"
    },
    {
      "source": "createWrappedNode",
      "target": "common"
    },
    {
      "source": "createWrappedNode",
      "target": "common"
    },
    {
      "source": "ProjectContext",
      "target": "common"
    },
    {
      "source": "ProjectContext",
      "target": "common"
    },
    {
      "source": "ProjectContext",
      "target": "common"
    },
    {
      "source": "ProjectContext",
      "target": "common"
    },
    {
      "source": "ProjectContext",
      "target": "common"
    },
    {
      "source": "ProjectContext",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "__decorate()",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "Project",
      "target": "common"
    },
    {
      "source": "structurePrinterFactory",
      "target": "common"
    },
    {
      "source": "{ InvalidOperationError, FileNotFoundError, ArgumentError, ArgumentNullOrWhitespaceError, ArgumentOutOfRangeError, ArgumentTypeError, BaseError, DirectoryNotFoundError, NotImplementedError, NotSupportedError, PathNotFoundError }",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "Object()",
      "target": "common"
    },
    {
      "source": "CodeBlockWriter__default",
      "target": "CodeBlockWriter"
    },
    {
      "source": "CodeBlockWriter__default",
      "target": "_interopDefaultLegacy"
    },
    {
      "source": "Printer",
      "target": "CodeBlockWriter__default"
    },
    {
      "source": "Printer",
      "target": "CodeBlockWriter__default"
    },
    {
      "source": "ProjectContext",
      "target": "CodeBlockWriter__default"
    },
    {
      "source": "Object()",
      "target": "CodeBlockWriter__default"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "AdvancedIterator"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "AdvancedIterator"
    },
    {
      "source": "RangeHandler",
      "target": "AdvancedIterator"
    },
    {
      "source": "RangeHandler",
      "target": "AdvancedIterator"
    },
    {
      "source": "getRealEnd",
      "target": "CharCodes"
    },
    {
      "source": "RemoveChildrenTextManipulator",
      "target": "CharCodes"
    },
    {
      "source": "RemoveChildrenTextManipulator",
      "target": "CharCodes"
    },
    {
      "source": "RemoveChildrenTextManipulator",
      "target": "CharCodes"
    },
    {
      "source": "RemoveChildrenTextManipulator",
      "target": "CharCodes"
    },
    {
      "source": "Node",
      "target": "CharCodes"
    },
    {
      "source": "Node",
      "target": "CharCodes"
    },
    {
      "source": "Node",
      "target": "CharCodes"
    },
    {
      "source": "Node",
      "target": "CharCodes"
    },
    {
      "source": "Node",
      "target": "CharCodes"
    },
    {
      "source": "Node",
      "target": "CharCodes"
    },
    {
      "source": "isLastNonWhitespaceCharCloseBrace",
      "target": "CharCodes"
    },
    {
      "source": "SourceFile",
      "target": "CharCodes"
    },
    {
      "source": "SourceFile",
      "target": "CharCodes"
    },
    {
      "source": "SourceFile",
      "target": "CharCodes"
    },
    {
      "source": "getTextWithoutStars",
      "target": "CharCodes"
    },
    {
      "source": "JSDoc",
      "target": "CharCodes"
    },
    {
      "source": "JSDoc",
      "target": "CharCodes"
    },
    {
      "source": "JSDoc",
      "target": "CharCodes"
    },
    {
      "source": "JSDoc",
      "target": "CharCodes"
    },
    {
      "source": "JSDoc",
      "target": "CharCodes"
    },
    {
      "source": "JSDoc",
      "target": "CharCodes"
    },
    {
      "source": "JSDoc",
      "target": "CharCodes"
    },
    {
      "source": "getText",
      "target": "CharCodes"
    },
    {
      "source": "getPreviousNonWhiteSpacePos",
      "target": "CharCodes"
    },
    {
      "source": "DecoratableNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ParameteredNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "TypeParameteredNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "EnumDeclaration",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "JsxAttributedNode",
      "target": "getNodeByNameOrFindFunction"
    },
    {
      "source": "getNodeByNameOrFindFunction",
      "target": "nodeHasName"
    },
    {
      "source": "StatementedNode",
      "target": "nodeHasName"
    },
    {
      "source": "DecoratableNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ParameteredNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "TypeParameteredNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "StatementedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "EnumDeclaration",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "JsxAttributedNode",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "Type",
      "target": "getNotFoundErrorMessageForNameOrFindFunction"
    },
    {
      "source": "ParentFinderReplacementNodeHandler",
      "target": "getParentSyntaxList"
    },
    {
      "source": "Node",
      "target": "getParentSyntaxList"
    },
    {
      "source": "Type",
      "target": "getSymbolByNameOrFindFunction"
    },
    {
      "source": "Type",
      "target": "getSymbolByNameOrFindFunction"
    },
    {
      "source": "AmbientableNode",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "StatementedNode",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "StatementedNode",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "StatementedNode",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "StatementedNode",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "MethodDeclaration",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "getAllMembers",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "isNodeAmbientOrInAmbientContext"
    },
    {
      "source": "isNodeAmbientOrInAmbientContext",
      "target": "checkNodeIsAmbient"
    },
    {
      "source": "isNodeAmbientOrInAmbientContext",
      "target": "checkNodeIsAmbient"
    },
    {
      "source": "Node",
      "target": "isStringKind"
    },
    {
      "source": "SourceFileReferenceContainer",
      "target": "ModuleUtils"
    },
    {
      "source": "ExportDeclaration",
      "target": "ModuleUtils"
    },
    {
      "source": "ExternalModuleReference",
      "target": "ModuleUtils"
    },
    {
      "source": "ExternalModuleReference",
      "target": "ModuleUtils"
    },
    {
      "source": "ImportDeclaration",
      "target": "ModuleUtils"
    },
    {
      "source": "ImportDeclaration",
      "target": "ModuleUtils"
    },
    {
      "source": "updateStringLiteralReferences",
      "target": "ModuleUtils"
    },
    {
      "source": "Node",
      "target": "printNode"
    },
    {
      "source": "Node",
      "target": "printNode"
    },
    {
      "source": "exp#: exports.printNode = printNode;",
      "target": "printNode"
    },
    {
      "source": "ProjectContext",
      "target": "ManipulationSettingsContainer"
    },
    {
      "source": "exp#: exports.ManipulationSettingsContainer = Manipulati",
      "target": "ManipulationSettingsContainer"
    },
    {
      "source": "fillDefaultEditorSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultEditorSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultEditorSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultEditorSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultEditorSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "setValueIfUndefined"
    },
    {
      "source": "ConstructorDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "MethodDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "MethodDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "MethodDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "MethodDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "FunctionDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "FunctionDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "FunctionDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "ModuleDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "ModuleDeclarationStructurePrinter",
      "target": "setValueIfUndefined"
    },
    {
      "source": "getDirectoryCopyOptions",
      "target": "setValueIfUndefined"
    },
    {
      "source": "ManipulationSettingsContainer",
      "target": "fillDefaultEditorSettings"
    },
    {
      "source": "fillDefaultFormatCodeSettings",
      "target": "fillDefaultEditorSettings"
    },
    {
      "source": "LanguageService",
      "target": "fillDefaultEditorSettings"
    },
    {
      "source": "LanguageService",
      "target": "fillDefaultFormatCodeSettings"
    },
    {
      "source": "Node",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "insertWhiteSpaceTextAtPos",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "SyntaxList",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "apply$1",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "ReturnTypedNode",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "TextInsertableNode",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "TypedNode",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "PropertyAssignment",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "JSDoc",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "JSDocTag",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "JsxAttribute",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "CompilerFactory",
      "target": "getTextFromStringOrWriter"
    },
    {
      "source": "getTextFromStringOrWriter",
      "target": "printTextFromStringOrWriter"
    },
    {
      "source": "ArgumentedNode",
      "target": "printTextFromStringOrWriter"
    },
    {
      "source": "getBodyText",
      "target": "printTextFromStringOrWriter"
    },
    {
      "source": "JSDocStructurePrinter",
      "target": "printTextFromStringOrWriter"
    },
    {
      "source": "JSDocTagStructurePrinter",
      "target": "printTextFromStringOrWriter"
    },
    {
      "source": "PropertyAssignmentStructurePrinter",
      "target": "printTextFromStringOrWriter"
    },
    {
      "source": "SpreadAssignmentStructurePrinter",
      "target": "printTextFromStringOrWriter"
    },
    {
      "source": "JsxElement",
      "target": "printTextFromStringOrWriter"
    },
    {
      "source": "ConsoleLogger",
      "target": "EnableableLogger"
    },
    {
      "source": "ProjectContext",
      "target": "ConsoleLogger"
    },
    {
      "source": "isValidVariableName",
      "target": "reg"
    },
    {
      "source": "EnumMemberStructurePrinter",
      "target": "isValidVariableName"
    },
    {
      "source": "ManipulationSettingsContainer",
      "target": "newLineKindToString"
    },
    {
      "source": "ProjectContext",
      "target": "LazyReferenceCoordinator"
    },
    {
      "source": "SourceFile",
      "target": "SourceFileReferenceContainer"
    },
    {
      "source": "exp#: exports.getCompilerOptionsFromTsConfig = getCompil",
      "target": "getCompilerOptionsFromTsConfig"
    },
    {
      "source": "printTextWithSeparator",
      "target": "WriterUtils"
    },
    {
      "source": "AmbientableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "AsyncableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "DecoratableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ExclamationTokenableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "apply",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "GeneratorableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "apply$1",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JSDocableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "NamedNodeBase",
      "target": "callBaseGetStructure"
    },
    {
      "source": "NameableNodeInternal",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ParameteredNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ReadonlyableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ReturnTypedNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ScopeableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ScopedNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "StaticableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "TypedNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "TypeParameteredNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "AbstractableNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "PropertyAssignment",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "callBaseGetStructure"
    },
    {
      "source": "SpreadAssignment",
      "target": "callBaseGetStructure"
    },
    {
      "source": "StatementedNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ExportAssignment",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ExportDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ExportSpecifier",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ImportDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ImportSpecifier",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ModuleDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "SourceFile",
      "target": "callBaseGetStructure"
    },
    {
      "source": "VariableStatement",
      "target": "callBaseGetStructure"
    },
    {
      "source": "FunctionDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ParameterDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "MethodDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ClassDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "GetAccessorDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "PropertyDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "SetAccessorDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "Decorator",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JSDoc",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JSDocTag",
      "target": "callBaseGetStructure"
    },
    {
      "source": "TypeAliasDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "EnumDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "EnumMember",
      "target": "callBaseGetStructure"
    },
    {
      "source": "CallSignatureDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "ConstructSignatureDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "IndexSignatureDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "InterfaceDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "MethodSignature",
      "target": "callBaseGetStructure"
    },
    {
      "source": "PropertySignature",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JsxAttributedNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JsxTagNamedNode",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JsxAttribute",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JsxElement",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JsxSelfClosingElement",
      "target": "callBaseGetStructure"
    },
    {
      "source": "JsxSpreadAttribute",
      "target": "callBaseGetStructure"
    },
    {
      "source": "VariableDeclaration",
      "target": "callBaseGetStructure"
    },
    {
      "source": "AmbientableNode",
      "target": "callBaseSet"
    },
    {
      "source": "AsyncableNode",
      "target": "callBaseSet"
    },
    {
      "source": "AwaitableNode",
      "target": "callBaseSet"
    },
    {
      "source": "DecoratableNode",
      "target": "callBaseSet"
    },
    {
      "source": "ExclamationTokenableNode",
      "target": "callBaseSet"
    },
    {
      "source": "apply",
      "target": "callBaseSet"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "callBaseSet"
    },
    {
      "source": "GeneratorableNode",
      "target": "callBaseSet"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "callBaseSet"
    },
    {
      "source": "apply$1",
      "target": "callBaseSet"
    },
    {
      "source": "JSDocableNode",
      "target": "callBaseSet"
    },
    {
      "source": "NamedNodeBase",
      "target": "callBaseSet"
    },
    {
      "source": "NameableNodeInternal",
      "target": "callBaseSet"
    },
    {
      "source": "ParameteredNode",
      "target": "callBaseSet"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "callBaseSet"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "callBaseSet"
    },
    {
      "source": "ReadonlyableNode",
      "target": "callBaseSet"
    },
    {
      "source": "ReturnTypedNode",
      "target": "callBaseSet"
    },
    {
      "source": "ScopeableNode",
      "target": "callBaseSet"
    },
    {
      "source": "ScopedNode",
      "target": "callBaseSet"
    },
    {
      "source": "StaticableNode",
      "target": "callBaseSet"
    },
    {
      "source": "TypedNode",
      "target": "callBaseSet"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "callBaseSet"
    },
    {
      "source": "TypeParameteredNode",
      "target": "callBaseSet"
    },
    {
      "source": "AbstractableNode",
      "target": "callBaseSet"
    },
    {
      "source": "BaseExpressionedNode",
      "target": "callBaseSet"
    },
    {
      "source": "PropertyAssignment",
      "target": "callBaseSet"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "callBaseSet"
    },
    {
      "source": "SpreadAssignment",
      "target": "callBaseSet"
    },
    {
      "source": "StatementedNode",
      "target": "callBaseSet"
    },
    {
      "source": "ExportAssignment",
      "target": "callBaseSet"
    },
    {
      "source": "ExportDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "ExportSpecifier",
      "target": "callBaseSet"
    },
    {
      "source": "ImportDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "ImportSpecifier",
      "target": "callBaseSet"
    },
    {
      "source": "ModuleDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "SourceFile",
      "target": "callBaseSet"
    },
    {
      "source": "VariableStatement",
      "target": "callBaseSet"
    },
    {
      "source": "FunctionDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "ParameterDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "MethodDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "ClassDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "GetAccessorDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "PropertyDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "SetAccessorDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "Decorator",
      "target": "callBaseSet"
    },
    {
      "source": "JSDoc",
      "target": "callBaseSet"
    },
    {
      "source": "JSDocTag",
      "target": "callBaseSet"
    },
    {
      "source": "TypeAliasDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "EnumDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "EnumMember",
      "target": "callBaseSet"
    },
    {
      "source": "CallSignatureDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "ConstructSignatureDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "IndexSignatureDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "InterfaceDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "MethodSignature",
      "target": "callBaseSet"
    },
    {
      "source": "PropertySignature",
      "target": "callBaseSet"
    },
    {
      "source": "JsxAttributedNode",
      "target": "callBaseSet"
    },
    {
      "source": "JsxTagNamedNode",
      "target": "callBaseSet"
    },
    {
      "source": "JsxAttribute",
      "target": "callBaseSet"
    },
    {
      "source": "JsxElement",
      "target": "callBaseSet"
    },
    {
      "source": "JsxSelfClosingElement",
      "target": "callBaseSet"
    },
    {
      "source": "JsxSpreadAttribute",
      "target": "callBaseSet"
    },
    {
      "source": "VariableDeclaration",
      "target": "callBaseSet"
    },
    {
      "source": "createBase$d",
      "target": "AmbientableNode"
    },
    {
      "source": "createBase$e",
      "target": "AmbientableNode"
    },
    {
      "source": "createBase$g",
      "target": "AmbientableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "AmbientableNode"
    },
    {
      "source": "createBase$k",
      "target": "AmbientableNode"
    },
    {
      "source": "createBase$n",
      "target": "AmbientableNode"
    },
    {
      "source": "createBase$q",
      "target": "AmbientableNode"
    },
    {
      "source": "createBase$r",
      "target": "AmbientableNode"
    },
    {
      "source": "createBase$w",
      "target": "AmbientableNode"
    },
    {
      "source": "exp#: exports.AmbientableNode = AmbientableNode;",
      "target": "AmbientableNode"
    },
    {
      "source": "FormattingKind()",
      "target": "FormattingKind"
    },
    {
      "source": "FormattingKind()",
      "target": "FormattingKind"
    },
    {
      "source": "getClassMemberFormatting",
      "target": "FormattingKind"
    },
    {
      "source": "getClassMemberFormatting",
      "target": "FormattingKind"
    },
    {
      "source": "getClassMemberFormatting",
      "target": "FormattingKind"
    },
    {
      "source": "getFormattingKindText",
      "target": "FormattingKind"
    },
    {
      "source": "getFormattingKindText",
      "target": "FormattingKind"
    },
    {
      "source": "getFormattingKindText",
      "target": "FormattingKind"
    },
    {
      "source": "getFormattingKindText",
      "target": "FormattingKind"
    },
    {
      "source": "getInterfaceMemberFormatting",
      "target": "FormattingKind"
    },
    {
      "source": "getStatementedNodeChildFormatting",
      "target": "FormattingKind"
    },
    {
      "source": "getStatementedNodeChildFormatting",
      "target": "FormattingKind"
    },
    {
      "source": "getClausedNodeChildFormatting",
      "target": "FormattingKind"
    },
    {
      "source": "getNewInsertCode",
      "target": "FormattingKind"
    },
    {
      "source": "getNewInsertCode",
      "target": "FormattingKind"
    },
    {
      "source": "getSpacingBetweenNodes",
      "target": "FormattingKind"
    },
    {
      "source": "getSpacingBetweenNodes",
      "target": "FormattingKind"
    },
    {
      "source": "getSpacingBetweenNodes",
      "target": "FormattingKind"
    },
    {
      "source": "getSpacingBetweenNodes",
      "target": "FormattingKind"
    },
    {
      "source": "getSpacingBetweenNodes",
      "target": "FormattingKind"
    },
    {
      "source": "getSpacingBetweenNodes",
      "target": "FormattingKind"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "FormattingKind"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "FormattingKind"
    },
    {
      "source": "removeChildrenWithFormattingFromCollapsibleSyntaxList",
      "target": "FormattingKind"
    },
    {
      "source": "DecoratableNode",
      "target": "FormattingKind"
    },
    {
      "source": "DecoratableNode",
      "target": "FormattingKind"
    },
    {
      "source": "getDecoratorFormattingKind",
      "target": "FormattingKind"
    },
    {
      "source": "getDecoratorFormattingKind",
      "target": "FormattingKind"
    },
    {
      "source": "GeneratorableNode",
      "target": "FormattingKind"
    },
    {
      "source": "ModuledNode",
      "target": "FormattingKind"
    },
    {
      "source": "Decorator",
      "target": "FormattingKind"
    },
    {
      "source": "Decorator",
      "target": "FormattingKind"
    },
    {
      "source": "CommentEnumMember",
      "target": "FormattingKind"
    },
    {
      "source": "EnumMember",
      "target": "FormattingKind"
    },
    {
      "source": "getGeneralFormatting",
      "target": "getClassMemberFormatting"
    },
    {
      "source": "removeClassMembers",
      "target": "getClassMemberFormatting"
    },
    {
      "source": "getClassMemberFormatting",
      "target": "hasBody"
    },
    {
      "source": "getNewInsertCode",
      "target": "getFormattingKindText"
    },
    {
      "source": "getGeneralFormatting",
      "target": "getInterfaceMemberFormatting"
    },
    {
      "source": "removeInterfaceMembers",
      "target": "getInterfaceMemberFormatting"
    },
    {
      "source": "getStatementedNodeChildFormatting",
      "target": "hasBody$1"
    },
    {
      "source": "getGeneralFormatting",
      "target": "getStatementedNodeChildFormatting"
    },
    {
      "source": "removeStatementedNodeChildren",
      "target": "getStatementedNodeChildFormatting"
    },
    {
      "source": "removeClausedNodeChildren",
      "target": "getClausedNodeChildFormatting"
    },
    {
      "source": "ChildOrderableNode",
      "target": "getGeneralFormatting"
    },
    {
      "source": "Node",
      "target": "getTextFromTextChanges"
    },
    {
      "source": "SourceFile",
      "target": "getTextFromTextChanges"
    },
    {
      "source": "LanguageService",
      "target": "getTextFromTextChanges"
    },
    {
      "source": "DecoratableNode",
      "target": "getNewInsertCode"
    },
    {
      "source": "getAppendCommaPos",
      "target": "scanner"
    },
    {
      "source": "getAppendCommaPos",
      "target": "scanner"
    },
    {
      "source": "getAppendCommaPos",
      "target": "scanner"
    },
    {
      "source": "getAppendCommaPos",
      "target": "scanner"
    },
    {
      "source": "getAppendCommaPos",
      "target": "scanner"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "appendCommaToText"
    },
    {
      "source": "appendCommaToText",
      "target": "getAppendCommaPos"
    },
    {
      "source": "printTextWithSeparator",
      "target": "getAppendCommaPos"
    },
    {
      "source": "DecoratableNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "DecoratableNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "JSDocableNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ParameteredNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "TypeParameteredNode",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getEndIndexFromArray"
    },
    {
      "source": "getNextNonWhitespacePos",
      "target": "getNextMatchingPos"
    },
    {
      "source": "RemoveChildrenTextManipulator",
      "target": "getNextMatchingPos"
    },
    {
      "source": "Node",
      "target": "getNextMatchingPos"
    },
    {
      "source": "SourceFile",
      "target": "getNextMatchingPos"
    },
    {
      "source": "getPreviousNonWhitespacePos",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "getRealEnd",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "RemoveChildrenTextManipulator",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "Node",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "Node",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "SourceFile",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "JSDoc",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "JSDoc",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "JSDoc",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "JSDoc",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "getPreviousNonWhiteSpacePos",
      "target": "getPreviousMatchingPos"
    },
    {
      "source": "Node",
      "target": "getNextNonWhitespacePos"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "getPreviousNonWhitespacePos"
    },
    {
      "source": "Node",
      "target": "getPreviousNonWhitespacePos"
    },
    {
      "source": "getNextNonWhitespacePos",
      "target": "isNotWhitespace"
    },
    {
      "source": "getPreviousNonWhitespacePos",
      "target": "isNotWhitespace"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "getPosAtEndOfPreviousLine"
    },
    {
      "source": "ChangingChildOrderTextManipulator",
      "target": "getPosAtNextNonBlankLine"
    },
    {
      "source": "ChangingChildOrderTextManipulator",
      "target": "getPosAtNextNonBlankLine"
    },
    {
      "source": "ChangingChildOrderTextManipulator",
      "target": "getPosAtNextNonBlankLine"
    },
    {
      "source": "ChangingChildOrderTextManipulator",
      "target": "getPosAtNextNonBlankLine"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "getPosAtNextNonBlankLine"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "getPosAtNextNonBlankLine"
    },
    {
      "source": "getEndPosFromIndex",
      "target": "getPosAtStartOfLineOrNonWhitespace"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "getPosAtStartOfLineOrNonWhitespace"
    },
    {
      "source": "insertIntoBracesOrSourceFile",
      "target": "getInsertPosFromIndex"
    },
    {
      "source": "SyntaxList",
      "target": "getInsertPosFromIndex"
    },
    {
      "source": "insertIntoBracesOrSourceFile",
      "target": "getEndPosFromIndex"
    },
    {
      "source": "getInsertPosFromIndex",
      "target": "getParentContainerOrThrow"
    },
    {
      "source": "getEndPosFromIndex",
      "target": "getParentContainerOrThrow"
    },
    {
      "source": "fromMethodDeclarationOverload",
      "target": "fromAbstractableNode"
    },
    {
      "source": "fromFunctionDeclarationOverload",
      "target": "fromAmbientableNode"
    },
    {
      "source": "fromFunctionDeclarationOverload",
      "target": "fromExportableNode"
    },
    {
      "source": "fromMethodDeclarationOverload",
      "target": "fromStaticableNode"
    },
    {
      "source": "fromConstructorDeclarationOverload",
      "target": "fromScopedNode"
    },
    {
      "source": "fromMethodDeclarationOverload",
      "target": "fromScopedNode"
    },
    {
      "source": "fromMethodDeclarationOverload",
      "target": "fromQuestionTokenableNode"
    },
    {
      "source": "insertIntoBracesOrSourceFileWithGetChildrenWithComments",
      "target": "getNodesToReturn"
    },
    {
      "source": "ArgumentedNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "SyntaxList",
      "target": "getNodesToReturn"
    },
    {
      "source": "DecoratableNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "JSDocableNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "ParameteredNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "TypeParameteredNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "getNodesToReturn"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "getNodesToReturn"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "getNodesToReturn"
    },
    {
      "source": "ExportDeclaration",
      "target": "getNodesToReturn"
    },
    {
      "source": "ImportDeclaration",
      "target": "getNodesToReturn"
    },
    {
      "source": "JSDoc",
      "target": "getNodesToReturn"
    },
    {
      "source": "EnumDeclaration",
      "target": "getNodesToReturn"
    },
    {
      "source": "JsxAttributedNode",
      "target": "getNodesToReturn"
    },
    {
      "source": "VariableDeclarationList",
      "target": "getNodesToReturn"
    },
    {
      "source": "insertIntoBracesOrSourceFileWithGetChildren",
      "target": "getRangeWithoutCommentsFromArray"
    },
    {
      "source": "insertOverloads",
      "target": "getRangeWithoutCommentsFromArray"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "fromConstructorDeclarationOverload"
    },
    {
      "source": "MethodDeclaration",
      "target": "fromMethodDeclarationOverload"
    },
    {
      "source": "FunctionDeclaration",
      "target": "fromFunctionDeclarationOverload"
    },
    {
      "source": "insertIntoBracesOrSourceFileWithGetChildren",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "insertIntoBracesOrSourceFileWithGetChildrenWithComments",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ArgumentedNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ArgumentedNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "SyntaxList",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "DecoratableNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "JSDocableNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ParameteredNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "TypeParameteredNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "StatementedNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "CaseBlock",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ExportDeclaration",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "ImportDeclaration",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "insertOverloads",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "JSDoc",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "EnumDeclaration",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "HeritageClause",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "JsxAttributedNode",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "VariableDeclarationList",
      "target": "verifyAndGetIndex"
    },
    {
      "source": "CompilerCommentStatement",
      "target": "CompilerCommentNode"
    },
    {
      "source": "CompilerCommentClassElement",
      "target": "CompilerCommentNode"
    },
    {
      "source": "CompilerCommentTypeElement",
      "target": "CompilerCommentNode"
    },
    {
      "source": "CompilerCommentObjectLiteralElement",
      "target": "CompilerCommentNode"
    },
    {
      "source": "CompilerCommentEnumMember",
      "target": "CompilerCommentNode"
    },
    {
      "source": "exp#: exports.CompilerCommentNode = CompilerCommentNode;",
      "target": "CompilerCommentNode"
    },
    {
      "source": "getNodes",
      "target": "CompilerCommentStatement"
    },
    {
      "source": "exp#: exports.CompilerCommentStatement = CompilerComment",
      "target": "CompilerCommentStatement"
    },
    {
      "source": "getNodes",
      "target": "CompilerCommentClassElement"
    },
    {
      "source": "exp#: exports.CompilerCommentClassElement = CompilerComm",
      "target": "CompilerCommentClassElement"
    },
    {
      "source": "getNodes",
      "target": "CompilerCommentTypeElement"
    },
    {
      "source": "exp#: exports.CompilerCommentTypeElement = CompilerComme",
      "target": "CompilerCommentTypeElement"
    },
    {
      "source": "getNodes",
      "target": "CompilerCommentObjectLiteralElement"
    },
    {
      "source": "exp#: exports.CompilerCommentObjectLiteralElement = Comp",
      "target": "CompilerCommentObjectLiteralElement"
    },
    {
      "source": "getNodes",
      "target": "CompilerCommentEnumMember"
    },
    {
      "source": "exp#: exports.CompilerCommentEnumMember = CompilerCommen",
      "target": "CompilerCommentEnumMember"
    },
    {
      "source": "CommentKind()",
      "target": "CommentKind"
    },
    {
      "source": "CommentKind()",
      "target": "CommentKind"
    },
    {
      "source": "getNodes",
      "target": "CommentKind"
    },
    {
      "source": "getNodes",
      "target": "CommentKind"
    },
    {
      "source": "getNodes",
      "target": "CommentKind"
    },
    {
      "source": "getNodes",
      "target": "CommentKind"
    },
    {
      "source": "getNodes",
      "target": "CommentKind"
    },
    {
      "source": "getNodes",
      "target": "CommentKind"
    },
    {
      "source": "CommentNodeParser",
      "target": "childrenSaver"
    },
    {
      "source": "CommentNodeParser",
      "target": "childrenSaver"
    },
    {
      "source": "CommentNodeParser",
      "target": "childrenSaver"
    },
    {
      "source": "CommentNodeParser",
      "target": "commentNodeParserKinds"
    },
    {
      "source": "getNodes",
      "target": "CommentNodeParser"
    },
    {
      "source": "ExtendedParser",
      "target": "CommentNodeParser"
    },
    {
      "source": "ExtendedParser",
      "target": "CommentNodeParser"
    },
    {
      "source": "ExtendedParser",
      "target": "CommentNodeParser"
    },
    {
      "source": "ExtendedParser",
      "target": "CommentNodeParser"
    },
    {
      "source": "ExtendedParser",
      "target": "CommentNodeParser"
    },
    {
      "source": "ExtendedParser",
      "target": "CommentNodeParser"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentNodeParser"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentNodeParser"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentNodeParser"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentNodeParser"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentNodeParser"
    },
    {
      "source": "CommentNodeParser",
      "target": "getNodes"
    },
    {
      "source": "CommentNodeParser",
      "target": "isSyntaxList"
    },
    {
      "source": "CommentNodeParser",
      "target": "isSyntaxList"
    },
    {
      "source": "getNodes",
      "target": "isStatementContainerNode"
    },
    {
      "source": "ExtendedParser",
      "target": "hasParsedTokens"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "hasParsedTokens"
    },
    {
      "source": "Node",
      "target": "hasParsedTokens"
    },
    {
      "source": "Node",
      "target": "hasParsedTokens"
    },
    {
      "source": "ExtendedParser",
      "target": "forEachChildSaver"
    },
    {
      "source": "ExtendedParser",
      "target": "forEachChildSaver"
    },
    {
      "source": "ExtendedParser",
      "target": "getChildrenSaver"
    },
    {
      "source": "ExtendedParser",
      "target": "getChildrenSaver"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "ExtendedParser"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "ExtendedParser"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "ExtendedParser"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "ExtendedParser"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "ExtendedParser"
    },
    {
      "source": "NodeHandlerHelper",
      "target": "ExtendedParser"
    },
    {
      "source": "UnwrapParentHandler",
      "target": "ExtendedParser"
    },
    {
      "source": "Node",
      "target": "ExtendedParser"
    },
    {
      "source": "Node",
      "target": "ExtendedParser"
    },
    {
      "source": "getCompilerDescendantsIterator",
      "target": "ExtendedParser"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "ExtendedParser"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "ExtendedParser"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "ExtendedParser"
    },
    {
      "source": "StatementedNode",
      "target": "ExtendedParser"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "ExtendedParser"
    },
    {
      "source": "EnumDeclaration",
      "target": "ExtendedParser"
    },
    {
      "source": "ExtendedParser",
      "target": "mergeInComments"
    },
    {
      "source": "ExtendedParser",
      "target": "mergeInComments"
    },
    {
      "source": "ModuledNode",
      "target": "isComment"
    },
    {
      "source": "ModuledNode",
      "target": "isComment"
    },
    {
      "source": "ModuledNode",
      "target": "isComment"
    },
    {
      "source": "StraightReplacementNodeHandler",
      "target": "NodeHandlerHelper"
    },
    {
      "source": "ChangeChildOrderParentHandler",
      "target": "NodeHandlerHelper"
    },
    {
      "source": "DefaultParentHandler",
      "target": "NodeHandlerHelper"
    },
    {
      "source": "ForgetChangedNodeHandler",
      "target": "NodeHandlerHelper"
    },
    {
      "source": "RangeHandler",
      "target": "NodeHandlerHelper"
    },
    {
      "source": "RangeParentHandler",
      "target": "NodeHandlerHelper"
    },
    {
      "source": "UnwrapParentHandler",
      "target": "NodeHandlerHelper"
    },
    {
      "source": "ChangeChildOrderParentHandler",
      "target": "StraightReplacementNodeHandler"
    },
    {
      "source": "DefaultParentHandler",
      "target": "StraightReplacementNodeHandler"
    },
    {
      "source": "ParentFinderReplacementNodeHandler",
      "target": "StraightReplacementNodeHandler"
    },
    {
      "source": "RangeHandler",
      "target": "StraightReplacementNodeHandler"
    },
    {
      "source": "RangeParentHandler",
      "target": "StraightReplacementNodeHandler"
    },
    {
      "source": "RenameNodeHandler",
      "target": "StraightReplacementNodeHandler"
    },
    {
      "source": "UnwrapParentHandler",
      "target": "StraightReplacementNodeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "StraightReplacementNodeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "ChangeChildOrderParentHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "DefaultParentHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "ForgetChangedNodeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "ParentFinderReplacementNodeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "ParentFinderReplacementNodeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "ParentFinderReplacementNodeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "ParentFinderReplacementNodeHandler"
    },
    {
      "source": "ParentFinderReplacementNodeHandler",
      "target": "areNodesEqual"
    },
    {
      "source": "ParentFinderReplacementNodeHandler",
      "target": "areNodesEqual"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "RangeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "RangeParentHandler"
    },
    {
      "source": "RangeParentHandler",
      "target": "getRealEnd"
    },
    {
      "source": "RangeParentHandler",
      "target": "getRealEnd"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "RenameNodeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "TryOrForgetNodeHandler"
    },
    {
      "source": "NodeHandlerFactory",
      "target": "UnwrapParentHandler"
    },
    {
      "source": "insertIntoParentTextRange",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "insertIntoTextRange",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "insertIntoBracesOrSourceFile",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "changeChildOrder",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "removeChildren",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "removeChildrenWithFormatting",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "unwrapNode",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "replaceNodeText",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "replaceSourceFileTextStraight",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "replaceSourceFileTextForRename",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "replaceTextPossiblyCreatingChildNodes",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "replaceSourceFileForFilePathMove",
      "target": "NodeHandlerFactory"
    },
    {
      "source": "ChangingChildOrderTextManipulator",
      "target": "getSpacingBetweenNodes"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "getSpacingBetweenNodes"
    },
    {
      "source": "changeChildOrder",
      "target": "ChangingChildOrderTextManipulator"
    },
    {
      "source": "replaceSourceFileTextStraight",
      "target": "FullReplacementTextManipulator"
    },
    {
      "source": "InsertionTextManipulator",
      "target": "getTextForError"
    },
    {
      "source": "RemoveChildrenTextManipulator",
      "target": "getTextForError"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "getTextForError"
    },
    {
      "source": "UnwrapTextManipulator",
      "target": "InsertionTextManipulator"
    },
    {
      "source": "insertIntoParentTextRange",
      "target": "InsertionTextManipulator"
    },
    {
      "source": "insertIntoTextRange",
      "target": "InsertionTextManipulator"
    },
    {
      "source": "insertIntoBracesOrSourceFile",
      "target": "InsertionTextManipulator"
    },
    {
      "source": "replaceNodeText",
      "target": "InsertionTextManipulator"
    },
    {
      "source": "replaceTextPossiblyCreatingChildNodes",
      "target": "InsertionTextManipulator"
    },
    {
      "source": "removeChildren",
      "target": "RemoveChildrenTextManipulator"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "isNewLineAtPos"
    },
    {
      "source": "RemoveChildrenWithFormattingTextManipulator",
      "target": "isNewLineAtPos"
    },
    {
      "source": "Node",
      "target": "hasNewLineInRange"
    },
    {
      "source": "removeChildrenWithFormatting",
      "target": "RemoveChildrenWithFormattingTextManipulator"
    },
    {
      "source": "replaceSourceFileTextForRename",
      "target": "RenameLocationTextManipulator"
    },
    {
      "source": "replaceSourceFileForFilePathMove",
      "target": "UnchangedTextManipulator"
    },
    {
      "source": "unwrapNode",
      "target": "UnwrapTextManipulator"
    },
    {
      "source": "UnwrapTextManipulator",
      "target": "getReplacementText"
    },
    {
      "source": "doManipulation",
      "target": "ManipulationError"
    },
    {
      "source": "exp#: exports.ManipulationError = ManipulationError;",
      "target": "ManipulationError"
    },
    {
      "source": "insertIntoParentTextRange",
      "target": "doManipulation"
    },
    {
      "source": "insertIntoTextRange",
      "target": "doManipulation"
    },
    {
      "source": "insertIntoBracesOrSourceFile",
      "target": "doManipulation"
    },
    {
      "source": "changeChildOrder",
      "target": "doManipulation"
    },
    {
      "source": "removeChildren",
      "target": "doManipulation"
    },
    {
      "source": "removeChildrenWithFormatting",
      "target": "doManipulation"
    },
    {
      "source": "unwrapNode",
      "target": "doManipulation"
    },
    {
      "source": "replaceNodeText",
      "target": "doManipulation"
    },
    {
      "source": "replaceSourceFileTextStraight",
      "target": "doManipulation"
    },
    {
      "source": "replaceSourceFileTextForRename",
      "target": "doManipulation"
    },
    {
      "source": "replaceTextPossiblyCreatingChildNodes",
      "target": "doManipulation"
    },
    {
      "source": "replaceSourceFileForFilePathMove",
      "target": "doManipulation"
    },
    {
      "source": "doManipulation",
      "target": "getSyntacticDiagnostics"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ArgumentedNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "AwaitableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "Node",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "insertWhiteSpaceTextAtPos",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "SyntaxList",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "setBodyTextForNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "BodyableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "BodyableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "DecoratableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExclamationTokenableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ModifierableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "GeneratorableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "apply$1",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "JSDocableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "addNameNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "addNameNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ReturnTypedNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "TextInsertableNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "TypedNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "TypeParameteredNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "PropertyAssignment",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "PropertyAssignment",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "setEmptyNamedExport",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ExportSpecifier",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportClause",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "setEmptyNamedImport",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "setEmptyNamedImport",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "setEmptyNamedImport",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportSpecifier",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ModuleDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "insertOverloads",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ParameterDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "addParensIfNecessary",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "Decorator",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "Decorator",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "JSDoc",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "JSDocTag",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "ImportTypeNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "JsxAttributedNode",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "JsxAttribute",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "setText",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "TaggedTemplateExpression",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "VariableDeclarationList",
      "target": "insertIntoParentTextRange"
    },
    {
      "source": "SourceFile",
      "target": "insertIntoTextRange"
    },
    {
      "source": "ArgumentedNode",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "ParameteredNode",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "TypeParameteredNode",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "ExportDeclaration",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "ImportDeclaration",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "EnumDeclaration",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "VariableDeclarationList",
      "target": "insertIntoCommaSeparatedNodes"
    },
    {
      "source": "insertIntoBracesOrSourceFileWithGetChildren",
      "target": "insertIntoBracesOrSourceFile"
    },
    {
      "source": "insertIntoBracesOrSourceFileWithGetChildrenWithComments",
      "target": "insertIntoBracesOrSourceFile"
    },
    {
      "source": "insertChildren",
      "target": "insertIntoBracesOrSourceFileWithGetChildren"
    },
    {
      "source": "StatementedNode",
      "target": "insertIntoBracesOrSourceFileWithGetChildren"
    },
    {
      "source": "insertChildren$1",
      "target": "insertIntoBracesOrSourceFileWithGetChildren"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "insertIntoBracesOrSourceFileWithGetChildrenWithComments"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "insertIntoBracesOrSourceFileWithGetChildrenWithComments"
    },
    {
      "source": "ChildOrderableNode",
      "target": "changeChildOrder"
    },
    {
      "source": "removeClassMember",
      "target": "removeChildren"
    },
    {
      "source": "removeCommaSeparatedChild",
      "target": "removeChildren"
    },
    {
      "source": "removeOverloadableStatementedNodeChild",
      "target": "removeChildren"
    },
    {
      "source": "AwaitableNode",
      "target": "removeChildren"
    },
    {
      "source": "ExclamationTokenableNode",
      "target": "removeChildren"
    },
    {
      "source": "ModifierableNode",
      "target": "removeChildren"
    },
    {
      "source": "apply$1",
      "target": "removeChildren"
    },
    {
      "source": "NameableNodeInternal",
      "target": "removeChildren"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "removeChildren"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "removeChildren"
    },
    {
      "source": "ReturnTypedNode",
      "target": "removeChildren"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "removeChildren"
    },
    {
      "source": "TypedNode",
      "target": "removeChildren"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "removeChildren"
    },
    {
      "source": "ExportDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "ExportDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "ExportSpecifier",
      "target": "removeChildren"
    },
    {
      "source": "ImportClause",
      "target": "removeChildren"
    },
    {
      "source": "ImportDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "ImportDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "ImportDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "ImportDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "ImportDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "ImportSpecifier",
      "target": "removeChildren"
    },
    {
      "source": "ModuleDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "ParameterDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "Decorator",
      "target": "removeChildren"
    },
    {
      "source": "JSDoc",
      "target": "removeChildren"
    },
    {
      "source": "JSDocTag",
      "target": "removeChildren"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "removeConstraintOrDefault",
      "target": "removeChildren"
    },
    {
      "source": "HeritageClause",
      "target": "removeChildren"
    },
    {
      "source": "HeritageClause",
      "target": "removeChildren"
    },
    {
      "source": "JsxAttribute",
      "target": "removeChildren"
    },
    {
      "source": "JsxAttribute",
      "target": "removeChildren"
    },
    {
      "source": "JsxSpreadAttribute",
      "target": "removeChildren"
    },
    {
      "source": "VariableDeclaration",
      "target": "removeChildren"
    },
    {
      "source": "Decorator",
      "target": "removeChildrenWithFormattingFromCollapsibleSyntaxList"
    },
    {
      "source": "removeChildrenWithFormattingFromCollapsibleSyntaxList",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "removeChildrenWithFormattingFromCollapsibleSyntaxList",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "removeClassMembers",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "removeInterfaceMembers",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "removeStatementedNodeChildren",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "removeClausedNodeChildren",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "GeneratorableNode",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "ModuledNode",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "CommentEnumMember",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "EnumMember",
      "target": "removeChildrenWithFormatting"
    },
    {
      "source": "ClassElement",
      "target": "removeClassMember"
    },
    {
      "source": "removeClassMember",
      "target": "removeClassMembers"
    },
    {
      "source": "removeClassMember",
      "target": "removeClassMembers"
    },
    {
      "source": "removeClassMember",
      "target": "removeClassMembers"
    },
    {
      "source": "TypeElement",
      "target": "removeInterfaceMember"
    },
    {
      "source": "removeInterfaceMember",
      "target": "removeInterfaceMembers"
    },
    {
      "source": "ArgumentedNode",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "TypeArgumentedNode",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "ObjectLiteralElement",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "ExportSpecifier",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "ImportSpecifier",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "ParameterDeclaration",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "ClassElement",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "HeritageClause",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "VariableDeclaration",
      "target": "removeCommaSeparatedChild"
    },
    {
      "source": "FunctionDeclaration",
      "target": "removeOverloadableStatementedNodeChild"
    },
    {
      "source": "Statement",
      "target": "removeStatementedNodeChild"
    },
    {
      "source": "removeOverloadableStatementedNodeChild",
      "target": "removeStatementedNodeChildren"
    },
    {
      "source": "removeStatementedNodeChild",
      "target": "removeStatementedNodeChildren"
    },
    {
      "source": "StatementedNode",
      "target": "removeStatementedNodeChildren"
    },
    {
      "source": "IfStatement",
      "target": "removeStatementedNodeChildren"
    },
    {
      "source": "CaseClause",
      "target": "removeClausedNodeChild"
    },
    {
      "source": "DefaultClause",
      "target": "removeClausedNodeChild"
    },
    {
      "source": "removeClausedNodeChild",
      "target": "removeClausedNodeChildren"
    },
    {
      "source": "CaseBlock",
      "target": "removeClausedNodeChildren"
    },
    {
      "source": "UnwrappableNode",
      "target": "unwrapNode"
    },
    {
      "source": "SourceFile",
      "target": "replaceNodeText"
    },
    {
      "source": "BigIntLiteral",
      "target": "replaceNodeText"
    },
    {
      "source": "NumericLiteral",
      "target": "replaceNodeText"
    },
    {
      "source": "RegularExpressionLiteral",
      "target": "replaceNodeText"
    },
    {
      "source": "StringLiteral",
      "target": "replaceNodeText"
    },
    {
      "source": "NoSubstitutionTemplateLiteral",
      "target": "replaceNodeText"
    },
    {
      "source": "TemplateExpression",
      "target": "replaceNodeText"
    },
    {
      "source": "Node",
      "target": "replaceSourceFileTextForFormatting"
    },
    {
      "source": "SourceFile",
      "target": "replaceSourceFileTextForFormatting"
    },
    {
      "source": "SourceFile",
      "target": "replaceSourceFileTextForFormatting"
    },
    {
      "source": "replaceSourceFileTextForFormatting",
      "target": "replaceSourceFileTextStraight"
    },
    {
      "source": "Node",
      "target": "replaceSourceFileTextStraight"
    },
    {
      "source": "renameNode",
      "target": "replaceSourceFileTextForRename"
    },
    {
      "source": "JSDoc",
      "target": "replaceTextPossiblyCreatingChildNodes"
    },
    {
      "source": "replaceSourceFileForCacheUpdate",
      "target": "replaceSourceFileForFilePathMove"
    },
    {
      "source": "SourceFile",
      "target": "replaceSourceFileForFilePathMove"
    },
    {
      "source": "CompilerFactory",
      "target": "replaceSourceFileForCacheUpdate"
    },
    {
      "source": "createBase$2",
      "target": "ArgumentedNode"
    },
    {
      "source": "createBase$4",
      "target": "ArgumentedNode"
    },
    {
      "source": "exp#: exports.ArgumentedNode = ArgumentedNode;",
      "target": "ArgumentedNode"
    },
    {
      "source": "createBase$f",
      "target": "AsyncableNode"
    },
    {
      "source": "createBase$g",
      "target": "AsyncableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "AsyncableNode"
    },
    {
      "source": "createBase$h",
      "target": "AsyncableNode"
    },
    {
      "source": "createBase$j",
      "target": "AsyncableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "AsyncableNode"
    },
    {
      "source": "exp#: exports.AsyncableNode = AsyncableNode;",
      "target": "AsyncableNode"
    },
    {
      "source": "ForOfStatementBase",
      "target": "AwaitableNode"
    },
    {
      "source": "exp#: exports.AwaitableNode = AwaitableNode;",
      "target": "AwaitableNode"
    },
    {
      "source": "AwaitableNode",
      "target": "getAwaitInsertPos"
    },
    {
      "source": "setBodyTextForNode",
      "target": "getBodyText"
    },
    {
      "source": "JsxElement",
      "target": "getBodyText"
    },
    {
      "source": "BodiedNode",
      "target": "getBodyTextWithoutLeadingIndentation"
    },
    {
      "source": "BodyableNode",
      "target": "getBodyTextWithoutLeadingIndentation"
    },
    {
      "source": "JsxElement",
      "target": "getBodyTextWithoutLeadingIndentation"
    },
    {
      "source": "CommentRange",
      "target": "TextRange"
    },
    {
      "source": "FileReference",
      "target": "TextRange"
    },
    {
      "source": "exp#: exports.TextRange = TextRange;",
      "target": "TextRange"
    },
    {
      "source": "Node",
      "target": "CommentRange"
    },
    {
      "source": "exp#: exports.CommentRange = CommentRange;",
      "target": "CommentRange"
    },
    {
      "source": "nodeHasName",
      "target": "Node"
    },
    {
      "source": "nodeHasName",
      "target": "Node"
    },
    {
      "source": "checkNodeIsAmbient",
      "target": "Node"
    },
    {
      "source": "checkNodeIsAmbient",
      "target": "Node"
    },
    {
      "source": "SourceFileReferenceContainer",
      "target": "Node"
    },
    {
      "source": "SourceFileReferenceContainer",
      "target": "Node"
    },
    {
      "source": "SourceFileReferenceContainer",
      "target": "Node"
    },
    {
      "source": "SourceFileReferenceContainer",
      "target": "Node"
    },
    {
      "source": "getClassMemberFormatting",
      "target": "Node"
    },
    {
      "source": "hasBody",
      "target": "Node"
    },
    {
      "source": "hasBody",
      "target": "Node"
    },
    {
      "source": "hasBody$1",
      "target": "Node"
    },
    {
      "source": "hasBody$1",
      "target": "Node"
    },
    {
      "source": "hasBody$1",
      "target": "Node"
    },
    {
      "source": "hasBody$1",
      "target": "Node"
    },
    {
      "source": "hasBody$1",
      "target": "Node"
    },
    {
      "source": "getGeneralFormatting",
      "target": "Node"
    },
    {
      "source": "getGeneralFormatting",
      "target": "Node"
    },
    {
      "source": "getInsertPosFromIndex",
      "target": "Node"
    },
    {
      "source": "getInsertPosFromIndex",
      "target": "Node"
    },
    {
      "source": "getInsertPosFromIndex",
      "target": "Node"
    },
    {
      "source": "getEndPosFromIndex",
      "target": "Node"
    },
    {
      "source": "getEndPosFromIndex",
      "target": "Node"
    },
    {
      "source": "getEndPosFromIndex",
      "target": "Node"
    },
    {
      "source": "getParentContainerOrThrow",
      "target": "Node"
    },
    {
      "source": "getParentContainerOrThrow",
      "target": "Node"
    },
    {
      "source": "getParentContainerOrThrow",
      "target": "Node"
    },
    {
      "source": "getNodesToReturn",
      "target": "Node"
    },
    {
      "source": "TryOrForgetNodeHandler",
      "target": "Node"
    },
    {
      "source": "ChangingChildOrderTextManipulator",
      "target": "Node"
    },
    {
      "source": "getReplacementText",
      "target": "Node"
    },
    {
      "source": "getReplacementText",
      "target": "Node"
    },
    {
      "source": "getReplacementText",
      "target": "Node"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "Node"
    },
    {
      "source": "insertIntoCommaSeparatedNodes",
      "target": "Node"
    },
    {
      "source": "insertIntoBracesOrSourceFile",
      "target": "Node"
    },
    {
      "source": "insertIntoBracesOrSourceFileWithGetChildren",
      "target": "Node"
    },
    {
      "source": "removeClassMember",
      "target": "Node"
    },
    {
      "source": "removeClassMember",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isAnyKeyword = Node.is(common.SyntaxKind.AnyK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isAnyKeyword = Node.is(common.SyntaxKind.AnyK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isArrayBindingPattern = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isArrayBindingPattern = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isArrayLiteralExpression = Node.is(common.Syn",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isArrayLiteralExpression = Node.is(common.Syn",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isArrowFunction = Node.is(common.SyntaxKind.A",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isArrowFunction = Node.is(common.SyntaxKind.A",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isAsExpression = Node.is(common.SyntaxKind.As",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isAsExpression = Node.is(common.SyntaxKind.As",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isAwaitExpression = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isAwaitExpression = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBigIntLiteral = Node.is(common.SyntaxKind.B",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBigIntLiteral = Node.is(common.SyntaxKind.B",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBinaryExpression = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBinaryExpression = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBindingElement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBindingElement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBlock = Node.is(common.SyntaxKind.Block);",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBlock = Node.is(common.SyntaxKind.Block);",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBooleanKeyword = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBooleanKeyword = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBreakStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isBreakStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCallExpression = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCallExpression = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCaseBlock = Node.is(common.SyntaxKind.CaseB",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCaseBlock = Node.is(common.SyntaxKind.CaseB",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCaseClause = Node.is(common.SyntaxKind.Case",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCaseClause = Node.is(common.SyntaxKind.Case",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCatchClause = Node.is(common.SyntaxKind.Cat",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCatchClause = Node.is(common.SyntaxKind.Cat",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isClassDeclaration = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isClassDeclaration = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isClassExpression = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isClassExpression = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCommaListExpression = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isCommaListExpression = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isComputedPropertyName = Node.is(common.Synta",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isComputedPropertyName = Node.is(common.Synta",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isConditionalExpression = Node.is(common.Synt",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isConditionalExpression = Node.is(common.Synt",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isContinueStatement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isContinueStatement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDebuggerStatement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDebuggerStatement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDecorator = Node.is(common.SyntaxKind.Decor",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDecorator = Node.is(common.SyntaxKind.Decor",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDefaultClause = Node.is(common.SyntaxKind.D",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDefaultClause = Node.is(common.SyntaxKind.D",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDeleteExpression = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDeleteExpression = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDoStatement = Node.is(common.SyntaxKind.DoS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isDoStatement = Node.is(common.SyntaxKind.DoS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isElementAccessExpression = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isElementAccessExpression = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isEmptyStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isEmptyStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isEnumDeclaration = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isEnumDeclaration = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isEnumMember = Node.is(common.SyntaxKind.Enum",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isEnumMember = Node.is(common.SyntaxKind.Enum",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExportAssignment = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExportAssignment = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExportDeclaration = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExportDeclaration = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExportSpecifier = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExportSpecifier = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExpressionStatement = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExpressionStatement = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExpressionWithTypeArguments = Node.is(commo",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExpressionWithTypeArguments = Node.is(commo",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExternalModuleReference = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isExternalModuleReference = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isForInStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isForInStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isForOfStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isForOfStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isForStatement = Node.is(common.SyntaxKind.Fo",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isForStatement = Node.is(common.SyntaxKind.Fo",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isFunctionDeclaration = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isFunctionDeclaration = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isFunctionExpression = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isFunctionExpression = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isHeritageClause = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isHeritageClause = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isIdentifier = Node.is(common.SyntaxKind.Iden",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isIdentifier = Node.is(common.SyntaxKind.Iden",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isIfStatement = Node.is(common.SyntaxKind.IfS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isIfStatement = Node.is(common.SyntaxKind.IfS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isImportClause = Node.is(common.SyntaxKind.Im",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isImportClause = Node.is(common.SyntaxKind.Im",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isImportDeclaration = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isImportDeclaration = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isImportEqualsDeclaration = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isImportEqualsDeclaration = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isImportSpecifier = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isImportSpecifier = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isInferKeyword = Node.is(common.SyntaxKind.In",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isInferKeyword = Node.is(common.SyntaxKind.In",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isInterfaceDeclaration = Node.is(common.Synta",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isInterfaceDeclaration = Node.is(common.Synta",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocAugmentsTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocAugmentsTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocAuthorTag = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocAuthorTag = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocCallbackTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocCallbackTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocClassTag = Node.is(common.SyntaxKind.J",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocClassTag = Node.is(common.SyntaxKind.J",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocDeprecatedTag = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocDeprecatedTag = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocEnumTag = Node.is(common.SyntaxKind.JS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocEnumTag = Node.is(common.SyntaxKind.JS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocFunctionType = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocFunctionType = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocImplementsTag = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocImplementsTag = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocParameterTag = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocParameterTag = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocPrivateTag = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocPrivateTag = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocPropertyTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocPropertyTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocProtectedTag = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocProtectedTag = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocPublicTag = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocPublicTag = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocReadonlyTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocReadonlyTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocReturnTag = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocReturnTag = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocSeeTag = Node.is(common.SyntaxKind.JSD",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocSeeTag = Node.is(common.SyntaxKind.JSD",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocSignature = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocSignature = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocTemplateTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocTemplateTag = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocThisTag = Node.is(common.SyntaxKind.JS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocThisTag = Node.is(common.SyntaxKind.JS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocTypeExpression = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocTypeExpression = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocTypeTag = Node.is(common.SyntaxKind.JS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocTypeTag = Node.is(common.SyntaxKind.JS",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocTypedefTag = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJSDocTypedefTag = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxAttribute = Node.is(common.SyntaxKind.Js",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxAttribute = Node.is(common.SyntaxKind.Js",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxClosingElement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxClosingElement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxClosingFragment = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxClosingFragment = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxElement = Node.is(common.SyntaxKind.JsxE",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxElement = Node.is(common.SyntaxKind.JsxE",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxExpression = Node.is(common.SyntaxKind.J",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxExpression = Node.is(common.SyntaxKind.J",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxFragment = Node.is(common.SyntaxKind.Jsx",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxFragment = Node.is(common.SyntaxKind.Jsx",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxOpeningElement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxOpeningElement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxOpeningFragment = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxOpeningFragment = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxSelfClosingElement = Node.is(common.Synt",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxSelfClosingElement = Node.is(common.Synt",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxSpreadAttribute = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxSpreadAttribute = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxText = Node.is(common.SyntaxKind.JsxText",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isJsxText = Node.is(common.SyntaxKind.JsxText",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isLabeledStatement = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isLabeledStatement = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isMetaProperty = Node.is(common.SyntaxKind.Me",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isMetaProperty = Node.is(common.SyntaxKind.Me",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isMethodDeclaration = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isMethodDeclaration = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isMethodSignature = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isMethodSignature = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isModuleBlock = Node.is(common.SyntaxKind.Mod",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isModuleBlock = Node.is(common.SyntaxKind.Mod",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isModuleDeclaration = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isModuleDeclaration = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamedExports = Node.is(common.SyntaxKind.Na",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamedExports = Node.is(common.SyntaxKind.Na",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamedImports = Node.is(common.SyntaxKind.Na",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamedImports = Node.is(common.SyntaxKind.Na",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamedTupleMember = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamedTupleMember = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamespaceExport = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamespaceExport = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamespaceImport = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNamespaceImport = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNeverKeyword = Node.is(common.SyntaxKind.Ne",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNeverKeyword = Node.is(common.SyntaxKind.Ne",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNewExpression = Node.is(common.SyntaxKind.N",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNewExpression = Node.is(common.SyntaxKind.N",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNoSubstitutionTemplateLiteral = Node.is(com",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNoSubstitutionTemplateLiteral = Node.is(com",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNonNullExpression = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNonNullExpression = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNotEmittedStatement = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNotEmittedStatement = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNumberKeyword = Node.is(common.SyntaxKind.N",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNumberKeyword = Node.is(common.SyntaxKind.N",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNumericLiteral = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isNumericLiteral = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isObjectBindingPattern = Node.is(common.Synta",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isObjectBindingPattern = Node.is(common.Synta",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isObjectKeyword = Node.is(common.SyntaxKind.O",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isObjectKeyword = Node.is(common.SyntaxKind.O",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isObjectLiteralExpression = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isObjectLiteralExpression = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isOmittedExpression = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isOmittedExpression = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isParenthesizedExpression = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isParenthesizedExpression = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPartiallyEmittedExpression = Node.is(common",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPartiallyEmittedExpression = Node.is(common",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPostfixUnaryExpression = Node.is(common.Syn",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPostfixUnaryExpression = Node.is(common.Syn",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPrefixUnaryExpression = Node.is(common.Synt",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPrefixUnaryExpression = Node.is(common.Synt",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPrivateIdentifier = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPrivateIdentifier = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPropertyAccessExpression = Node.is(common.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPropertyAccessExpression = Node.is(common.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPropertyAssignment = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPropertyAssignment = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPropertyDeclaration = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPropertyDeclaration = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPropertySignature = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isPropertySignature = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isQualifiedName = Node.is(common.SyntaxKind.Q",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isQualifiedName = Node.is(common.SyntaxKind.Q",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isRegularExpressionLiteral = Node.is(common.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isRegularExpressionLiteral = Node.is(common.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isReturnStatement = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isReturnStatement = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSemicolonToken = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSemicolonToken = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isShorthandPropertyAssignment = Node.is(commo",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isShorthandPropertyAssignment = Node.is(commo",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSourceFile = Node.is(common.SyntaxKind.Sour",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSourceFile = Node.is(common.SyntaxKind.Sour",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSpreadAssignment = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSpreadAssignment = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSpreadElement = Node.is(common.SyntaxKind.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSpreadElement = Node.is(common.SyntaxKind.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isStringKeyword = Node.is(common.SyntaxKind.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isStringKeyword = Node.is(common.SyntaxKind.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isStringLiteral = Node.is(common.SyntaxKind.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isStringLiteral = Node.is(common.SyntaxKind.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSwitchStatement = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSwitchStatement = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSymbolKeyword = Node.is(common.SyntaxKind.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSymbolKeyword = Node.is(common.SyntaxKind.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSyntaxList = Node.is(common.SyntaxKind.Synt",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isSyntaxList = Node.is(common.SyntaxKind.Synt",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTaggedTemplateExpression = Node.is(common.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTaggedTemplateExpression = Node.is(common.S",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateExpression = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateExpression = Node.is(common.SyntaxK",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateHead = Node.is(common.SyntaxKind.Te",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateHead = Node.is(common.SyntaxKind.Te",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateMiddle = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateMiddle = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateSpan = Node.is(common.SyntaxKind.Te",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateSpan = Node.is(common.SyntaxKind.Te",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateTail = Node.is(common.SyntaxKind.Te",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTemplateTail = Node.is(common.SyntaxKind.Te",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isThrowStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isThrowStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTryStatement = Node.is(common.SyntaxKind.Tr",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTryStatement = Node.is(common.SyntaxKind.Tr",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTypeAliasDeclaration = Node.is(common.Synta",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTypeAliasDeclaration = Node.is(common.Synta",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTypeOfExpression = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isTypeOfExpression = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isUndefinedKeyword = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isUndefinedKeyword = Node.is(common.SyntaxKin",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isVariableDeclaration = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isVariableDeclaration = Node.is(common.Syntax",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isVariableDeclarationList = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isVariableDeclarationList = Node.is(common.Sy",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isVariableStatement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isVariableStatement = Node.is(common.SyntaxKi",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isVoidExpression = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isVoidExpression = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isWhileStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isWhileStatement = Node.is(common.SyntaxKind.",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isWithStatement = Node.is(common.SyntaxKind.W",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isWithStatement = Node.is(common.SyntaxKind.W",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isYieldExpression = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "exp#: Node.isYieldExpression = Node.is(common.SyntaxKind",
      "target": "Node"
    },
    {
      "source": "insertWhiteSpaceTextAtPos",
      "target": "Node"
    },
    {
      "source": "SyntaxList",
      "target": "Node"
    },
    {
      "source": "SyntaxList",
      "target": "Node"
    },
    {
      "source": "SyntaxList",
      "target": "Node"
    },
    {
      "source": "ExclamationTokenableNode",
      "target": "Node"
    },
    {
      "source": "ExportGetableNode",
      "target": "Node"
    },
    {
      "source": "ExportGetableNode",
      "target": "Node"
    },
    {
      "source": "ExportGetableNode",
      "target": "Node"
    },
    {
      "source": "ExportGetableNode",
      "target": "Node"
    },
    {
      "source": "apply",
      "target": "Node"
    },
    {
      "source": "apply",
      "target": "Node"
    },
    {
      "source": "apply",
      "target": "Node"
    },
    {
      "source": "apply",
      "target": "Node"
    },
    {
      "source": "apply",
      "target": "Node"
    },
    {
      "source": "apply",
      "target": "Node"
    },
    {
      "source": "apply",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "ModuledNode",
      "target": "Node"
    },
    {
      "source": "getNodeForReferences",
      "target": "Node"
    },
    {
      "source": "getNodeForReferences",
      "target": "Node"
    },
    {
      "source": "getNodeForReferences",
      "target": "Node"
    },
    {
      "source": "RenameableNode",
      "target": "Node"
    },
    {
      "source": "RenameableNode",
      "target": "Node"
    },
    {
      "source": "RenameableNode",
      "target": "Node"
    },
    {
      "source": "RenameableNode",
      "target": "Node"
    },
    {
      "source": "RenameableNode",
      "target": "Node"
    },
    {
      "source": "addNameNode",
      "target": "Node"
    },
    {
      "source": "addNameNode",
      "target": "Node"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "Node"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "Node"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "Node"
    },
    {
      "source": "QuestionDotTokenableNode",
      "target": "Node"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "Node"
    },
    {
      "source": "QuestionTokenableNode",
      "target": "Node"
    },
    {
      "source": "ScopeableNode",
      "target": "Node"
    },
    {
      "source": "getValidRange",
      "target": "Node"
    },
    {
      "source": "getValidRange",
      "target": "Node"
    },
    {
      "source": "getInsertPos",
      "target": "Node"
    },
    {
      "source": "getInsertPos",
      "target": "Node"
    },
    {
      "source": "ArrayBindingPattern",
      "target": "Node"
    },
    {
      "source": "BindingElementBase",
      "target": "Node"
    },
    {
      "source": "ObjectBindingPattern",
      "target": "Node"
    },
    {
      "source": "Expression",
      "target": "Node"
    },
    {
      "source": "ObjectLiteralElement",
      "target": "Node"
    },
    {
      "source": "StatementBase",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "StatementedNode",
      "target": "Node"
    },
    {
      "source": "addBodyIfNotExists",
      "target": "Node"
    },
    {
      "source": "CaseBlockBase",
      "target": "Node"
    },
    {
      "source": "CaseClauseBase",
      "target": "Node"
    },
    {
      "source": "CatchClauseBase",
      "target": "Node"
    },
    {
      "source": "DefaultClauseBase",
      "target": "Node"
    },
    {
      "source": "IfStatement",
      "target": "Node"
    },
    {
      "source": "ExportDeclaration",
      "target": "Node"
    },
    {
      "source": "ExportDeclaration",
      "target": "Node"
    },
    {
      "source": "ExportDeclaration",
      "target": "Node"
    },
    {
      "source": "ExportDeclaration",
      "target": "Node"
    },
    {
      "source": "ExportSpecifierBase",
      "target": "Node"
    },
    {
      "source": "ExportSpecifier",
      "target": "Node"
    },
    {
      "source": "ExternalModuleReferenceBase",
      "target": "Node"
    },
    {
      "source": "ExternalModuleReference",
      "target": "Node"
    },
    {
      "source": "ImportClauseBase",
      "target": "Node"
    },
    {
      "source": "ImportClause",
      "target": "Node"
    },
    {
      "source": "ImportClause",
      "target": "Node"
    },
    {
      "source": "ImportDeclaration",
      "target": "Node"
    },
    {
      "source": "ImportEqualsDeclaration",
      "target": "Node"
    },
    {
      "source": "ImportEqualsDeclaration",
      "target": "Node"
    },
    {
      "source": "ImportEqualsDeclaration",
      "target": "Node"
    },
    {
      "source": "ImportSpecifierBase",
      "target": "Node"
    },
    {
      "source": "ModuleChildableNode",
      "target": "Node"
    },
    {
      "source": "ModuleDeclaration",
      "target": "Node"
    },
    {
      "source": "ModuleDeclaration",
      "target": "Node"
    },
    {
      "source": "NamedExportsBase",
      "target": "Node"
    },
    {
      "source": "NamedImportsBase",
      "target": "Node"
    },
    {
      "source": "NamespaceExportBase",
      "target": "Node"
    },
    {
      "source": "NamespaceImportBase",
      "target": "Node"
    },
    {
      "source": "SourceFileBase",
      "target": "Node"
    },
    {
      "source": "getReferencingNodeFromStringLiteral",
      "target": "Node"
    },
    {
      "source": "ParameterDeclarationBase",
      "target": "Node"
    },
    {
      "source": "addParensIfNecessary",
      "target": "Node"
    },
    {
      "source": "ClassElement",
      "target": "Node"
    },
    {
      "source": "ClassElement",
      "target": "Node"
    },
    {
      "source": "ClassElement",
      "target": "Node"
    },
    {
      "source": "ClassElement",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Node"
    },
    {
      "source": "getAllMembers",
      "target": "Node"
    },
    {
      "source": "getAllMembers",
      "target": "Node"
    },
    {
      "source": "getAllMembers",
      "target": "Node"
    },
    {
      "source": "isClassPropertyType",
      "target": "Node"
    },
    {
      "source": "isClassPropertyType",
      "target": "Node"
    },
    {
      "source": "isClassPropertyType",
      "target": "Node"
    },
    {
      "source": "isClassPropertyType",
      "target": "Node"
    },
    {
      "source": "isSupportedClassMember",
      "target": "Node"
    },
    {
      "source": "isSupportedClassMember",
      "target": "Node"
    },
    {
      "source": "isSupportedClassMember",
      "target": "Node"
    },
    {
      "source": "isSupportedClassMember",
      "target": "Node"
    },
    {
      "source": "isSupportedClassMember",
      "target": "Node"
    },
    {
      "source": "ClassDeclaration",
      "target": "Node"
    },
    {
      "source": "getExtractedInterfaceAccessorStructure",
      "target": "Node"
    },
    {
      "source": "GetAccessorDeclaration",
      "target": "Node"
    },
    {
      "source": "SetAccessorDeclaration",
      "target": "Node"
    },
    {
      "source": "DecoratorBase",
      "target": "Node"
    },
    {
      "source": "Decorator",
      "target": "Node"
    },
    {
      "source": "Decorator",
      "target": "Node"
    },
    {
      "source": "JSDocBase",
      "target": "Node"
    },
    {
      "source": "JSDocTagBase",
      "target": "Node"
    },
    {
      "source": "TypeNode",
      "target": "Node"
    },
    {
      "source": "ImportTypeNode",
      "target": "Node"
    },
    {
      "source": "ImportTypeNode",
      "target": "Node"
    },
    {
      "source": "TypeParameterDeclarationBase",
      "target": "Node"
    },
    {
      "source": "CommentEnumMember",
      "target": "Node"
    },
    {
      "source": "EnumMemberBase",
      "target": "Node"
    },
    {
      "source": "HeritageClause",
      "target": "Node"
    },
    {
      "source": "TypeElement",
      "target": "Node"
    },
    {
      "source": "JsxAttributeBase",
      "target": "Node"
    },
    {
      "source": "JsxClosingElementBase",
      "target": "Node"
    },
    {
      "source": "JsxSpreadAttributeBase",
      "target": "Node"
    },
    {
      "source": "JsxTextBase",
      "target": "Node"
    },
    {
      "source": "TemplateHeadBase",
      "target": "Node"
    },
    {
      "source": "TemplateMiddleBase",
      "target": "Node"
    },
    {
      "source": "TemplateSpanBase",
      "target": "Node"
    },
    {
      "source": "TemplateTailBase",
      "target": "Node"
    },
    {
      "source": "ComputedPropertyNameBase",
      "target": "Node"
    },
    {
      "source": "PrivateIdentifierBase",
      "target": "Node"
    },
    {
      "source": "QualifiedName",
      "target": "Node"
    },
    {
      "source": "VariableDeclarationBase",
      "target": "Node"
    },
    {
      "source": "VariableDeclaration",
      "target": "Node"
    },
    {
      "source": "VariableDeclarationListBase",
      "target": "Node"
    },
    {
      "source": "Type",
      "target": "Node"
    },
    {
      "source": "TypeParameter",
      "target": "Node"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Node"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Node"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Node"
    },
    {
      "source": "CompilerFactory",
      "target": "Node"
    },
    {
      "source": "CompilerFactory",
      "target": "Node"
    },
    {
      "source": "CompilerFactory",
      "target": "Node"
    },
    {
      "source": "CompilerFactory",
      "target": "Node"
    },
    {
      "source": "CompilerFactory",
      "target": "Node"
    },
    {
      "source": "TypeGuards",
      "target": "Node"
    },
    {
      "source": "exp#: exports.Node = Node;",
      "target": "Node"
    },
    {
      "source": "Node",
      "target": "getWrappedCondition"
    },
    {
      "source": "Node",
      "target": "getWrappedCondition"
    },
    {
      "source": "Node",
      "target": "getWrappedCondition"
    },
    {
      "source": "Node",
      "target": "getWrappedCondition"
    },
    {
      "source": "Node",
      "target": "insertWhiteSpaceTextAtPos"
    },
    {
      "source": "Node",
      "target": "insertWhiteSpaceTextAtPos"
    },
    {
      "source": "Node",
      "target": "getCompilerForEachDescendantsIterator"
    },
    {
      "source": "Node",
      "target": "getCompilerForEachDescendantsIterator"
    },
    {
      "source": "Node",
      "target": "getCompilerDescendantsIterator"
    },
    {
      "source": "Node",
      "target": "getCompilerDescendantsIterator"
    },
    {
      "source": "Node",
      "target": "useParseTreeSearchForKind"
    },
    {
      "source": "Node",
      "target": "useParseTreeSearchForKind"
    },
    {
      "source": "Node",
      "target": "useParseTreeSearchForKind"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "SyntaxList"
    },
    {
      "source": "exp#: exports.SyntaxList = SyntaxList;",
      "target": "SyntaxList"
    },
    {
      "source": "RenameableNode",
      "target": "renameNode"
    },
    {
      "source": "ModuleDeclaration",
      "target": "renameNode"
    },
    {
      "source": "BodiedNode",
      "target": "setBodyTextForNode"
    },
    {
      "source": "BodyableNode",
      "target": "setBodyTextForNode"
    },
    {
      "source": "createBase$f",
      "target": "BodiedNode"
    },
    {
      "source": "createBase$h",
      "target": "BodiedNode"
    },
    {
      "source": "exp#: exports.BodiedNode = BodiedNode;",
      "target": "BodiedNode"
    },
    {
      "source": "createBase$d",
      "target": "BodyableNode"
    },
    {
      "source": "createBase$g",
      "target": "BodyableNode"
    },
    {
      "source": "createBase$j",
      "target": "BodyableNode"
    },
    {
      "source": "createBase$l",
      "target": "BodyableNode"
    },
    {
      "source": "createBase$m",
      "target": "BodyableNode"
    },
    {
      "source": "createBase$o",
      "target": "BodyableNode"
    },
    {
      "source": "exp#: exports.BodyableNode = BodyableNode;",
      "target": "BodyableNode"
    },
    {
      "source": "StatementBase",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$j",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$l",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createOverloadBase$2",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$m",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$n",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$o",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$t",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$u",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$v",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$x",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$y",
      "target": "ChildOrderableNode"
    },
    {
      "source": "exp#: exports.ChildOrderableNode = ChildOrderableNode;",
      "target": "ChildOrderableNode"
    },
    {
      "source": "createBase$i",
      "target": "DecoratableNode"
    },
    {
      "source": "createBase$j",
      "target": "DecoratableNode"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "DecoratableNode"
    },
    {
      "source": "createBase$m",
      "target": "DecoratableNode"
    },
    {
      "source": "createBase$n",
      "target": "DecoratableNode"
    },
    {
      "source": "createBase$o",
      "target": "DecoratableNode"
    },
    {
      "source": "exp#: exports.DecoratableNode = DecoratableNode;",
      "target": "DecoratableNode"
    },
    {
      "source": "DecoratableNode",
      "target": "getDecoratorLines"
    },
    {
      "source": "DecoratableNode",
      "target": "getDecoratorFormattingKind"
    },
    {
      "source": "getDecoratorFormattingKind",
      "target": "areDecoratorsOnSameLine"
    },
    {
      "source": "createBase",
      "target": "DotDotDotTokenableNode"
    },
    {
      "source": "createBase$i",
      "target": "DotDotDotTokenableNode"
    },
    {
      "source": "createBase$p",
      "target": "DotDotDotTokenableNode"
    },
    {
      "source": "JsxExpressionBase",
      "target": "DotDotDotTokenableNode"
    },
    {
      "source": "exp#: exports.DotDotDotTokenableNode = DotDotDotTokenabl",
      "target": "DotDotDotTokenableNode"
    },
    {
      "source": "createBase$n",
      "target": "ExclamationTokenableNode"
    },
    {
      "source": "createBase$C",
      "target": "ExclamationTokenableNode"
    },
    {
      "source": "exp#: exports.ExclamationTokenableNode = ExclamationToke",
      "target": "ExclamationTokenableNode"
    },
    {
      "source": "createBase$d",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$e",
      "target": "ModifierableNode"
    },
    {
      "source": "FunctionLikeDeclaration",
      "target": "ModifierableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$h",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$i",
      "target": "ModifierableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "ModifierableNode"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "ModifierableNode"
    },
    {
      "source": "createOverloadBase$2",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$n",
      "target": "ModifierableNode"
    },
    {
      "source": "ConstructorTypeNodeBase",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$q",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$r",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$v",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$w",
      "target": "ModifierableNode"
    },
    {
      "source": "createBase$y",
      "target": "ModifierableNode"
    },
    {
      "source": "VariableDeclarationListBase",
      "target": "ModifierableNode"
    },
    {
      "source": "exp#: exports.ModifierableNode = ModifierableNode;",
      "target": "ModifierableNode"
    },
    {
      "source": "ModifierableNode",
      "target": "getAddAfterModifierTexts"
    },
    {
      "source": "ExportableNode",
      "target": "ExportGetableNode"
    },
    {
      "source": "createBase$C",
      "target": "ExportGetableNode"
    },
    {
      "source": "exp#: exports.ExportGetableNode = ExportGetableNode;",
      "target": "ExportGetableNode"
    },
    {
      "source": "ExportGetableNode",
      "target": "throwForNotModifierableNode"
    },
    {
      "source": "ExportGetableNode",
      "target": "throwForNotModifierableNode"
    },
    {
      "source": "createBase$d",
      "target": "ExportableNode"
    },
    {
      "source": "createBase$e",
      "target": "ExportableNode"
    },
    {
      "source": "createBase$g",
      "target": "ExportableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "ExportableNode"
    },
    {
      "source": "createBase$k",
      "target": "ExportableNode"
    },
    {
      "source": "createBase$q",
      "target": "ExportableNode"
    },
    {
      "source": "createBase$r",
      "target": "ExportableNode"
    },
    {
      "source": "createBase$w",
      "target": "ExportableNode"
    },
    {
      "source": "exp#: exports.ExportableNode = ExportableNode;",
      "target": "ExportableNode"
    },
    {
      "source": "ExportableNode",
      "target": "apply"
    },
    {
      "source": "InitializerExpressionableNodeStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "ModifierableNodeStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "ReturnTypedNodeStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "TypedNodeStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "BlankLineFormattingStructuresPrinter",
      "target": "Printer"
    },
    {
      "source": "CommaSeparatedStructuresPrinter",
      "target": "Printer"
    },
    {
      "source": "CommaNewLineSeparatedStructuresPrinter",
      "target": "Printer"
    },
    {
      "source": "NewLineFormattingStructuresPrinter",
      "target": "Printer"
    },
    {
      "source": "SpaceFormattingStructuresPrinter",
      "target": "Printer"
    },
    {
      "source": "NodePrinter",
      "target": "Printer"
    },
    {
      "source": "ClassMemberStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "StringStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "ObjectLiteralExpressionPropertyStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "TypeElementMemberedNodeStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "TypeElementMemberStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "StatementedNodeStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "StatementStructurePrinter",
      "target": "Printer"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "InitializerExpressionableNodeStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ModifierableNodeStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ReturnTypedNodeStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "TypedNodeStructurePrinter"
    },
    {
      "source": "ClassDeclarationStructurePrinter",
      "target": "BlankLineFormattingStructuresPrinter"
    },
    {
      "source": "GetAccessorDeclarationStructurePrinter",
      "target": "BlankLineFormattingStructuresPrinter"
    },
    {
      "source": "SetAccessorDeclarationStructurePrinter",
      "target": "BlankLineFormattingStructuresPrinter"
    },
    {
      "source": "EnumDeclarationStructurePrinter",
      "target": "BlankLineFormattingStructuresPrinter"
    },
    {
      "source": "InterfaceDeclarationStructurePrinter",
      "target": "BlankLineFormattingStructuresPrinter"
    },
    {
      "source": "ModuleDeclarationStructurePrinter",
      "target": "BlankLineFormattingStructuresPrinter"
    },
    {
      "source": "ParameterDeclarationStructurePrinter",
      "target": "CommaSeparatedStructuresPrinter"
    },
    {
      "source": "NamedImportExportSpecifierStructurePrinter",
      "target": "CommaSeparatedStructuresPrinter"
    },
    {
      "source": "TypeParameterDeclarationStructurePrinter",
      "target": "CommaSeparatedStructuresPrinter"
    },
    {
      "source": "VariableDeclarationStructurePrinter",
      "target": "CommaSeparatedStructuresPrinter"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "CommaSeparatedStructuresPrinter"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "CommaSeparatedStructuresPrinter"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "CommaSeparatedStructuresPrinter"
    },
    {
      "source": "VariableDeclarationList",
      "target": "CommaSeparatedStructuresPrinter"
    },
    {
      "source": "CommaSeparatedStructuresPrinter",
      "target": "printTextWithSeparator"
    },
    {
      "source": "CommaNewLineSeparatedStructuresPrinter",
      "target": "printTextWithSeparator"
    },
    {
      "source": "EnumMemberStructurePrinter",
      "target": "CommaNewLineSeparatedStructuresPrinter"
    },
    {
      "source": "ObjectLiteralExpressionPropertyStructurePrinter",
      "target": "CommaNewLineSeparatedStructuresPrinter"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "CommaNewLineSeparatedStructuresPrinter"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "CommaNewLineSeparatedStructuresPrinter"
    },
    {
      "source": "PropertyDeclarationStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "CallSignatureDeclarationStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "ConstructSignatureDeclarationStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "IndexSignatureDeclarationStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "MethodSignatureStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "PropertySignatureStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "ExportAssignmentStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "ExportDeclarationStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "ImportDeclarationStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "VariableStatementStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "TypeAliasDeclarationStructurePrinter",
      "target": "NewLineFormattingStructuresPrinter"
    },
    {
      "source": "JsxAttributedNode",
      "target": "SpaceFormattingStructuresPrinter"
    },
    {
      "source": "ClassDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "ConstructorDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "GetAccessorDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "MethodDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "PropertyDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "SetAccessorDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "DecoratorStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "JSDocStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "JSDocTagStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "EnumDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "EnumMemberStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "PropertyAssignmentStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "ShorthandPropertyAssignmentStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "SpreadAssignmentStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "FunctionDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "ParameterDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "CallSignatureDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "ConstructSignatureDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "IndexSignatureDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "InterfaceDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "MethodSignatureStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "PropertySignatureStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "JsxAttributeDeciderStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "JsxAttributeStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "JsxChildDeciderStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "JsxElementStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "JsxSelfClosingElementStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "JsxSpreadAttributeStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "ExportAssignmentStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "ExportDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "ImportDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "ModuleDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "NamedImportExportSpecifierStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "SourceFileStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "VariableStatementStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "TypeAliasDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "TypeParameterDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "VariableDeclarationStructurePrinter",
      "target": "NodePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ClassDeclarationStructurePrinter"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Structure"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Structure"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Structure"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "Structure"
    },
    {
      "source": "exp#: exports.Structure = Structure;",
      "target": "Structure"
    },
    {
      "source": "exp#: exports.forEachStructureChild = forEachStructureCh",
      "target": "forEachStructureChild"
    },
    {
      "source": "forEachStructureChild",
      "target": "forClassDeclaration"
    },
    {
      "source": "forClassDeclaration",
      "target": "forClassLikeDeclarationBase"
    },
    {
      "source": "forClassLikeDeclarationBase",
      "target": "forDecoratableNode"
    },
    {
      "source": "forGetAccessorDeclaration",
      "target": "forDecoratableNode"
    },
    {
      "source": "forMethodDeclaration",
      "target": "forDecoratableNode"
    },
    {
      "source": "forPropertyDeclaration",
      "target": "forDecoratableNode"
    },
    {
      "source": "forSetAccessorDeclaration",
      "target": "forDecoratableNode"
    },
    {
      "source": "forParameterDeclaration",
      "target": "forDecoratableNode"
    },
    {
      "source": "forClassLikeDeclarationBase",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forFunctionLikeDeclaration",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forConstructorDeclarationOverload",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forMethodDeclarationOverload",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forFunctionDeclarationOverload",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forCallSignatureDeclaration",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forConstructSignatureDeclaration",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forInterfaceDeclaration",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forMethodSignature",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forTypeAliasDeclaration",
      "target": "forTypeParameteredNode"
    },
    {
      "source": "forClassLikeDeclarationBase",
      "target": "forJSDocableNode"
    },
    {
      "source": "forFunctionLikeDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forConstructorDeclarationOverload",
      "target": "forJSDocableNode"
    },
    {
      "source": "forMethodDeclarationOverload",
      "target": "forJSDocableNode"
    },
    {
      "source": "forPropertyDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forEnumDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forEnumMember",
      "target": "forJSDocableNode"
    },
    {
      "source": "forFunctionDeclarationOverload",
      "target": "forJSDocableNode"
    },
    {
      "source": "forCallSignatureDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forConstructSignatureDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forIndexSignatureDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forInterfaceDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forMethodSignature",
      "target": "forJSDocableNode"
    },
    {
      "source": "forPropertySignature",
      "target": "forJSDocableNode"
    },
    {
      "source": "forModuleDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forVariableStatement",
      "target": "forJSDocableNode"
    },
    {
      "source": "forTypeAliasDeclaration",
      "target": "forJSDocableNode"
    },
    {
      "source": "forEachStructureChild",
      "target": "forConstructorDeclaration"
    },
    {
      "source": "forConstructorDeclaration",
      "target": "forFunctionLikeDeclaration"
    },
    {
      "source": "forGetAccessorDeclaration",
      "target": "forFunctionLikeDeclaration"
    },
    {
      "source": "forMethodDeclaration",
      "target": "forFunctionLikeDeclaration"
    },
    {
      "source": "forSetAccessorDeclaration",
      "target": "forFunctionLikeDeclaration"
    },
    {
      "source": "forFunctionDeclaration",
      "target": "forFunctionLikeDeclaration"
    },
    {
      "source": "forFunctionLikeDeclaration",
      "target": "forSignaturedDeclaration"
    },
    {
      "source": "forConstructorDeclarationOverload",
      "target": "forSignaturedDeclaration"
    },
    {
      "source": "forMethodDeclarationOverload",
      "target": "forSignaturedDeclaration"
    },
    {
      "source": "forFunctionDeclarationOverload",
      "target": "forSignaturedDeclaration"
    },
    {
      "source": "forCallSignatureDeclaration",
      "target": "forSignaturedDeclaration"
    },
    {
      "source": "forConstructSignatureDeclaration",
      "target": "forSignaturedDeclaration"
    },
    {
      "source": "forMethodSignature",
      "target": "forSignaturedDeclaration"
    },
    {
      "source": "forSignaturedDeclaration",
      "target": "forParameteredNode"
    },
    {
      "source": "forFunctionLikeDeclaration",
      "target": "forStatementedNode"
    },
    {
      "source": "forModuleDeclaration",
      "target": "forStatementedNode"
    },
    {
      "source": "forSourceFile",
      "target": "forStatementedNode"
    },
    {
      "source": "forEachStructureChild",
      "target": "forConstructorDeclarationOverload"
    },
    {
      "source": "forEachStructureChild",
      "target": "forGetAccessorDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forMethodDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forMethodDeclarationOverload"
    },
    {
      "source": "forEachStructureChild",
      "target": "forPropertyDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forSetAccessorDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forJSDoc"
    },
    {
      "source": "forEachStructureChild",
      "target": "forEnumDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forEnumMember"
    },
    {
      "source": "forEachStructureChild",
      "target": "forFunctionDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forFunctionDeclarationOverload"
    },
    {
      "source": "forEachStructureChild",
      "target": "forParameterDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forCallSignatureDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forConstructSignatureDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forIndexSignatureDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forInterfaceDeclaration"
    },
    {
      "source": "forInterfaceDeclaration",
      "target": "forTypeElementMemberedNode"
    },
    {
      "source": "forEachStructureChild",
      "target": "forMethodSignature"
    },
    {
      "source": "forEachStructureChild",
      "target": "forPropertySignature"
    },
    {
      "source": "forEachStructureChild",
      "target": "forJsxElement"
    },
    {
      "source": "forEachStructureChild",
      "target": "forJsxSelfClosingElement"
    },
    {
      "source": "forJsxSelfClosingElement",
      "target": "forJsxAttributedNode"
    },
    {
      "source": "forEachStructureChild",
      "target": "forExportDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forImportDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forModuleDeclaration"
    },
    {
      "source": "forEachStructureChild",
      "target": "forSourceFile"
    },
    {
      "source": "forEachStructureChild",
      "target": "forVariableStatement"
    },
    {
      "source": "forEachStructureChild",
      "target": "forTypeAliasDeclaration"
    },
    {
      "source": "forClassLikeDeclarationBase",
      "target": "forAll"
    },
    {
      "source": "forClassLikeDeclarationBase",
      "target": "forAll"
    },
    {
      "source": "forClassLikeDeclarationBase",
      "target": "forAll"
    },
    {
      "source": "forClassLikeDeclarationBase",
      "target": "forAll"
    },
    {
      "source": "forClassLikeDeclarationBase",
      "target": "forAll"
    },
    {
      "source": "forDecoratableNode",
      "target": "forAll"
    },
    {
      "source": "forConstructorDeclaration",
      "target": "forAll"
    },
    {
      "source": "forParameteredNode",
      "target": "forAll"
    },
    {
      "source": "forMethodDeclaration",
      "target": "forAll"
    },
    {
      "source": "forJSDoc",
      "target": "forAll"
    },
    {
      "source": "forEnumDeclaration",
      "target": "forAll"
    },
    {
      "source": "forFunctionDeclaration",
      "target": "forAll"
    },
    {
      "source": "forTypeElementMemberedNode",
      "target": "forAll"
    },
    {
      "source": "forTypeElementMemberedNode",
      "target": "forAll"
    },
    {
      "source": "forTypeElementMemberedNode",
      "target": "forAll"
    },
    {
      "source": "forTypeElementMemberedNode",
      "target": "forAll"
    },
    {
      "source": "forTypeElementMemberedNode",
      "target": "forAll"
    },
    {
      "source": "forVariableStatement",
      "target": "forAll"
    },
    {
      "source": "forTypeParameteredNode",
      "target": "forAllIfStructure"
    },
    {
      "source": "forJSDocableNode",
      "target": "forAllIfStructure"
    },
    {
      "source": "forExportDeclaration",
      "target": "forAllIfStructure"
    },
    {
      "source": "forImportDeclaration",
      "target": "forAllIfStructure"
    },
    {
      "source": "forStatementedNode",
      "target": "forAllUnknownKindIfStructure"
    },
    {
      "source": "forJsxElement",
      "target": "forAllUnknownKindIfStructure"
    },
    {
      "source": "forJsxElement",
      "target": "forAllUnknownKindIfStructure"
    },
    {
      "source": "forJsxAttributedNode",
      "target": "forAllUnknownKindIfStructure"
    },
    {
      "source": "forAll",
      "target": "ensureKind"
    },
    {
      "source": "forAllIfStructure",
      "target": "ensureKind"
    },
    {
      "source": "forAllIfStructure",
      "target": "isStructure"
    },
    {
      "source": "forAllUnknownKindIfStructure",
      "target": "isStructure"
    },
    {
      "source": "ClassMemberStructurePrinter",
      "target": "isLastNonWhitespaceCharCloseBrace"
    },
    {
      "source": "TypeElementMemberStructurePrinter",
      "target": "isLastNonWhitespaceCharCloseBrace"
    },
    {
      "source": "StatementStructurePrinter",
      "target": "isLastNonWhitespaceCharCloseBrace"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ClassMemberStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ConstructorDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "GetAccessorDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "MethodDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "PropertyDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "SetAccessorDeclarationStructurePrinter"
    },
    {
      "source": "ExtendsClauseableNode",
      "target": "StringStructurePrinter"
    },
    {
      "source": "ImplementsClauseableNode",
      "target": "StringStructurePrinter"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "StringStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "DecoratorStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "JSDocStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "JSDocTagStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "EnumDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "EnumMemberStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ObjectLiteralExpressionPropertyStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "PropertyAssignmentStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ShorthandPropertyAssignmentStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "SpreadAssignmentStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "FunctionDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ParameterDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "CallSignatureDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ConstructSignatureDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "IndexSignatureDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "InterfaceDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "MethodSignatureStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "PropertySignatureStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "TypeElementMemberedNodeStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "TypeElementMemberStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "JsxAttributeDeciderStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "JsxAttributeStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "JsxChildDeciderStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "JsxElementStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "JsxSelfClosingElementStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "JsxSpreadAttributeStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ExportAssignmentStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ExportDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ImportDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "ModuleDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "NamedImportExportSpecifierStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "SourceFileStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "StatementedNodeStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "StatementStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "VariableStatementStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "TypeAliasDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "TypeParameterDeclarationStructurePrinter"
    },
    {
      "source": "StructurePrinterFactory",
      "target": "VariableDeclarationStructurePrinter"
    },
    {
      "source": "createBase$w",
      "target": "ExtendsClauseableNode"
    },
    {
      "source": "exp#: exports.ExtendsClauseableNode = ExtendsClauseableN",
      "target": "ExtendsClauseableNode"
    },
    {
      "source": "YieldExpressionBase",
      "target": "GeneratorableNode"
    },
    {
      "source": "createBase$g",
      "target": "GeneratorableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "GeneratorableNode"
    },
    {
      "source": "createBase$h",
      "target": "GeneratorableNode"
    },
    {
      "source": "createBase$j",
      "target": "GeneratorableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "GeneratorableNode"
    },
    {
      "source": "exp#: exports.GeneratorableNode = GeneratorableNode;",
      "target": "GeneratorableNode"
    },
    {
      "source": "GeneratorableNode",
      "target": "getAsteriskInsertPos"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "HeritageClauseableNode"
    },
    {
      "source": "createBase$w",
      "target": "HeritageClauseableNode"
    },
    {
      "source": "exp#: exports.HeritageClauseableNode = HeritageClauseabl",
      "target": "HeritageClauseableNode"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "ImplementsClauseableNode"
    },
    {
      "source": "exp#: exports.ImplementsClauseableNode = ImplementsClaus",
      "target": "ImplementsClauseableNode"
    },
    {
      "source": "InitializerExpressionableNode",
      "target": "InitializerExpressionGetableNode"
    },
    {
      "source": "createBase$5",
      "target": "InitializerExpressionGetableNode"
    },
    {
      "source": "createBase$6",
      "target": "InitializerExpressionGetableNode"
    },
    {
      "source": "exp#: exports.InitializerExpressionGetableNode = Initial",
      "target": "InitializerExpressionGetableNode"
    },
    {
      "source": "createBase",
      "target": "InitializerExpressionableNode"
    },
    {
      "source": "createBase$i",
      "target": "InitializerExpressionableNode"
    },
    {
      "source": "createBase$n",
      "target": "InitializerExpressionableNode"
    },
    {
      "source": "createBase$s",
      "target": "InitializerExpressionableNode"
    },
    {
      "source": "createBase$y",
      "target": "InitializerExpressionableNode"
    },
    {
      "source": "createBase$C",
      "target": "InitializerExpressionableNode"
    },
    {
      "source": "exp#: exports.InitializerExpressionableNode = Initialize",
      "target": "InitializerExpressionableNode"
    },
    {
      "source": "InitializerExpressionableNode",
      "target": "apply$1"
    },
    {
      "source": "ExpressionStatementBase",
      "target": "JSDocableNode"
    },
    {
      "source": "LabeledStatementBase",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$c",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$d",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$e",
      "target": "JSDocableNode"
    },
    {
      "source": "FunctionLikeDeclaration",
      "target": "JSDocableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$h",
      "target": "JSDocableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "JSDocableNode"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "JSDocableNode"
    },
    {
      "source": "createOverloadBase$2",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$n",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$p",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$q",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$r",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$s",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$t",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$u",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$v",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$w",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$x",
      "target": "JSDocableNode"
    },
    {
      "source": "createBase$y",
      "target": "JSDocableNode"
    },
    {
      "source": "exp#: exports.JSDocableNode = JSDocableNode;",
      "target": "JSDocableNode"
    },
    {
      "source": "LiteralExpressionBase",
      "target": "LiteralLikeNode"
    },
    {
      "source": "JsxTextBase",
      "target": "LiteralLikeNode"
    },
    {
      "source": "TemplateHeadBase",
      "target": "LiteralLikeNode"
    },
    {
      "source": "TemplateMiddleBase",
      "target": "LiteralLikeNode"
    },
    {
      "source": "TemplateTailBase",
      "target": "LiteralLikeNode"
    },
    {
      "source": "exp#: exports.LiteralLikeNode = LiteralLikeNode;",
      "target": "LiteralLikeNode"
    },
    {
      "source": "createBase$d",
      "target": "ModuledNode"
    },
    {
      "source": "SourceFileBase",
      "target": "ModuledNode"
    },
    {
      "source": "exp#: exports.ModuledNode = ModuledNode;",
      "target": "ModuledNode"
    },
    {
      "source": "BindingNamedNode",
      "target": "NamedNodeBase"
    },
    {
      "source": "ModuleNamedNode",
      "target": "NamedNodeBase"
    },
    {
      "source": "NamedNode",
      "target": "NamedNodeBase"
    },
    {
      "source": "PropertyNamedNode",
      "target": "NamedNodeBase"
    },
    {
      "source": "exp#: exports.NamedNodeBase = NamedNodeBase;",
      "target": "NamedNodeBase"
    },
    {
      "source": "BindingNamedNode",
      "target": "ReferenceFindableNode"
    },
    {
      "source": "ModuleNamedNode",
      "target": "ReferenceFindableNode"
    },
    {
      "source": "NameableNode",
      "target": "ReferenceFindableNode"
    },
    {
      "source": "NamedNode",
      "target": "ReferenceFindableNode"
    },
    {
      "source": "PropertyNamedNode",
      "target": "ReferenceFindableNode"
    },
    {
      "source": "IdentifierBase",
      "target": "ReferenceFindableNode"
    },
    {
      "source": "PrivateIdentifierBase",
      "target": "ReferenceFindableNode"
    },
    {
      "source": "exp#: exports.ReferenceFindableNode = ReferenceFindableN",
      "target": "ReferenceFindableNode"
    },
    {
      "source": "ReferenceFindableNode",
      "target": "getNodeForReferences"
    },
    {
      "source": "ReferenceFindableNode",
      "target": "getNodeForReferences"
    },
    {
      "source": "BindingNamedNode",
      "target": "RenameableNode"
    },
    {
      "source": "ModuleNamedNode",
      "target": "RenameableNode"
    },
    {
      "source": "NameableNode",
      "target": "RenameableNode"
    },
    {
      "source": "NamedNode",
      "target": "RenameableNode"
    },
    {
      "source": "PropertyNamedNode",
      "target": "RenameableNode"
    },
    {
      "source": "NamespaceExportBase",
      "target": "RenameableNode"
    },
    {
      "source": "NamespaceImportBase",
      "target": "RenameableNode"
    },
    {
      "source": "IdentifierBase",
      "target": "RenameableNode"
    },
    {
      "source": "PrivateIdentifierBase",
      "target": "RenameableNode"
    },
    {
      "source": "exp#: exports.RenameableNode = RenameableNode;",
      "target": "RenameableNode"
    },
    {
      "source": "createBase",
      "target": "BindingNamedNode"
    },
    {
      "source": "createBase$i",
      "target": "BindingNamedNode"
    },
    {
      "source": "createBase$C",
      "target": "BindingNamedNode"
    },
    {
      "source": "exp#: exports.BindingNamedNode = BindingNamedNode;",
      "target": "BindingNamedNode"
    },
    {
      "source": "createBase$d",
      "target": "ModuleNamedNode"
    },
    {
      "source": "exp#: exports.ModuleNamedNode = ModuleNamedNode;",
      "target": "ModuleNamedNode"
    },
    {
      "source": "createBase$g",
      "target": "NameableNode"
    },
    {
      "source": "createBase$h",
      "target": "NameableNode"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "NameableNode"
    },
    {
      "source": "exp#: exports.NameableNode = NameableNode;",
      "target": "NameableNode"
    },
    {
      "source": "NameableNode",
      "target": "NameableNodeInternal"
    },
    {
      "source": "NameableNodeInternal",
      "target": "addNameNode"
    },
    {
      "source": "NameableNodeInternal",
      "target": "addNameNode"
    },
    {
      "source": "MetaPropertyBase",
      "target": "NamedNode"
    },
    {
      "source": "createBase$6",
      "target": "NamedNode"
    },
    {
      "source": "createBase$7",
      "target": "NamedNode"
    },
    {
      "source": "createBase$c",
      "target": "NamedNode"
    },
    {
      "source": "createBase$p",
      "target": "NamedNode"
    },
    {
      "source": "createBase$q",
      "target": "NamedNode"
    },
    {
      "source": "TypeParameterDeclarationBase",
      "target": "NamedNode"
    },
    {
      "source": "createBase$r",
      "target": "NamedNode"
    },
    {
      "source": "createBase$w",
      "target": "NamedNode"
    },
    {
      "source": "JsxAttributeBase",
      "target": "NamedNode"
    },
    {
      "source": "exp#: exports.NamedNode = NamedNode;",
      "target": "NamedNode"
    },
    {
      "source": "createBase$5",
      "target": "PropertyNamedNode"
    },
    {
      "source": "createBase$j",
      "target": "PropertyNamedNode"
    },
    {
      "source": "createBase$m",
      "target": "PropertyNamedNode"
    },
    {
      "source": "createBase$n",
      "target": "PropertyNamedNode"
    },
    {
      "source": "createBase$o",
      "target": "PropertyNamedNode"
    },
    {
      "source": "createBase$s",
      "target": "PropertyNamedNode"
    },
    {
      "source": "createBase$x",
      "target": "PropertyNamedNode"
    },
    {
      "source": "createBase$y",
      "target": "PropertyNamedNode"
    },
    {
      "source": "exp#: exports.PropertyNamedNode = PropertyNamedNode;",
      "target": "PropertyNamedNode"
    },
    {
      "source": "SignaturedDeclaration",
      "target": "ParameteredNode"
    },
    {
      "source": "exp#: exports.ParameteredNode = ParameteredNode;",
      "target": "ParameteredNode"
    },
    {
      "source": "createBase$2",
      "target": "QuestionDotTokenableNode"
    },
    {
      "source": "createBase$3",
      "target": "QuestionDotTokenableNode"
    },
    {
      "source": "createBase$7",
      "target": "QuestionDotTokenableNode"
    },
    {
      "source": "exp#: exports.QuestionDotTokenableNode = QuestionDotToke",
      "target": "QuestionDotTokenableNode"
    },
    {
      "source": "createBase$5",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createBase$6",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createBase$i",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createBase$j",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createBase$n",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createBase$p",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createBase$x",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createBase$y",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "exp#: exports.QuestionTokenableNode = QuestionTokenableN",
      "target": "QuestionTokenableNode"
    },
    {
      "source": "createBase$i",
      "target": "ReadonlyableNode"
    },
    {
      "source": "createBase$n",
      "target": "ReadonlyableNode"
    },
    {
      "source": "createBase$v",
      "target": "ReadonlyableNode"
    },
    {
      "source": "createBase$y",
      "target": "ReadonlyableNode"
    },
    {
      "source": "exp#: exports.ReadonlyableNode = ReadonlyableNode;",
      "target": "ReadonlyableNode"
    },
    {
      "source": "SignaturedDeclaration",
      "target": "ReturnTypedNode"
    },
    {
      "source": "createBase$v",
      "target": "ReturnTypedNode"
    },
    {
      "source": "exp#: exports.ReturnTypedNode = ReturnTypedNode;",
      "target": "ReturnTypedNode"
    },
    {
      "source": "createBase$i",
      "target": "ScopeableNode"
    },
    {
      "source": "exp#: exports.ScopeableNode = ScopeableNode;",
      "target": "ScopeableNode"
    },
    {
      "source": "ScopeableNode",
      "target": "getScopeForNode"
    },
    {
      "source": "ScopedNode",
      "target": "getScopeForNode"
    },
    {
      "source": "ScopedNode",
      "target": "getScopeForNode"
    },
    {
      "source": "exp#: exports.getScopeForNode = getScopeForNode;",
      "target": "getScopeForNode"
    },
    {
      "source": "ScopeableNode",
      "target": "setScopeForNode"
    },
    {
      "source": "ScopedNode",
      "target": "setScopeForNode"
    },
    {
      "source": "exp#: exports.setScopeForNode = setScopeForNode;",
      "target": "setScopeForNode"
    },
    {
      "source": "createBase$j",
      "target": "ScopedNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "ScopedNode"
    },
    {
      "source": "createBase$l",
      "target": "ScopedNode"
    },
    {
      "source": "createOverloadBase$2",
      "target": "ScopedNode"
    },
    {
      "source": "createBase$m",
      "target": "ScopedNode"
    },
    {
      "source": "createBase$n",
      "target": "ScopedNode"
    },
    {
      "source": "createBase$o",
      "target": "ScopedNode"
    },
    {
      "source": "exp#: exports.ScopedNode = ScopedNode;",
      "target": "ScopedNode"
    },
    {
      "source": "FunctionLikeDeclaration",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "createOverloadBase",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "createBase$h",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "createOverloadBase$1",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "createOverloadBase$2",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "FunctionOrConstructorTypeNodeBaseBase",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "JSDocFunctionTypeBase",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "createBase$t",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "createBase$u",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "createBase$x",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "exp#: exports.SignaturedDeclaration = SignaturedDeclarat",
      "target": "SignaturedDeclaration"
    },
    {
      "source": "createBase$j",
      "target": "StaticableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "StaticableNode"
    },
    {
      "source": "createBase$m",
      "target": "StaticableNode"
    },
    {
      "source": "createBase$n",
      "target": "StaticableNode"
    },
    {
      "source": "createBase$o",
      "target": "StaticableNode"
    },
    {
      "source": "exp#: exports.StaticableNode = StaticableNode;",
      "target": "StaticableNode"
    },
    {
      "source": "createBase$9",
      "target": "TextInsertableNode"
    },
    {
      "source": "CaseBlockBase",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$a",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$b",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$d",
      "target": "TextInsertableNode"
    },
    {
      "source": "SourceFileBase",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$f",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$g",
      "target": "TextInsertableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$h",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$j",
      "target": "TextInsertableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "TextInsertableNode"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$l",
      "target": "TextInsertableNode"
    },
    {
      "source": "createOverloadBase$2",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$m",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$o",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$r",
      "target": "TextInsertableNode"
    },
    {
      "source": "createBase$w",
      "target": "TextInsertableNode"
    },
    {
      "source": "exp#: exports.TextInsertableNode = TextInsertableNode;",
      "target": "TextInsertableNode"
    },
    {
      "source": "TextInsertableNode",
      "target": "getValidRange"
    },
    {
      "source": "TextInsertableNode",
      "target": "getValidRange"
    },
    {
      "source": "createBase$2",
      "target": "TypeArgumentedNode"
    },
    {
      "source": "createBase$4",
      "target": "TypeArgumentedNode"
    },
    {
      "source": "ImportTypeNodeBase",
      "target": "TypeArgumentedNode"
    },
    {
      "source": "exp#: exports.TypeArgumentedNode = TypeArgumentedNode;",
      "target": "TypeArgumentedNode"
    },
    {
      "source": "createBase$1",
      "target": "TypedNode"
    },
    {
      "source": "createBase$8",
      "target": "TypedNode"
    },
    {
      "source": "createBase$i",
      "target": "TypedNode"
    },
    {
      "source": "createBase$n",
      "target": "TypedNode"
    },
    {
      "source": "createBase$p",
      "target": "TypedNode"
    },
    {
      "source": "createBase$q",
      "target": "TypedNode"
    },
    {
      "source": "createBase$y",
      "target": "TypedNode"
    },
    {
      "source": "createBase$C",
      "target": "TypedNode"
    },
    {
      "source": "exp#: exports.TypedNode = TypedNode;",
      "target": "TypedNode"
    },
    {
      "source": "TypedNode",
      "target": "getSeparatorSyntaxKindForNode"
    },
    {
      "source": "TypedNode",
      "target": "getSeparatorSyntaxKindForNode"
    },
    {
      "source": "TypeLiteralNodeBase",
      "target": "TypeElementMemberedNode"
    },
    {
      "source": "createBase$w",
      "target": "TypeElementMemberedNode"
    },
    {
      "source": "exp#: exports.TypeElementMemberedNode = TypeElementMembe",
      "target": "TypeElementMemberedNode"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "insertChildren"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "insertChildren"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "insertChildren"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "insertChildren"
    },
    {
      "source": "TypeElementMemberedNode",
      "target": "insertChildren"
    },
    {
      "source": "FunctionLikeDeclaration",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createOverloadBase",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createBase$h",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "TypeParameteredNode"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createOverloadBase$2",
      "target": "TypeParameteredNode"
    },
    {
      "source": "FunctionTypeNodeBase",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createBase$q",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createBase$t",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createBase$u",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createBase$w",
      "target": "TypeParameteredNode"
    },
    {
      "source": "createBase$x",
      "target": "TypeParameteredNode"
    },
    {
      "source": "exp#: exports.TypeParameteredNode = TypeParameteredNode;",
      "target": "TypeParameteredNode"
    },
    {
      "source": "TypeParameteredNode",
      "target": "getInsertPos"
    },
    {
      "source": "createBase$d",
      "target": "UnwrappableNode"
    },
    {
      "source": "createBase$g",
      "target": "UnwrappableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "UnwrappableNode"
    },
    {
      "source": "exp#: exports.UnwrappableNode = UnwrappableNode;",
      "target": "UnwrappableNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ArrayBindingPattern"
    },
    {
      "source": "exp#: exports.ArrayBindingPattern = ArrayBindingPattern;",
      "target": "ArrayBindingPattern"
    },
    {
      "source": "BindingElementBase",
      "target": "createBase"
    },
    {
      "source": "BindingElement",
      "target": "BindingElementBase"
    },
    {
      "source": "exp#: exports.BindingElementBase = BindingElementBase;",
      "target": "BindingElementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "BindingElement"
    },
    {
      "source": "exp#: exports.BindingElement = BindingElement;",
      "target": "BindingElement"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ObjectBindingPattern"
    },
    {
      "source": "exp#: exports.ObjectBindingPattern = ObjectBindingPatter",
      "target": "ObjectBindingPattern"
    },
    {
      "source": "createBase$j",
      "target": "AbstractableNode"
    },
    {
      "source": "createOverloadBase$1",
      "target": "AbstractableNode"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "AbstractableNode"
    },
    {
      "source": "createBase$m",
      "target": "AbstractableNode"
    },
    {
      "source": "createBase$n",
      "target": "AbstractableNode"
    },
    {
      "source": "createBase$o",
      "target": "AbstractableNode"
    },
    {
      "source": "ConstructorTypeNodeBase",
      "target": "AbstractableNode"
    },
    {
      "source": "exp#: exports.AbstractableNode = AbstractableNode;",
      "target": "AbstractableNode"
    },
    {
      "source": "BinaryExpressionBase",
      "target": "Expression"
    },
    {
      "source": "UnaryExpression",
      "target": "Expression"
    },
    {
      "source": "AsExpressionBase",
      "target": "Expression"
    },
    {
      "source": "CommaListExpressionBase",
      "target": "Expression"
    },
    {
      "source": "ConditionalExpressionBase",
      "target": "Expression"
    },
    {
      "source": "OmittedExpressionBase",
      "target": "Expression"
    },
    {
      "source": "ParenthesizedExpressionBase",
      "target": "Expression"
    },
    {
      "source": "PartiallyEmittedExpressionBase",
      "target": "Expression"
    },
    {
      "source": "SpreadElementBase",
      "target": "Expression"
    },
    {
      "source": "YieldExpressionBase",
      "target": "Expression"
    },
    {
      "source": "ArrowFunctionBase",
      "target": "Expression"
    },
    {
      "source": "JsxClosingFragment",
      "target": "Expression"
    },
    {
      "source": "JsxExpressionBase",
      "target": "Expression"
    },
    {
      "source": "JsxOpeningElementBase",
      "target": "Expression"
    },
    {
      "source": "JsxOpeningFragment",
      "target": "Expression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Expression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Expression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Expression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Expression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Expression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Expression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Expression"
    },
    {
      "source": "exp#: exports.Expression = Expression;",
      "target": "Expression"
    },
    {
      "source": "BinaryExpression",
      "target": "BinaryExpressionBase"
    },
    {
      "source": "exp#: exports.BinaryExpressionBase = BinaryExpressionBas",
      "target": "BinaryExpressionBase"
    },
    {
      "source": "AssignmentExpressionBase",
      "target": "BinaryExpression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "BinaryExpression"
    },
    {
      "source": "exp#: exports.BinaryExpression = BinaryExpression;",
      "target": "BinaryExpression"
    },
    {
      "source": "AssignmentExpression",
      "target": "AssignmentExpressionBase"
    },
    {
      "source": "exp#: exports.AssignmentExpressionBase = AssignmentExpre",
      "target": "AssignmentExpressionBase"
    },
    {
      "source": "ArrayDestructuringAssignmentBase",
      "target": "AssignmentExpression"
    },
    {
      "source": "ObjectDestructuringAssignmentBase",
      "target": "AssignmentExpression"
    },
    {
      "source": "exp#: exports.AssignmentExpression = AssignmentExpressio",
      "target": "AssignmentExpression"
    },
    {
      "source": "ArrayDestructuringAssignment",
      "target": "ArrayDestructuringAssignmentBase"
    },
    {
      "source": "exp#: exports.ArrayDestructuringAssignmentBase = ArrayDe",
      "target": "ArrayDestructuringAssignmentBase"
    },
    {
      "source": "exp#: exports.ArrayDestructuringAssignment = ArrayDestru",
      "target": "ArrayDestructuringAssignment"
    },
    {
      "source": "UpdateExpression",
      "target": "UnaryExpression"
    },
    {
      "source": "AwaitExpressionBase",
      "target": "UnaryExpression"
    },
    {
      "source": "DeleteExpressionBase",
      "target": "UnaryExpression"
    },
    {
      "source": "PostfixUnaryExpressionBase",
      "target": "UnaryExpression"
    },
    {
      "source": "PrefixUnaryExpressionBase",
      "target": "UnaryExpression"
    },
    {
      "source": "TypeAssertionBase",
      "target": "UnaryExpression"
    },
    {
      "source": "TypeOfExpressionBase",
      "target": "UnaryExpression"
    },
    {
      "source": "VoidExpressionBase",
      "target": "UnaryExpression"
    },
    {
      "source": "exp#: exports.UnaryExpression = UnaryExpression;",
      "target": "UnaryExpression"
    },
    {
      "source": "LeftHandSideExpression",
      "target": "UpdateExpression"
    },
    {
      "source": "exp#: exports.UpdateExpression = UpdateExpression;",
      "target": "UpdateExpression"
    },
    {
      "source": "MemberExpression",
      "target": "LeftHandSideExpression"
    },
    {
      "source": "CallExpressionBase",
      "target": "LeftHandSideExpression"
    },
    {
      "source": "NonNullExpressionBase",
      "target": "LeftHandSideExpression"
    },
    {
      "source": "exp#: exports.LeftHandSideExpression = LeftHandSideExpre",
      "target": "LeftHandSideExpression"
    },
    {
      "source": "PrimaryExpression",
      "target": "MemberExpression"
    },
    {
      "source": "ElementAccessExpressionBase",
      "target": "MemberExpression"
    },
    {
      "source": "PropertyAccessExpressionBase",
      "target": "MemberExpression"
    },
    {
      "source": "TaggedTemplateExpression",
      "target": "MemberExpression"
    },
    {
      "source": "exp#: exports.MemberExpression = MemberExpression;",
      "target": "MemberExpression"
    },
    {
      "source": "ArrayLiteralExpression",
      "target": "PrimaryExpression"
    },
    {
      "source": "ImportExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "LiteralExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "MetaPropertyBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "NewExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "ObjectLiteralExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "SuperExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "ThisExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "FunctionExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "ClassExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "JsxElementBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "JsxFragment",
      "target": "PrimaryExpression"
    },
    {
      "source": "JsxSelfClosingElementBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "TrueLiteralBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "FalseLiteralBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "NullLiteralBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "TemplateExpressionBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "IdentifierBase",
      "target": "PrimaryExpression"
    },
    {
      "source": "exp#: exports.PrimaryExpression = PrimaryExpression;",
      "target": "PrimaryExpression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ArrayLiteralExpression"
    },
    {
      "source": "exp#: exports.ArrayLiteralExpression = ArrayLiteralExpre",
      "target": "ArrayLiteralExpression"
    },
    {
      "source": "YieldExpressionBase",
      "target": "ExpressionableNode"
    },
    {
      "source": "ReturnStatementBase",
      "target": "ExpressionableNode"
    },
    {
      "source": "ExternalModuleReferenceBase",
      "target": "ExpressionableNode"
    },
    {
      "source": "JsxExpressionBase",
      "target": "ExpressionableNode"
    },
    {
      "source": "exp#: exports.ExpressionableNode = ExpressionableNode;",
      "target": "ExpressionableNode"
    },
    {
      "source": "ExpressionedNode",
      "target": "BaseExpressionedNode"
    },
    {
      "source": "ImportExpressionedNode",
      "target": "BaseExpressionedNode"
    },
    {
      "source": "LeftHandSideExpressionedNode",
      "target": "BaseExpressionedNode"
    },
    {
      "source": "SuperExpressionedNode",
      "target": "BaseExpressionedNode"
    },
    {
      "source": "UnaryExpressionedNode",
      "target": "BaseExpressionedNode"
    },
    {
      "source": "exp#: exports.BaseExpressionedNode = BaseExpressionedNod",
      "target": "BaseExpressionedNode"
    },
    {
      "source": "createBase$1",
      "target": "ExpressionedNode"
    },
    {
      "source": "NonNullExpressionBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "SpreadAssignmentBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "ParenthesizedExpressionBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "PartiallyEmittedExpressionBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "SpreadElementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "createBase$a",
      "target": "ExpressionedNode"
    },
    {
      "source": "DoStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "ExpressionStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "ForInStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "ForOfStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "IfStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "SwitchStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "ThrowStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "ExportAssignmentBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "WhileStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "WithStatementBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "JsxSpreadAttributeBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "TemplateSpanBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "ComputedPropertyNameBase",
      "target": "ExpressionedNode"
    },
    {
      "source": "exp#: exports.ExpressionedNode = ExpressionedNode;",
      "target": "ExpressionedNode"
    },
    {
      "source": "exp#: exports.ImportExpressionedNode = ImportExpressione",
      "target": "ImportExpressionedNode"
    },
    {
      "source": "createBase$2",
      "target": "LeftHandSideExpressionedNode"
    },
    {
      "source": "createBase$3",
      "target": "LeftHandSideExpressionedNode"
    },
    {
      "source": "createBase$4",
      "target": "LeftHandSideExpressionedNode"
    },
    {
      "source": "createBase$7",
      "target": "LeftHandSideExpressionedNode"
    },
    {
      "source": "DecoratorBase",
      "target": "LeftHandSideExpressionedNode"
    },
    {
      "source": "ExpressionWithTypeArgumentsBase",
      "target": "LeftHandSideExpressionedNode"
    },
    {
      "source": "exp#: exports.LeftHandSideExpressionedNode = LeftHandSid",
      "target": "LeftHandSideExpressionedNode"
    },
    {
      "source": "SuperElementAccessExpressionBase",
      "target": "SuperExpressionedNode"
    },
    {
      "source": "SuperPropertyAccessExpressionBase",
      "target": "SuperExpressionedNode"
    },
    {
      "source": "exp#: exports.SuperExpressionedNode = SuperExpressionedN",
      "target": "SuperExpressionedNode"
    },
    {
      "source": "AwaitExpressionBase",
      "target": "UnaryExpressionedNode"
    },
    {
      "source": "DeleteExpressionBase",
      "target": "UnaryExpressionedNode"
    },
    {
      "source": "createBase$8",
      "target": "UnaryExpressionedNode"
    },
    {
      "source": "TypeOfExpressionBase",
      "target": "UnaryExpressionedNode"
    },
    {
      "source": "VoidExpressionBase",
      "target": "UnaryExpressionedNode"
    },
    {
      "source": "exp#: exports.UnaryExpressionedNode = UnaryExpressionedN",
      "target": "UnaryExpressionedNode"
    },
    {
      "source": "AsExpressionBase",
      "target": "createBase$1"
    },
    {
      "source": "AsExpression",
      "target": "AsExpressionBase"
    },
    {
      "source": "exp#: exports.AsExpressionBase = AsExpressionBase;",
      "target": "AsExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "AsExpression"
    },
    {
      "source": "exp#: exports.AsExpression = AsExpression;",
      "target": "AsExpression"
    },
    {
      "source": "AwaitExpression",
      "target": "AwaitExpressionBase"
    },
    {
      "source": "exp#: exports.AwaitExpressionBase = AwaitExpressionBase;",
      "target": "AwaitExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "AwaitExpression"
    },
    {
      "source": "exp#: exports.AwaitExpression = AwaitExpression;",
      "target": "AwaitExpression"
    },
    {
      "source": "CallExpressionBase",
      "target": "createBase$2"
    },
    {
      "source": "CallExpression",
      "target": "CallExpressionBase"
    },
    {
      "source": "exp#: exports.CallExpressionBase = CallExpressionBase;",
      "target": "CallExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "CallExpression"
    },
    {
      "source": "exp#: exports.CallExpression = CallExpression;",
      "target": "CallExpression"
    },
    {
      "source": "CommaListExpression",
      "target": "CommaListExpressionBase"
    },
    {
      "source": "exp#: exports.CommaListExpressionBase = CommaListExpress",
      "target": "CommaListExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "CommaListExpression"
    },
    {
      "source": "exp#: exports.CommaListExpression = CommaListExpression;",
      "target": "CommaListExpression"
    },
    {
      "source": "ConditionalExpression",
      "target": "ConditionalExpressionBase"
    },
    {
      "source": "exp#: exports.ConditionalExpressionBase = ConditionalExp",
      "target": "ConditionalExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ConditionalExpression"
    },
    {
      "source": "exp#: exports.ConditionalExpression = ConditionalExpress",
      "target": "ConditionalExpression"
    },
    {
      "source": "DeleteExpression",
      "target": "DeleteExpressionBase"
    },
    {
      "source": "exp#: exports.DeleteExpressionBase = DeleteExpressionBas",
      "target": "DeleteExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "DeleteExpression"
    },
    {
      "source": "exp#: exports.DeleteExpression = DeleteExpression;",
      "target": "DeleteExpression"
    },
    {
      "source": "ElementAccessExpressionBase",
      "target": "createBase$3"
    },
    {
      "source": "ElementAccessExpression",
      "target": "ElementAccessExpressionBase"
    },
    {
      "source": "exp#: exports.ElementAccessExpressionBase = ElementAcces",
      "target": "ElementAccessExpressionBase"
    },
    {
      "source": "SuperElementAccessExpressionBase",
      "target": "ElementAccessExpression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ElementAccessExpression"
    },
    {
      "source": "exp#: exports.ElementAccessExpression = ElementAccessExp",
      "target": "ElementAccessExpression"
    },
    {
      "source": "ImportExpression",
      "target": "ImportExpressionBase"
    },
    {
      "source": "exp#: exports.ImportExpressionBase = ImportExpressionBas",
      "target": "ImportExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ImportExpression"
    },
    {
      "source": "exp#: exports.ImportExpression = ImportExpression;",
      "target": "ImportExpression"
    },
    {
      "source": "LiteralExpression",
      "target": "LiteralExpressionBase"
    },
    {
      "source": "exp#: exports.LiteralExpressionBase = LiteralExpressionB",
      "target": "LiteralExpressionBase"
    },
    {
      "source": "BigIntLiteralBase",
      "target": "LiteralExpression"
    },
    {
      "source": "NumericLiteralBase",
      "target": "LiteralExpression"
    },
    {
      "source": "RegularExpressionLiteralBase",
      "target": "LiteralExpression"
    },
    {
      "source": "StringLiteralBase",
      "target": "LiteralExpression"
    },
    {
      "source": "NoSubstitutionTemplateLiteralBase",
      "target": "LiteralExpression"
    },
    {
      "source": "exp#: exports.LiteralExpression = LiteralExpression;",
      "target": "LiteralExpression"
    },
    {
      "source": "MetaProperty",
      "target": "MetaPropertyBase"
    },
    {
      "source": "exp#: exports.MetaPropertyBase = MetaPropertyBase;",
      "target": "MetaPropertyBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "MetaProperty"
    },
    {
      "source": "exp#: exports.MetaProperty = MetaProperty;",
      "target": "MetaProperty"
    },
    {
      "source": "NewExpressionBase",
      "target": "createBase$4"
    },
    {
      "source": "NewExpression",
      "target": "NewExpressionBase"
    },
    {
      "source": "exp#: exports.NewExpressionBase = NewExpressionBase;",
      "target": "NewExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NewExpression"
    },
    {
      "source": "exp#: exports.NewExpression = NewExpression;",
      "target": "NewExpression"
    },
    {
      "source": "NonNullExpression",
      "target": "NonNullExpressionBase"
    },
    {
      "source": "exp#: exports.NonNullExpressionBase = NonNullExpressionB",
      "target": "NonNullExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NonNullExpression"
    },
    {
      "source": "exp#: exports.NonNullExpression = NonNullExpression;",
      "target": "NonNullExpression"
    },
    {
      "source": "CommentObjectLiteralElement",
      "target": "ObjectLiteralElement"
    },
    {
      "source": "PropertyAssignmentBase",
      "target": "ObjectLiteralElement"
    },
    {
      "source": "ShorthandPropertyAssignmentBase",
      "target": "ObjectLiteralElement"
    },
    {
      "source": "SpreadAssignmentBase",
      "target": "ObjectLiteralElement"
    },
    {
      "source": "exp#: exports.ObjectLiteralElement = ObjectLiteralElemen",
      "target": "ObjectLiteralElement"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentObjectLiteralElement"
    },
    {
      "source": "exp#: exports.CommentObjectLiteralElement = CommentObjec",
      "target": "CommentObjectLiteralElement"
    },
    {
      "source": "ObjectDestructuringAssignment",
      "target": "ObjectDestructuringAssignmentBase"
    },
    {
      "source": "exp#: exports.ObjectDestructuringAssignmentBase = Object",
      "target": "ObjectDestructuringAssignmentBase"
    },
    {
      "source": "exp#: exports.ObjectDestructuringAssignment = ObjectDest",
      "target": "ObjectDestructuringAssignment"
    },
    {
      "source": "ObjectLiteralExpression",
      "target": "ObjectLiteralExpressionBase"
    },
    {
      "source": "exp#: exports.ObjectLiteralExpressionBase = ObjectLitera",
      "target": "ObjectLiteralExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ObjectLiteralExpression"
    },
    {
      "source": "exp#: exports.ObjectLiteralExpression = ObjectLiteralExp",
      "target": "ObjectLiteralExpression"
    },
    {
      "source": "PropertyAssignmentBase",
      "target": "createBase$5"
    },
    {
      "source": "PropertyAssignment",
      "target": "PropertyAssignmentBase"
    },
    {
      "source": "PropertyAssignment",
      "target": "PropertyAssignmentBase"
    },
    {
      "source": "PropertyAssignment",
      "target": "PropertyAssignmentBase"
    },
    {
      "source": "exp#: exports.PropertyAssignmentBase = PropertyAssignmen",
      "target": "PropertyAssignmentBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "PropertyAssignment"
    },
    {
      "source": "exp#: exports.PropertyAssignment = PropertyAssignment;",
      "target": "PropertyAssignment"
    },
    {
      "source": "ShorthandPropertyAssignmentBase",
      "target": "createBase$6"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "ShorthandPropertyAssignmentBase"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "ShorthandPropertyAssignmentBase"
    },
    {
      "source": "ShorthandPropertyAssignment",
      "target": "ShorthandPropertyAssignmentBase"
    },
    {
      "source": "exp#: exports.ShorthandPropertyAssignmentBase = Shorthan",
      "target": "ShorthandPropertyAssignmentBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ShorthandPropertyAssignment"
    },
    {
      "source": "exp#: exports.ShorthandPropertyAssignment = ShorthandPro",
      "target": "ShorthandPropertyAssignment"
    },
    {
      "source": "SpreadAssignment",
      "target": "SpreadAssignmentBase"
    },
    {
      "source": "SpreadAssignment",
      "target": "SpreadAssignmentBase"
    },
    {
      "source": "SpreadAssignment",
      "target": "SpreadAssignmentBase"
    },
    {
      "source": "exp#: exports.SpreadAssignmentBase = SpreadAssignmentBas",
      "target": "SpreadAssignmentBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "SpreadAssignment"
    },
    {
      "source": "exp#: exports.SpreadAssignment = SpreadAssignment;",
      "target": "SpreadAssignment"
    },
    {
      "source": "OmittedExpression",
      "target": "OmittedExpressionBase"
    },
    {
      "source": "exp#: exports.OmittedExpressionBase = OmittedExpressionB",
      "target": "OmittedExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "OmittedExpression"
    },
    {
      "source": "exp#: exports.OmittedExpression = OmittedExpression;",
      "target": "OmittedExpression"
    },
    {
      "source": "ParenthesizedExpression",
      "target": "ParenthesizedExpressionBase"
    },
    {
      "source": "exp#: exports.ParenthesizedExpressionBase = Parenthesize",
      "target": "ParenthesizedExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ParenthesizedExpression"
    },
    {
      "source": "exp#: exports.ParenthesizedExpression = ParenthesizedExp",
      "target": "ParenthesizedExpression"
    },
    {
      "source": "PartiallyEmittedExpression",
      "target": "PartiallyEmittedExpressionBase"
    },
    {
      "source": "exp#: exports.PartiallyEmittedExpressionBase = Partially",
      "target": "PartiallyEmittedExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "PartiallyEmittedExpression"
    },
    {
      "source": "exp#: exports.PartiallyEmittedExpression = PartiallyEmit",
      "target": "PartiallyEmittedExpression"
    },
    {
      "source": "PostfixUnaryExpression",
      "target": "PostfixUnaryExpressionBase"
    },
    {
      "source": "exp#: exports.PostfixUnaryExpressionBase = PostfixUnaryE",
      "target": "PostfixUnaryExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "PostfixUnaryExpression"
    },
    {
      "source": "exp#: exports.PostfixUnaryExpression = PostfixUnaryExpre",
      "target": "PostfixUnaryExpression"
    },
    {
      "source": "PrefixUnaryExpression",
      "target": "PrefixUnaryExpressionBase"
    },
    {
      "source": "exp#: exports.PrefixUnaryExpressionBase = PrefixUnaryExp",
      "target": "PrefixUnaryExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "PrefixUnaryExpression"
    },
    {
      "source": "exp#: exports.PrefixUnaryExpression = PrefixUnaryExpress",
      "target": "PrefixUnaryExpression"
    },
    {
      "source": "PropertyAccessExpressionBase",
      "target": "createBase$7"
    },
    {
      "source": "PropertyAccessExpression",
      "target": "PropertyAccessExpressionBase"
    },
    {
      "source": "exp#: exports.PropertyAccessExpressionBase = PropertyAcc",
      "target": "PropertyAccessExpressionBase"
    },
    {
      "source": "SuperPropertyAccessExpressionBase",
      "target": "PropertyAccessExpression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "PropertyAccessExpression"
    },
    {
      "source": "exp#: exports.PropertyAccessExpression = PropertyAccessE",
      "target": "PropertyAccessExpression"
    },
    {
      "source": "SpreadElement",
      "target": "SpreadElementBase"
    },
    {
      "source": "exp#: exports.SpreadElementBase = SpreadElementBase;",
      "target": "SpreadElementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "SpreadElement"
    },
    {
      "source": "exp#: exports.SpreadElement = SpreadElement;",
      "target": "SpreadElement"
    },
    {
      "source": "SuperElementAccessExpression",
      "target": "SuperElementAccessExpressionBase"
    },
    {
      "source": "exp#: exports.SuperElementAccessExpressionBase = SuperEl",
      "target": "SuperElementAccessExpressionBase"
    },
    {
      "source": "exp#: exports.SuperElementAccessExpression = SuperElemen",
      "target": "SuperElementAccessExpression"
    },
    {
      "source": "SuperExpression",
      "target": "SuperExpressionBase"
    },
    {
      "source": "exp#: exports.SuperExpressionBase = SuperExpressionBase;",
      "target": "SuperExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "SuperExpression"
    },
    {
      "source": "exp#: exports.SuperExpression = SuperExpression;",
      "target": "SuperExpression"
    },
    {
      "source": "SuperPropertyAccessExpression",
      "target": "SuperPropertyAccessExpressionBase"
    },
    {
      "source": "exp#: exports.SuperPropertyAccessExpressionBase = SuperP",
      "target": "SuperPropertyAccessExpressionBase"
    },
    {
      "source": "exp#: exports.SuperPropertyAccessExpression = SuperPrope",
      "target": "SuperPropertyAccessExpression"
    },
    {
      "source": "ThisExpression",
      "target": "ThisExpressionBase"
    },
    {
      "source": "exp#: exports.ThisExpressionBase = ThisExpressionBase;",
      "target": "ThisExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ThisExpression"
    },
    {
      "source": "exp#: exports.ThisExpression = ThisExpression;",
      "target": "ThisExpression"
    },
    {
      "source": "TypeAssertionBase",
      "target": "createBase$8"
    },
    {
      "source": "TypeAssertion",
      "target": "TypeAssertionBase"
    },
    {
      "source": "exp#: exports.TypeAssertionBase = TypeAssertionBase;",
      "target": "TypeAssertionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TypeAssertion"
    },
    {
      "source": "exp#: exports.TypeAssertion = TypeAssertion;",
      "target": "TypeAssertion"
    },
    {
      "source": "TypeOfExpression",
      "target": "TypeOfExpressionBase"
    },
    {
      "source": "exp#: exports.TypeOfExpressionBase = TypeOfExpressionBas",
      "target": "TypeOfExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TypeOfExpression"
    },
    {
      "source": "exp#: exports.TypeOfExpression = TypeOfExpression;",
      "target": "TypeOfExpression"
    },
    {
      "source": "VoidExpression",
      "target": "VoidExpressionBase"
    },
    {
      "source": "exp#: exports.VoidExpressionBase = VoidExpressionBase;",
      "target": "VoidExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "VoidExpression"
    },
    {
      "source": "exp#: exports.VoidExpression = VoidExpression;",
      "target": "VoidExpression"
    },
    {
      "source": "YieldExpression",
      "target": "YieldExpressionBase"
    },
    {
      "source": "exp#: exports.YieldExpressionBase = YieldExpressionBase;",
      "target": "YieldExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "YieldExpression"
    },
    {
      "source": "exp#: exports.YieldExpression = YieldExpression;",
      "target": "YieldExpression"
    },
    {
      "source": "Statement",
      "target": "StatementBase"
    },
    {
      "source": "exp#: exports.StatementBase = StatementBase;",
      "target": "StatementBase"
    },
    {
      "source": "BlockBase",
      "target": "Statement"
    },
    {
      "source": "BreakStatement",
      "target": "Statement"
    },
    {
      "source": "CommentStatement",
      "target": "Statement"
    },
    {
      "source": "ContinueStatement",
      "target": "Statement"
    },
    {
      "source": "DebuggerStatementBase",
      "target": "Statement"
    },
    {
      "source": "IterationStatement",
      "target": "Statement"
    },
    {
      "source": "EmptyStatementBase",
      "target": "Statement"
    },
    {
      "source": "ExpressionStatementBase",
      "target": "Statement"
    },
    {
      "source": "IfStatementBase",
      "target": "Statement"
    },
    {
      "source": "LabeledStatementBase",
      "target": "Statement"
    },
    {
      "source": "NotEmittedStatementBase",
      "target": "Statement"
    },
    {
      "source": "ReturnStatementBase",
      "target": "Statement"
    },
    {
      "source": "SwitchStatementBase",
      "target": "Statement"
    },
    {
      "source": "ThrowStatementBase",
      "target": "Statement"
    },
    {
      "source": "TryStatementBase",
      "target": "Statement"
    },
    {
      "source": "ExportAssignmentBase",
      "target": "Statement"
    },
    {
      "source": "ExportAssignment",
      "target": "Statement"
    },
    {
      "source": "ExportDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "ImportDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "ImportEqualsDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "ModuleBlockBase",
      "target": "Statement"
    },
    {
      "source": "ModuleDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "VariableStatementBase",
      "target": "Statement"
    },
    {
      "source": "WithStatementBase",
      "target": "Statement"
    },
    {
      "source": "FunctionDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "FunctionDeclarationOverloadBase",
      "target": "Statement"
    },
    {
      "source": "ClassDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "TypeAliasDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "EnumDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "InterfaceDeclarationBase",
      "target": "Statement"
    },
    {
      "source": "exp#: exports.Statement = Statement;",
      "target": "Statement"
    },
    {
      "source": "createBase$9",
      "target": "StatementedNode"
    },
    {
      "source": "createBase$a",
      "target": "StatementedNode"
    },
    {
      "source": "createBase$b",
      "target": "StatementedNode"
    },
    {
      "source": "ModuleBlockBase",
      "target": "StatementedNode"
    },
    {
      "source": "createBase$d",
      "target": "StatementedNode"
    },
    {
      "source": "SourceFileBase",
      "target": "StatementedNode"
    },
    {
      "source": "FunctionLikeDeclaration",
      "target": "StatementedNode"
    },
    {
      "source": "createBase$h",
      "target": "StatementedNode"
    },
    {
      "source": "exp#: exports.StatementedNode = StatementedNode;",
      "target": "StatementedNode"
    },
    {
      "source": "StatementedNode",
      "target": "addBodyIfNotExists"
    },
    {
      "source": "StatementedNode",
      "target": "addBodyIfNotExists"
    },
    {
      "source": "BlockBase",
      "target": "createBase$9"
    },
    {
      "source": "Block",
      "target": "BlockBase"
    },
    {
      "source": "exp#: exports.BlockBase = BlockBase;",
      "target": "BlockBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Block"
    },
    {
      "source": "exp#: exports.Block = Block;",
      "target": "Block"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "BreakStatement"
    },
    {
      "source": "exp#: exports.BreakStatement = BreakStatement;",
      "target": "BreakStatement"
    },
    {
      "source": "CaseBlock",
      "target": "CaseBlockBase"
    },
    {
      "source": "exp#: exports.CaseBlockBase = CaseBlockBase;",
      "target": "CaseBlockBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "CaseBlock"
    },
    {
      "source": "exp#: exports.CaseBlock = CaseBlock;",
      "target": "CaseBlock"
    },
    {
      "source": "CaseClauseBase",
      "target": "createBase$a"
    },
    {
      "source": "CaseClause",
      "target": "CaseClauseBase"
    },
    {
      "source": "exp#: exports.CaseClauseBase = CaseClauseBase;",
      "target": "CaseClauseBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "CaseClause"
    },
    {
      "source": "exp#: exports.CaseClause = CaseClause;",
      "target": "CaseClause"
    },
    {
      "source": "CatchClause",
      "target": "CatchClauseBase"
    },
    {
      "source": "exp#: exports.CatchClauseBase = CatchClauseBase;",
      "target": "CatchClauseBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "CatchClause"
    },
    {
      "source": "exp#: exports.CatchClause = CatchClause;",
      "target": "CatchClause"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentStatement"
    },
    {
      "source": "exp#: exports.CommentStatement = CommentStatement;",
      "target": "CommentStatement"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ContinueStatement"
    },
    {
      "source": "exp#: exports.ContinueStatement = ContinueStatement;",
      "target": "ContinueStatement"
    },
    {
      "source": "DebuggerStatement",
      "target": "DebuggerStatementBase"
    },
    {
      "source": "exp#: exports.DebuggerStatementBase = DebuggerStatementB",
      "target": "DebuggerStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "DebuggerStatement"
    },
    {
      "source": "exp#: exports.DebuggerStatement = DebuggerStatement;",
      "target": "DebuggerStatement"
    },
    {
      "source": "DefaultClauseBase",
      "target": "createBase$b"
    },
    {
      "source": "DefaultClause",
      "target": "DefaultClauseBase"
    },
    {
      "source": "exp#: exports.DefaultClauseBase = DefaultClauseBase;",
      "target": "DefaultClauseBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "DefaultClause"
    },
    {
      "source": "exp#: exports.DefaultClause = DefaultClause;",
      "target": "DefaultClause"
    },
    {
      "source": "DoStatementBase",
      "target": "IterationStatement"
    },
    {
      "source": "ForInStatementBase",
      "target": "IterationStatement"
    },
    {
      "source": "ForOfStatementBase",
      "target": "IterationStatement"
    },
    {
      "source": "ForStatementBase",
      "target": "IterationStatement"
    },
    {
      "source": "WhileStatementBase",
      "target": "IterationStatement"
    },
    {
      "source": "exp#: exports.IterationStatement = IterationStatement;",
      "target": "IterationStatement"
    },
    {
      "source": "DoStatement",
      "target": "DoStatementBase"
    },
    {
      "source": "exp#: exports.DoStatementBase = DoStatementBase;",
      "target": "DoStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "DoStatement"
    },
    {
      "source": "exp#: exports.DoStatement = DoStatement;",
      "target": "DoStatement"
    },
    {
      "source": "EmptyStatement",
      "target": "EmptyStatementBase"
    },
    {
      "source": "exp#: exports.EmptyStatementBase = EmptyStatementBase;",
      "target": "EmptyStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "EmptyStatement"
    },
    {
      "source": "exp#: exports.EmptyStatement = EmptyStatement;",
      "target": "EmptyStatement"
    },
    {
      "source": "ExpressionStatement",
      "target": "ExpressionStatementBase"
    },
    {
      "source": "exp#: exports.ExpressionStatementBase = ExpressionStatem",
      "target": "ExpressionStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ExpressionStatement"
    },
    {
      "source": "exp#: exports.ExpressionStatement = ExpressionStatement;",
      "target": "ExpressionStatement"
    },
    {
      "source": "ForInStatement",
      "target": "ForInStatementBase"
    },
    {
      "source": "exp#: exports.ForInStatementBase = ForInStatementBase;",
      "target": "ForInStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ForInStatement"
    },
    {
      "source": "exp#: exports.ForInStatement = ForInStatement;",
      "target": "ForInStatement"
    },
    {
      "source": "ForOfStatement",
      "target": "ForOfStatementBase"
    },
    {
      "source": "exp#: exports.ForOfStatementBase = ForOfStatementBase;",
      "target": "ForOfStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ForOfStatement"
    },
    {
      "source": "exp#: exports.ForOfStatement = ForOfStatement;",
      "target": "ForOfStatement"
    },
    {
      "source": "ForStatement",
      "target": "ForStatementBase"
    },
    {
      "source": "exp#: exports.ForStatementBase = ForStatementBase;",
      "target": "ForStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ForStatement"
    },
    {
      "source": "exp#: exports.ForStatement = ForStatement;",
      "target": "ForStatement"
    },
    {
      "source": "IfStatement",
      "target": "IfStatementBase"
    },
    {
      "source": "exp#: exports.IfStatementBase = IfStatementBase;",
      "target": "IfStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "IfStatement"
    },
    {
      "source": "exp#: exports.IfStatement = IfStatement;",
      "target": "IfStatement"
    },
    {
      "source": "LabeledStatement",
      "target": "LabeledStatementBase"
    },
    {
      "source": "exp#: exports.LabeledStatementBase = LabeledStatementBas",
      "target": "LabeledStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "LabeledStatement"
    },
    {
      "source": "exp#: exports.LabeledStatement = LabeledStatement;",
      "target": "LabeledStatement"
    },
    {
      "source": "NotEmittedStatement",
      "target": "NotEmittedStatementBase"
    },
    {
      "source": "exp#: exports.NotEmittedStatementBase = NotEmittedStatem",
      "target": "NotEmittedStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NotEmittedStatement"
    },
    {
      "source": "exp#: exports.NotEmittedStatement = NotEmittedStatement;",
      "target": "NotEmittedStatement"
    },
    {
      "source": "ReturnStatement",
      "target": "ReturnStatementBase"
    },
    {
      "source": "exp#: exports.ReturnStatementBase = ReturnStatementBase;",
      "target": "ReturnStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ReturnStatement"
    },
    {
      "source": "exp#: exports.ReturnStatement = ReturnStatement;",
      "target": "ReturnStatement"
    },
    {
      "source": "SwitchStatement",
      "target": "SwitchStatementBase"
    },
    {
      "source": "exp#: exports.SwitchStatementBase = SwitchStatementBase;",
      "target": "SwitchStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "SwitchStatement"
    },
    {
      "source": "exp#: exports.SwitchStatement = SwitchStatement;",
      "target": "SwitchStatement"
    },
    {
      "source": "ThrowStatement",
      "target": "ThrowStatementBase"
    },
    {
      "source": "exp#: exports.ThrowStatementBase = ThrowStatementBase;",
      "target": "ThrowStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ThrowStatement"
    },
    {
      "source": "exp#: exports.ThrowStatement = ThrowStatement;",
      "target": "ThrowStatement"
    },
    {
      "source": "TryStatement",
      "target": "TryStatementBase"
    },
    {
      "source": "exp#: exports.TryStatementBase = TryStatementBase;",
      "target": "TryStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TryStatement"
    },
    {
      "source": "exp#: exports.TryStatement = TryStatement;",
      "target": "TryStatement"
    },
    {
      "source": "ExportAssignment",
      "target": "ExportAssignmentBase"
    },
    {
      "source": "ExportAssignment",
      "target": "ExportAssignmentBase"
    },
    {
      "source": "exp#: exports.ExportAssignmentBase = ExportAssignmentBas",
      "target": "ExportAssignmentBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ExportAssignment"
    },
    {
      "source": "exp#: exports.ExportAssignment = ExportAssignment;",
      "target": "ExportAssignment"
    },
    {
      "source": "ExportDeclaration",
      "target": "ExportDeclarationBase"
    },
    {
      "source": "ExportDeclaration",
      "target": "ExportDeclarationBase"
    },
    {
      "source": "ExportDeclaration",
      "target": "ExportDeclarationBase"
    },
    {
      "source": "exp#: exports.ExportDeclarationBase = ExportDeclarationB",
      "target": "ExportDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ExportDeclaration"
    },
    {
      "source": "exp#: exports.ExportDeclaration = ExportDeclaration;",
      "target": "ExportDeclaration"
    },
    {
      "source": "ExportDeclaration",
      "target": "setEmptyNamedExport"
    },
    {
      "source": "ExportSpecifier",
      "target": "ExportSpecifierBase"
    },
    {
      "source": "ExportSpecifier",
      "target": "ExportSpecifierBase"
    },
    {
      "source": "exp#: exports.ExportSpecifierBase = ExportSpecifierBase;",
      "target": "ExportSpecifierBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ExportSpecifier"
    },
    {
      "source": "exp#: exports.ExportSpecifier = ExportSpecifier;",
      "target": "ExportSpecifier"
    },
    {
      "source": "ExternalModuleReference",
      "target": "ExternalModuleReferenceBase"
    },
    {
      "source": "exp#: exports.ExternalModuleReferenceBase = ExternalModu",
      "target": "ExternalModuleReferenceBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ExternalModuleReference"
    },
    {
      "source": "exp#: exports.ExternalModuleReference = ExternalModuleRe",
      "target": "ExternalModuleReference"
    },
    {
      "source": "ImportClause",
      "target": "ImportClauseBase"
    },
    {
      "source": "exp#: exports.ImportClauseBase = ImportClauseBase;",
      "target": "ImportClauseBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ImportClause"
    },
    {
      "source": "exp#: exports.ImportClause = ImportClause;",
      "target": "ImportClause"
    },
    {
      "source": "ImportDeclaration",
      "target": "ImportDeclarationBase"
    },
    {
      "source": "ImportDeclaration",
      "target": "ImportDeclarationBase"
    },
    {
      "source": "ImportDeclaration",
      "target": "ImportDeclarationBase"
    },
    {
      "source": "exp#: exports.ImportDeclarationBase = ImportDeclarationB",
      "target": "ImportDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ImportDeclaration"
    },
    {
      "source": "exp#: exports.ImportDeclaration = ImportDeclaration;",
      "target": "ImportDeclaration"
    },
    {
      "source": "ImportDeclaration",
      "target": "setEmptyNamedImport"
    },
    {
      "source": "ImportDeclaration",
      "target": "getErrorWhenNamespaceImportsExist"
    },
    {
      "source": "setEmptyNamedImport",
      "target": "getErrorWhenNamespaceImportsExist"
    },
    {
      "source": "ImportEqualsDeclarationBase",
      "target": "createBase$c"
    },
    {
      "source": "ImportEqualsDeclaration",
      "target": "ImportEqualsDeclarationBase"
    },
    {
      "source": "exp#: exports.ImportEqualsDeclarationBase = ImportEquals",
      "target": "ImportEqualsDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ImportEqualsDeclaration"
    },
    {
      "source": "exp#: exports.ImportEqualsDeclaration = ImportEqualsDecl",
      "target": "ImportEqualsDeclaration"
    },
    {
      "source": "ImportSpecifier",
      "target": "ImportSpecifierBase"
    },
    {
      "source": "ImportSpecifier",
      "target": "ImportSpecifierBase"
    },
    {
      "source": "ImportSpecifier",
      "target": "ImportSpecifierBase"
    },
    {
      "source": "exp#: exports.ImportSpecifierBase = ImportSpecifierBase;",
      "target": "ImportSpecifierBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ImportSpecifier"
    },
    {
      "source": "exp#: exports.ImportSpecifier = ImportSpecifier;",
      "target": "ImportSpecifier"
    },
    {
      "source": "ModuleBlock",
      "target": "ModuleBlockBase"
    },
    {
      "source": "exp#: exports.ModuleBlockBase = ModuleBlockBase;",
      "target": "ModuleBlockBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ModuleBlock"
    },
    {
      "source": "exp#: exports.ModuleBlock = ModuleBlock;",
      "target": "ModuleBlock"
    },
    {
      "source": "createBase$d",
      "target": "ModuleChildableNode"
    },
    {
      "source": "createBase$e",
      "target": "ModuleChildableNode"
    },
    {
      "source": "createBase$g",
      "target": "ModuleChildableNode"
    },
    {
      "source": "createOverloadBase",
      "target": "ModuleChildableNode"
    },
    {
      "source": "createBase$k",
      "target": "ModuleChildableNode"
    },
    {
      "source": "createBase$r",
      "target": "ModuleChildableNode"
    },
    {
      "source": "createBase$w",
      "target": "ModuleChildableNode"
    },
    {
      "source": "exp#: exports.ModuleChildableNode = ModuleChildableNode;",
      "target": "ModuleChildableNode"
    },
    {
      "source": "ModuleDeclarationBase",
      "target": "createBase$d"
    },
    {
      "source": "ModuleDeclaration",
      "target": "ModuleDeclarationBase"
    },
    {
      "source": "ModuleDeclaration",
      "target": "ModuleDeclarationBase"
    },
    {
      "source": "ModuleDeclaration",
      "target": "ModuleDeclarationBase"
    },
    {
      "source": "exp#: exports.ModuleDeclarationBase = ModuleDeclarationB",
      "target": "ModuleDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ModuleDeclaration"
    },
    {
      "source": "exp#: exports.ModuleDeclaration = ModuleDeclaration;",
      "target": "ModuleDeclaration"
    },
    {
      "source": "ModuleDeclaration",
      "target": "addNamespaceKeywordIfNecessary"
    },
    {
      "source": "ModuleDeclaration",
      "target": "addNamespaceKeywordIfNecessary"
    },
    {
      "source": "ModuleDeclaration",
      "target": "addNamespaceKeywordIfNecessary"
    },
    {
      "source": "ModuleDeclaration",
      "target": "changeToAmbientModuleIfNecessary"
    },
    {
      "source": "NamedExports",
      "target": "NamedExportsBase"
    },
    {
      "source": "exp#: exports.NamedExportsBase = NamedExportsBase;",
      "target": "NamedExportsBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NamedExports"
    },
    {
      "source": "exp#: exports.NamedExports = NamedExports;",
      "target": "NamedExports"
    },
    {
      "source": "NamedImports",
      "target": "NamedImportsBase"
    },
    {
      "source": "exp#: exports.NamedImportsBase = NamedImportsBase;",
      "target": "NamedImportsBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NamedImports"
    },
    {
      "source": "exp#: exports.NamedImports = NamedImports;",
      "target": "NamedImports"
    },
    {
      "source": "NamespaceExport",
      "target": "NamespaceExportBase"
    },
    {
      "source": "exp#: exports.NamespaceExportBase = NamespaceExportBase;",
      "target": "NamespaceExportBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NamespaceExport"
    },
    {
      "source": "exp#: exports.NamespaceExport = NamespaceExport;",
      "target": "NamespaceExport"
    },
    {
      "source": "NamespaceImport",
      "target": "NamespaceImportBase"
    },
    {
      "source": "exp#: exports.NamespaceImportBase = NamespaceImportBase;",
      "target": "NamespaceImportBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NamespaceImport"
    },
    {
      "source": "exp#: exports.NamespaceImport = NamespaceImport;",
      "target": "NamespaceImport"
    },
    {
      "source": "SourceFile",
      "target": "FileReference"
    },
    {
      "source": "SourceFile",
      "target": "FileReference"
    },
    {
      "source": "SourceFile",
      "target": "FileReference"
    },
    {
      "source": "exp#: exports.FileReference = FileReference;",
      "target": "FileReference"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "__decorate()",
      "target": "__decorate"
    },
    {
      "source": "SourceFile",
      "target": "__awaiter"
    },
    {
      "source": "SourceFile",
      "target": "__awaiter"
    },
    {
      "source": "SourceFile",
      "target": "__awaiter"
    },
    {
      "source": "SourceFile",
      "target": "__awaiter"
    },
    {
      "source": "SourceFile",
      "target": "__awaiter"
    },
    {
      "source": "Program",
      "target": "__awaiter"
    },
    {
      "source": "Directory",
      "target": "__awaiter"
    },
    {
      "source": "Directory",
      "target": "__awaiter"
    },
    {
      "source": "Directory",
      "target": "__awaiter"
    },
    {
      "source": "Directory",
      "target": "__awaiter"
    },
    {
      "source": "Directory",
      "target": "__awaiter"
    },
    {
      "source": "Directory",
      "target": "__awaiter"
    },
    {
      "source": "Project",
      "target": "__awaiter"
    },
    {
      "source": "SourceFile",
      "target": "SourceFileBase"
    },
    {
      "source": "SourceFile",
      "target": "SourceFileBase"
    },
    {
      "source": "SourceFile",
      "target": "SourceFileBase"
    },
    {
      "source": "exp#: exports.SourceFileBase = SourceFileBase;",
      "target": "SourceFileBase"
    },
    {
      "source": "__decorate()",
      "target": "SourceFile"
    },
    {
      "source": "Directory",
      "target": "SourceFile"
    },
    {
      "source": "Directory",
      "target": "SourceFile"
    },
    {
      "source": "Directory",
      "target": "SourceFile"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "SourceFile"
    },
    {
      "source": "CompilerFactory",
      "target": "SourceFile"
    },
    {
      "source": "exp#: exports.SourceFile = SourceFile;",
      "target": "SourceFile"
    },
    {
      "source": "SourceFile",
      "target": "updateStringLiteralReferences"
    },
    {
      "source": "SourceFile",
      "target": "updateStringLiteralReferences"
    },
    {
      "source": "SourceFile",
      "target": "updateStringLiteralReferences"
    },
    {
      "source": "SourceFile",
      "target": "getReferencingNodeFromStringLiteral"
    },
    {
      "source": "SourceFile",
      "target": "getReferencingNodeFromStringLiteral"
    },
    {
      "source": "VariableStatementBase",
      "target": "createBase$e"
    },
    {
      "source": "VariableStatement",
      "target": "VariableStatementBase"
    },
    {
      "source": "VariableStatement",
      "target": "VariableStatementBase"
    },
    {
      "source": "VariableStatement",
      "target": "VariableStatementBase"
    },
    {
      "source": "exp#: exports.VariableStatementBase = VariableStatementB",
      "target": "VariableStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "VariableStatement"
    },
    {
      "source": "exp#: exports.VariableStatement = VariableStatement;",
      "target": "VariableStatement"
    },
    {
      "source": "WhileStatement",
      "target": "WhileStatementBase"
    },
    {
      "source": "exp#: exports.WhileStatementBase = WhileStatementBase;",
      "target": "WhileStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "WhileStatement"
    },
    {
      "source": "exp#: exports.WhileStatement = WhileStatement;",
      "target": "WhileStatement"
    },
    {
      "source": "WithStatement",
      "target": "WithStatementBase"
    },
    {
      "source": "exp#: exports.WithStatementBase = WithStatementBase;",
      "target": "WithStatementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "WithStatement"
    },
    {
      "source": "exp#: exports.WithStatement = WithStatement;",
      "target": "WithStatement"
    },
    {
      "source": "createBase$f",
      "target": "FunctionLikeDeclaration"
    },
    {
      "source": "createBase$g",
      "target": "FunctionLikeDeclaration"
    },
    {
      "source": "createBase$j",
      "target": "FunctionLikeDeclaration"
    },
    {
      "source": "createBase$l",
      "target": "FunctionLikeDeclaration"
    },
    {
      "source": "createBase$m",
      "target": "FunctionLikeDeclaration"
    },
    {
      "source": "createBase$o",
      "target": "FunctionLikeDeclaration"
    },
    {
      "source": "exp#: exports.FunctionLikeDeclaration = FunctionLikeDecl",
      "target": "FunctionLikeDeclaration"
    },
    {
      "source": "ArrowFunctionBase",
      "target": "createBase$f"
    },
    {
      "source": "ArrowFunction",
      "target": "ArrowFunctionBase"
    },
    {
      "source": "exp#: exports.ArrowFunctionBase = ArrowFunctionBase;",
      "target": "ArrowFunctionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ArrowFunction"
    },
    {
      "source": "exp#: exports.ArrowFunction = ArrowFunction;",
      "target": "ArrowFunction"
    },
    {
      "source": "createBase$g",
      "target": "OverloadableNode"
    },
    {
      "source": "createBase$j",
      "target": "OverloadableNode"
    },
    {
      "source": "createBase$l",
      "target": "OverloadableNode"
    },
    {
      "source": "exp#: exports.OverloadableNode = OverloadableNode;",
      "target": "OverloadableNode"
    },
    {
      "source": "OverloadableNode",
      "target": "getOverloadsAndImplementation"
    },
    {
      "source": "OverloadableNode",
      "target": "getOverloadsAndImplementation"
    },
    {
      "source": "getOverloadsAndImplementation",
      "target": "getNameIfNamedNode"
    },
    {
      "source": "getOverloadsAndImplementation",
      "target": "getNameIfNamedNode"
    },
    {
      "source": "FunctionDeclaration",
      "target": "insertOverloads"
    },
    {
      "source": "MethodDeclaration",
      "target": "insertOverloads"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "insertOverloads"
    },
    {
      "source": "exp#: exports.insertOverloads = insertOverloads;",
      "target": "insertOverloads"
    },
    {
      "source": "FunctionDeclarationBase",
      "target": "createBase$g"
    },
    {
      "source": "FunctionDeclaration",
      "target": "FunctionDeclarationBase"
    },
    {
      "source": "FunctionDeclaration",
      "target": "FunctionDeclarationBase"
    },
    {
      "source": "FunctionDeclaration",
      "target": "FunctionDeclarationBase"
    },
    {
      "source": "exp#: exports.FunctionDeclarationBase = FunctionDeclarat",
      "target": "FunctionDeclarationBase"
    },
    {
      "source": "FunctionDeclarationOverloadBase",
      "target": "createOverloadBase"
    },
    {
      "source": "FunctionDeclaration",
      "target": "FunctionDeclarationOverloadBase"
    },
    {
      "source": "exp#: exports.FunctionDeclarationOverloadBase = Function",
      "target": "FunctionDeclarationOverloadBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "FunctionDeclaration"
    },
    {
      "source": "exp#: exports.FunctionDeclaration = FunctionDeclaration;",
      "target": "FunctionDeclaration"
    },
    {
      "source": "FunctionExpressionBase",
      "target": "createBase$h"
    },
    {
      "source": "FunctionExpression",
      "target": "FunctionExpressionBase"
    },
    {
      "source": "exp#: exports.FunctionExpressionBase = FunctionExpressio",
      "target": "FunctionExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "FunctionExpression"
    },
    {
      "source": "exp#: exports.FunctionExpression = FunctionExpression;",
      "target": "FunctionExpression"
    },
    {
      "source": "ParameterDeclarationBase",
      "target": "createBase$i"
    },
    {
      "source": "ParameterDeclaration",
      "target": "ParameterDeclarationBase"
    },
    {
      "source": "ParameterDeclaration",
      "target": "ParameterDeclarationBase"
    },
    {
      "source": "ParameterDeclaration",
      "target": "ParameterDeclarationBase"
    },
    {
      "source": "exp#: exports.ParameterDeclarationBase = ParameterDeclar",
      "target": "ParameterDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ParameterDeclaration"
    },
    {
      "source": "exp#: exports.ParameterDeclaration = ParameterDeclaratio",
      "target": "ParameterDeclaration"
    },
    {
      "source": "ParameterDeclaration",
      "target": "addParensIfNecessary"
    },
    {
      "source": "ParameterDeclaration",
      "target": "addParensIfNecessary"
    },
    {
      "source": "ParameterDeclaration",
      "target": "addParensIfNecessary"
    },
    {
      "source": "ParameterDeclaration",
      "target": "addParensIfNecessary"
    },
    {
      "source": "MethodDeclarationBase",
      "target": "ClassElement"
    },
    {
      "source": "MethodDeclarationOverloadBase",
      "target": "ClassElement"
    },
    {
      "source": "CommentClassElement",
      "target": "ClassElement"
    },
    {
      "source": "ConstructorDeclarationBase",
      "target": "ClassElement"
    },
    {
      "source": "ConstructorDeclarationOverloadBase",
      "target": "ClassElement"
    },
    {
      "source": "GetAccessorDeclarationBase",
      "target": "ClassElement"
    },
    {
      "source": "PropertyDeclarationBase",
      "target": "ClassElement"
    },
    {
      "source": "SetAccessorDeclarationBase",
      "target": "ClassElement"
    },
    {
      "source": "exp#: exports.ClassElement = ClassElement;",
      "target": "ClassElement"
    },
    {
      "source": "MethodDeclarationBase",
      "target": "createBase$j"
    },
    {
      "source": "MethodDeclaration",
      "target": "MethodDeclarationBase"
    },
    {
      "source": "MethodDeclaration",
      "target": "MethodDeclarationBase"
    },
    {
      "source": "MethodDeclaration",
      "target": "MethodDeclarationBase"
    },
    {
      "source": "exp#: exports.MethodDeclarationBase = MethodDeclarationB",
      "target": "MethodDeclarationBase"
    },
    {
      "source": "MethodDeclarationOverloadBase",
      "target": "createOverloadBase$1"
    },
    {
      "source": "MethodDeclaration",
      "target": "MethodDeclarationOverloadBase"
    },
    {
      "source": "exp#: exports.MethodDeclarationOverloadBase = MethodDecl",
      "target": "MethodDeclarationOverloadBase"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "MethodDeclaration"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "MethodDeclaration"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "MethodDeclaration"
    },
    {
      "source": "exp#: exports.MethodDeclaration = MethodDeclaration;",
      "target": "MethodDeclaration"
    },
    {
      "source": "createBase$k",
      "target": "ClassLikeDeclarationBase"
    },
    {
      "source": "ClassExpressionBase",
      "target": "ClassLikeDeclarationBase"
    },
    {
      "source": "exp#: exports.ClassLikeDeclarationBase = ClassLikeDeclar",
      "target": "ClassLikeDeclarationBase"
    },
    {
      "source": "ClassLikeDeclarationBase",
      "target": "ClassLikeDeclarationBaseSpecific"
    },
    {
      "source": "exp#: exports.ClassLikeDeclarationBaseSpecific = ClassLi",
      "target": "ClassLikeDeclarationBaseSpecific"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getAllMembers"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getAllMembers"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getImmediateDerivedClasses"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "getImmediateDerivedClasses"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isClassPropertyType"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isClassPropertyType"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isSupportedClassMember"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "isSupportedClassMember"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "insertChildren$1"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "insertChildren$1"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "insertChildren$1"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "insertChildren$1"
    },
    {
      "source": "ClassLikeDeclarationBaseSpecific",
      "target": "insertChildren$1"
    },
    {
      "source": "ClassDeclarationBase",
      "target": "createBase$k"
    },
    {
      "source": "ClassDeclaration",
      "target": "ClassDeclarationBase"
    },
    {
      "source": "ClassDeclaration",
      "target": "ClassDeclarationBase"
    },
    {
      "source": "ClassDeclaration",
      "target": "ClassDeclarationBase"
    },
    {
      "source": "exp#: exports.ClassDeclarationBase = ClassDeclarationBas",
      "target": "ClassDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ClassDeclaration"
    },
    {
      "source": "exp#: exports.ClassDeclaration = ClassDeclaration;",
      "target": "ClassDeclaration"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedClassDetails"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedClassDetails"
    },
    {
      "source": "ClassDeclaration",
      "target": "getDefaultExtractedName"
    },
    {
      "source": "ClassDeclaration",
      "target": "getDefaultExtractedName"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedInterfacePropertyStructure"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedInterfacePropertyStructure"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedInterfaceAccessorStructure"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedInterfaceAccessorStructure"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedInterfaceMethodStructure"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedInterfaceMethodStructure"
    },
    {
      "source": "ClassDeclaration",
      "target": "getExtractedInterfaceParameterStructure"
    },
    {
      "source": "getExtractedInterfaceMethodStructure",
      "target": "getExtractedInterfaceParameterStructure"
    },
    {
      "source": "ClassExpression",
      "target": "ClassExpressionBase"
    },
    {
      "source": "exp#: exports.ClassExpressionBase = ClassExpressionBase;",
      "target": "ClassExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ClassExpression"
    },
    {
      "source": "exp#: exports.ClassExpression = ClassExpression;",
      "target": "ClassExpression"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentClassElement"
    },
    {
      "source": "exp#: exports.CommentClassElement = CommentClassElement;",
      "target": "CommentClassElement"
    },
    {
      "source": "ConstructorDeclarationBase",
      "target": "createBase$l"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "ConstructorDeclarationBase"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "ConstructorDeclarationBase"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "ConstructorDeclarationBase"
    },
    {
      "source": "exp#: exports.ConstructorDeclarationBase = ConstructorDe",
      "target": "ConstructorDeclarationBase"
    },
    {
      "source": "ConstructorDeclarationOverloadBase",
      "target": "createOverloadBase$2"
    },
    {
      "source": "ConstructorDeclaration",
      "target": "ConstructorDeclarationOverloadBase"
    },
    {
      "source": "exp#: exports.ConstructorDeclarationOverloadBase = Const",
      "target": "ConstructorDeclarationOverloadBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ConstructorDeclaration"
    },
    {
      "source": "exp#: exports.ConstructorDeclaration = ConstructorDeclar",
      "target": "ConstructorDeclaration"
    },
    {
      "source": "GetAccessorDeclarationBase",
      "target": "createBase$m"
    },
    {
      "source": "GetAccessorDeclaration",
      "target": "GetAccessorDeclarationBase"
    },
    {
      "source": "GetAccessorDeclaration",
      "target": "GetAccessorDeclarationBase"
    },
    {
      "source": "GetAccessorDeclaration",
      "target": "GetAccessorDeclarationBase"
    },
    {
      "source": "exp#: exports.GetAccessorDeclarationBase = GetAccessorDe",
      "target": "GetAccessorDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "GetAccessorDeclaration"
    },
    {
      "source": "exp#: exports.GetAccessorDeclaration = GetAccessorDeclar",
      "target": "GetAccessorDeclaration"
    },
    {
      "source": "PropertyDeclarationBase",
      "target": "createBase$n"
    },
    {
      "source": "PropertyDeclaration",
      "target": "PropertyDeclarationBase"
    },
    {
      "source": "PropertyDeclaration",
      "target": "PropertyDeclarationBase"
    },
    {
      "source": "PropertyDeclaration",
      "target": "PropertyDeclarationBase"
    },
    {
      "source": "exp#: exports.PropertyDeclarationBase = PropertyDeclarat",
      "target": "PropertyDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "PropertyDeclaration"
    },
    {
      "source": "exp#: exports.PropertyDeclaration = PropertyDeclaration;",
      "target": "PropertyDeclaration"
    },
    {
      "source": "SetAccessorDeclarationBase",
      "target": "createBase$o"
    },
    {
      "source": "SetAccessorDeclaration",
      "target": "SetAccessorDeclarationBase"
    },
    {
      "source": "SetAccessorDeclaration",
      "target": "SetAccessorDeclarationBase"
    },
    {
      "source": "SetAccessorDeclaration",
      "target": "SetAccessorDeclarationBase"
    },
    {
      "source": "exp#: exports.SetAccessorDeclarationBase = SetAccessorDe",
      "target": "SetAccessorDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "SetAccessorDeclaration"
    },
    {
      "source": "exp#: exports.SetAccessorDeclaration = SetAccessorDeclar",
      "target": "SetAccessorDeclaration"
    },
    {
      "source": "Decorator",
      "target": "DecoratorBase"
    },
    {
      "source": "Decorator",
      "target": "DecoratorBase"
    },
    {
      "source": "Decorator",
      "target": "DecoratorBase"
    },
    {
      "source": "exp#: exports.DecoratorBase = DecoratorBase;",
      "target": "DecoratorBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Decorator"
    },
    {
      "source": "exp#: exports.Decorator = Decorator;",
      "target": "Decorator"
    },
    {
      "source": "JSDocParameterTagBase",
      "target": "JSDocPropertyLikeTag"
    },
    {
      "source": "JSDocPropertyTagBase",
      "target": "JSDocPropertyLikeTag"
    },
    {
      "source": "exp#: exports.JSDocPropertyLikeTag = JSDocPropertyLikeTa",
      "target": "JSDocPropertyLikeTag"
    },
    {
      "source": "JSDocReturnTagBase",
      "target": "JSDocTypeExpressionableTag"
    },
    {
      "source": "JSDocSeeTagBase",
      "target": "JSDocTypeExpressionableTag"
    },
    {
      "source": "JSDocThisTagBase",
      "target": "JSDocTypeExpressionableTag"
    },
    {
      "source": "exp#: exports.JSDocTypeExpressionableTag = JSDocTypeExpr",
      "target": "JSDocTypeExpressionableTag"
    },
    {
      "source": "JSDocTemplateTagBase",
      "target": "JSDocTypeParameteredTag"
    },
    {
      "source": "exp#: exports.JSDocTypeParameteredTag = JSDocTypeParamet",
      "target": "JSDocTypeParameteredTag"
    },
    {
      "source": "JSDoc",
      "target": "getTextWithoutStars"
    },
    {
      "source": "JSDoc",
      "target": "getTextWithoutStars"
    },
    {
      "source": "getText",
      "target": "getTextWithoutStars"
    },
    {
      "source": "JSDoc",
      "target": "JSDocBase"
    },
    {
      "source": "JSDoc",
      "target": "JSDocBase"
    },
    {
      "source": "JSDoc",
      "target": "JSDocBase"
    },
    {
      "source": "exp#: exports.JSDocBase = JSDocBase;",
      "target": "JSDocBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDoc"
    },
    {
      "source": "exp#: exports.JSDoc = JSDoc;",
      "target": "JSDoc"
    },
    {
      "source": "JSDocTag",
      "target": "JSDocTagBase"
    },
    {
      "source": "JSDocTag",
      "target": "JSDocTagBase"
    },
    {
      "source": "JSDocTag",
      "target": "JSDocTagBase"
    },
    {
      "source": "exp#: exports.JSDocTagBase = JSDocTagBase;",
      "target": "JSDocTagBase"
    },
    {
      "source": "JSDocAugmentsTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocAuthorTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocCallbackTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocClassTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocDeprecatedTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocEnumTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocImplementsTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocParameterTagBase",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocPrivateTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocPropertyTagBase",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocProtectedTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocPublicTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocReadonlyTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocReturnTagBase",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocSeeTagBase",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocTemplateTagBase",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocThisTagBase",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocTypedefTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocTypeTag",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocUnknownTag",
      "target": "JSDocTag"
    },
    {
      "source": "exp#: exports.JSDocTag = JSDocTag;",
      "target": "JSDocTag"
    },
    {
      "source": "JSDocTag",
      "target": "getText"
    },
    {
      "source": "JSDocTag",
      "target": "getText"
    },
    {
      "source": "JSDocTag",
      "target": "getTagEnd"
    },
    {
      "source": "getText",
      "target": "getTagEnd"
    },
    {
      "source": "JSDocTag",
      "target": "getNextTagStartOrDocEnd"
    },
    {
      "source": "getTagEnd",
      "target": "getNextTagStartOrDocEnd"
    },
    {
      "source": "JSDocTag",
      "target": "getNextJsDocTag"
    },
    {
      "source": "getNextTagStartOrDocEnd",
      "target": "getNextJsDocTag"
    },
    {
      "source": "JSDocTag",
      "target": "getPreviousNonWhiteSpacePos"
    },
    {
      "source": "getTagEnd",
      "target": "getPreviousNonWhiteSpacePos"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocAugmentsTag"
    },
    {
      "source": "exp#: exports.JSDocAugmentsTag = JSDocAugmentsTag;",
      "target": "JSDocAugmentsTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocAuthorTag"
    },
    {
      "source": "exp#: exports.JSDocAuthorTag = JSDocAuthorTag;",
      "target": "JSDocAuthorTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocCallbackTag"
    },
    {
      "source": "exp#: exports.JSDocCallbackTag = JSDocCallbackTag;",
      "target": "JSDocCallbackTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocClassTag"
    },
    {
      "source": "exp#: exports.JSDocClassTag = JSDocClassTag;",
      "target": "JSDocClassTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocDeprecatedTag"
    },
    {
      "source": "exp#: exports.JSDocDeprecatedTag = JSDocDeprecatedTag;",
      "target": "JSDocDeprecatedTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocEnumTag"
    },
    {
      "source": "exp#: exports.JSDocEnumTag = JSDocEnumTag;",
      "target": "JSDocEnumTag"
    },
    {
      "source": "ArrayTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "ConditionalTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "FunctionOrConstructorTypeNodeBaseBase",
      "target": "TypeNode"
    },
    {
      "source": "ExpressionWithTypeArgumentsBase",
      "target": "TypeNode"
    },
    {
      "source": "ImportTypeNodeBase",
      "target": "TypeNode"
    },
    {
      "source": "IndexedAccessTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "InferTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "IntersectionTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "LiteralTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "NamedTupleMemberBase",
      "target": "TypeNode"
    },
    {
      "source": "ParenthesizedTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "TemplateLiteralTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "ThisTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "TupleTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "TypeLiteralNodeBase",
      "target": "TypeNode"
    },
    {
      "source": "TypePredicateNode",
      "target": "TypeNode"
    },
    {
      "source": "TypeReferenceNode",
      "target": "TypeNode"
    },
    {
      "source": "UnionTypeNode",
      "target": "TypeNode"
    },
    {
      "source": "JSDocType",
      "target": "TypeNode"
    },
    {
      "source": "JSDocTypeExpression",
      "target": "TypeNode"
    },
    {
      "source": "exp#: exports.TypeNode = TypeNode;",
      "target": "TypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ArrayTypeNode"
    },
    {
      "source": "exp#: exports.ArrayTypeNode = ArrayTypeNode;",
      "target": "ArrayTypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ConditionalTypeNode"
    },
    {
      "source": "exp#: exports.ConditionalTypeNode = ConditionalTypeNode;",
      "target": "ConditionalTypeNode"
    },
    {
      "source": "FunctionOrConstructorTypeNodeBase",
      "target": "FunctionOrConstructorTypeNodeBaseBase"
    },
    {
      "source": "exp#: exports.FunctionOrConstructorTypeNodeBaseBase = Fu",
      "target": "FunctionOrConstructorTypeNodeBaseBase"
    },
    {
      "source": "ConstructorTypeNodeBase",
      "target": "FunctionOrConstructorTypeNodeBase"
    },
    {
      "source": "FunctionTypeNodeBase",
      "target": "FunctionOrConstructorTypeNodeBase"
    },
    {
      "source": "exp#: exports.FunctionOrConstructorTypeNodeBase = Functi",
      "target": "FunctionOrConstructorTypeNodeBase"
    },
    {
      "source": "ConstructorTypeNode",
      "target": "ConstructorTypeNodeBase"
    },
    {
      "source": "exp#: exports.ConstructorTypeNodeBase = ConstructorTypeN",
      "target": "ConstructorTypeNodeBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ConstructorTypeNode"
    },
    {
      "source": "exp#: exports.ConstructorTypeNode = ConstructorTypeNode;",
      "target": "ConstructorTypeNode"
    },
    {
      "source": "ExpressionWithTypeArguments",
      "target": "ExpressionWithTypeArgumentsBase"
    },
    {
      "source": "exp#: exports.ExpressionWithTypeArgumentsBase = Expressi",
      "target": "ExpressionWithTypeArgumentsBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ExpressionWithTypeArguments"
    },
    {
      "source": "exp#: exports.ExpressionWithTypeArguments = ExpressionWi",
      "target": "ExpressionWithTypeArguments"
    },
    {
      "source": "FunctionTypeNode",
      "target": "FunctionTypeNodeBase"
    },
    {
      "source": "exp#: exports.FunctionTypeNodeBase = FunctionTypeNodeBas",
      "target": "FunctionTypeNodeBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "FunctionTypeNode"
    },
    {
      "source": "exp#: exports.FunctionTypeNode = FunctionTypeNode;",
      "target": "FunctionTypeNode"
    },
    {
      "source": "ImportTypeNode",
      "target": "ImportTypeNodeBase"
    },
    {
      "source": "exp#: exports.ImportTypeNodeBase = ImportTypeNodeBase;",
      "target": "ImportTypeNodeBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ImportTypeNode"
    },
    {
      "source": "exp#: exports.ImportTypeNode = ImportTypeNode;",
      "target": "ImportTypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "IndexedAccessTypeNode"
    },
    {
      "source": "exp#: exports.IndexedAccessTypeNode = IndexedAccessTypeN",
      "target": "IndexedAccessTypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "InferTypeNode"
    },
    {
      "source": "exp#: exports.InferTypeNode = InferTypeNode;",
      "target": "InferTypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "IntersectionTypeNode"
    },
    {
      "source": "exp#: exports.IntersectionTypeNode = IntersectionTypeNod",
      "target": "IntersectionTypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "LiteralTypeNode"
    },
    {
      "source": "exp#: exports.LiteralTypeNode = LiteralTypeNode;",
      "target": "LiteralTypeNode"
    },
    {
      "source": "NamedTupleMemberBase",
      "target": "createBase$p"
    },
    {
      "source": "NamedTupleMember",
      "target": "NamedTupleMemberBase"
    },
    {
      "source": "exp#: exports.NamedTupleMemberBase = NamedTupleMemberBas",
      "target": "NamedTupleMemberBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NamedTupleMember"
    },
    {
      "source": "exp#: exports.NamedTupleMember = NamedTupleMember;",
      "target": "NamedTupleMember"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ParenthesizedTypeNode"
    },
    {
      "source": "exp#: exports.ParenthesizedTypeNode = ParenthesizedTypeN",
      "target": "ParenthesizedTypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TemplateLiteralTypeNode"
    },
    {
      "source": "exp#: exports.TemplateLiteralTypeNode = TemplateLiteralT",
      "target": "TemplateLiteralTypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ThisTypeNode"
    },
    {
      "source": "exp#: exports.ThisTypeNode = ThisTypeNode;",
      "target": "ThisTypeNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TupleTypeNode"
    },
    {
      "source": "exp#: exports.TupleTypeNode = TupleTypeNode;",
      "target": "TupleTypeNode"
    },
    {
      "source": "TypeAliasDeclarationBase",
      "target": "createBase$q"
    },
    {
      "source": "TypeAliasDeclaration",
      "target": "TypeAliasDeclarationBase"
    },
    {
      "source": "TypeAliasDeclaration",
      "target": "TypeAliasDeclarationBase"
    },
    {
      "source": "TypeAliasDeclaration",
      "target": "TypeAliasDeclarationBase"
    },
    {
      "source": "exp#: exports.TypeAliasDeclarationBase = TypeAliasDeclar",
      "target": "TypeAliasDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TypeAliasDeclaration"
    },
    {
      "source": "exp#: exports.TypeAliasDeclaration = TypeAliasDeclaratio",
      "target": "TypeAliasDeclaration"
    },
    {
      "source": "TypeLiteralNode",
      "target": "TypeLiteralNodeBase"
    },
    {
      "source": "exp#: exports.TypeLiteralNodeBase = TypeLiteralNodeBase;",
      "target": "TypeLiteralNodeBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TypeLiteralNode"
    },
    {
      "source": "exp#: exports.TypeLiteralNode = TypeLiteralNode;",
      "target": "TypeLiteralNode"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "TypeParameterDeclarationBase"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "TypeParameterDeclarationBase"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "TypeParameterDeclarationBase"
    },
    {
      "source": "exp#: exports.TypeParameterDeclarationBase = TypeParamet",
      "target": "TypeParameterDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TypeParameterDeclaration"
    },
    {
      "source": "exp#: exports.TypeParameterDeclaration = TypeParameterDe",
      "target": "TypeParameterDeclaration"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "removeConstraintOrDefault"
    },
    {
      "source": "TypeParameterDeclaration",
      "target": "removeConstraintOrDefault"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TypePredicateNode"
    },
    {
      "source": "exp#: exports.TypePredicateNode = TypePredicateNode;",
      "target": "TypePredicateNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TypeReferenceNode"
    },
    {
      "source": "exp#: exports.TypeReferenceNode = TypeReferenceNode;",
      "target": "TypeReferenceNode"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "UnionTypeNode"
    },
    {
      "source": "exp#: exports.UnionTypeNode = UnionTypeNode;",
      "target": "UnionTypeNode"
    },
    {
      "source": "JSDocFunctionTypeBase",
      "target": "JSDocType"
    },
    {
      "source": "JSDocSignature",
      "target": "JSDocType"
    },
    {
      "source": "exp#: exports.JSDocType = JSDocType;",
      "target": "JSDocType"
    },
    {
      "source": "JSDocFunctionType",
      "target": "JSDocFunctionTypeBase"
    },
    {
      "source": "exp#: exports.JSDocFunctionTypeBase = JSDocFunctionTypeB",
      "target": "JSDocFunctionTypeBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocFunctionType"
    },
    {
      "source": "exp#: exports.JSDocFunctionType = JSDocFunctionType;",
      "target": "JSDocFunctionType"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocImplementsTag"
    },
    {
      "source": "exp#: exports.JSDocImplementsTag = JSDocImplementsTag;",
      "target": "JSDocImplementsTag"
    },
    {
      "source": "JSDocParameterTag",
      "target": "JSDocParameterTagBase"
    },
    {
      "source": "exp#: exports.JSDocParameterTagBase = JSDocParameterTagB",
      "target": "JSDocParameterTagBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocParameterTag"
    },
    {
      "source": "exp#: exports.JSDocParameterTag = JSDocParameterTag;",
      "target": "JSDocParameterTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocPrivateTag"
    },
    {
      "source": "exp#: exports.JSDocPrivateTag = JSDocPrivateTag;",
      "target": "JSDocPrivateTag"
    },
    {
      "source": "JSDocPropertyTag",
      "target": "JSDocPropertyTagBase"
    },
    {
      "source": "exp#: exports.JSDocPropertyTagBase = JSDocPropertyTagBas",
      "target": "JSDocPropertyTagBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocPropertyTag"
    },
    {
      "source": "exp#: exports.JSDocPropertyTag = JSDocPropertyTag;",
      "target": "JSDocPropertyTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocProtectedTag"
    },
    {
      "source": "exp#: exports.JSDocProtectedTag = JSDocProtectedTag;",
      "target": "JSDocProtectedTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocPublicTag"
    },
    {
      "source": "exp#: exports.JSDocPublicTag = JSDocPublicTag;",
      "target": "JSDocPublicTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocReadonlyTag"
    },
    {
      "source": "exp#: exports.JSDocReadonlyTag = JSDocReadonlyTag;",
      "target": "JSDocReadonlyTag"
    },
    {
      "source": "JSDocReturnTag",
      "target": "JSDocReturnTagBase"
    },
    {
      "source": "exp#: exports.JSDocReturnTagBase = JSDocReturnTagBase;",
      "target": "JSDocReturnTagBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocReturnTag"
    },
    {
      "source": "exp#: exports.JSDocReturnTag = JSDocReturnTag;",
      "target": "JSDocReturnTag"
    },
    {
      "source": "JSDocSeeTag",
      "target": "JSDocSeeTagBase"
    },
    {
      "source": "exp#: exports.JSDocSeeTagBase = JSDocSeeTagBase;",
      "target": "JSDocSeeTagBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocSeeTag"
    },
    {
      "source": "exp#: exports.JSDocSeeTag = JSDocSeeTag;",
      "target": "JSDocSeeTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocSignature"
    },
    {
      "source": "exp#: exports.JSDocSignature = JSDocSignature;",
      "target": "JSDocSignature"
    },
    {
      "source": "CompilerFactory",
      "target": "JSDocTagInfo"
    },
    {
      "source": "exp#: exports.JSDocTagInfo = JSDocTagInfo;",
      "target": "JSDocTagInfo"
    },
    {
      "source": "JSDocTemplateTag",
      "target": "JSDocTemplateTagBase"
    },
    {
      "source": "exp#: exports.JSDocTemplateTagBase = JSDocTemplateTagBas",
      "target": "JSDocTemplateTagBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocTemplateTag"
    },
    {
      "source": "exp#: exports.JSDocTemplateTag = JSDocTemplateTag;",
      "target": "JSDocTemplateTag"
    },
    {
      "source": "JSDocThisTag",
      "target": "JSDocThisTagBase"
    },
    {
      "source": "exp#: exports.JSDocThisTagBase = JSDocThisTagBase;",
      "target": "JSDocThisTagBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocThisTag"
    },
    {
      "source": "exp#: exports.JSDocThisTag = JSDocThisTag;",
      "target": "JSDocThisTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocTypedefTag"
    },
    {
      "source": "exp#: exports.JSDocTypedefTag = JSDocTypedefTag;",
      "target": "JSDocTypedefTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocTypeExpression"
    },
    {
      "source": "exp#: exports.JSDocTypeExpression = JSDocTypeExpression;",
      "target": "JSDocTypeExpression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocTypeTag"
    },
    {
      "source": "exp#: exports.JSDocTypeTag = JSDocTypeTag;",
      "target": "JSDocTypeTag"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JSDocUnknownTag"
    },
    {
      "source": "exp#: exports.JSDocUnknownTag = JSDocUnknownTag;",
      "target": "JSDocUnknownTag"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentEnumMember"
    },
    {
      "source": "exp#: exports.CommentEnumMember = CommentEnumMember;",
      "target": "CommentEnumMember"
    },
    {
      "source": "EnumDeclarationBase",
      "target": "createBase$r"
    },
    {
      "source": "EnumDeclaration",
      "target": "EnumDeclarationBase"
    },
    {
      "source": "EnumDeclaration",
      "target": "EnumDeclarationBase"
    },
    {
      "source": "EnumDeclaration",
      "target": "EnumDeclarationBase"
    },
    {
      "source": "exp#: exports.EnumDeclarationBase = EnumDeclarationBase;",
      "target": "EnumDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "EnumDeclaration"
    },
    {
      "source": "exp#: exports.EnumDeclaration = EnumDeclaration;",
      "target": "EnumDeclaration"
    },
    {
      "source": "EnumMemberBase",
      "target": "createBase$s"
    },
    {
      "source": "EnumMember",
      "target": "EnumMemberBase"
    },
    {
      "source": "EnumMember",
      "target": "EnumMemberBase"
    },
    {
      "source": "EnumMember",
      "target": "EnumMemberBase"
    },
    {
      "source": "exp#: exports.EnumMemberBase = EnumMemberBase;",
      "target": "EnumMemberBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "EnumMember"
    },
    {
      "source": "exp#: exports.EnumMember = EnumMember;",
      "target": "EnumMember"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "HeritageClause"
    },
    {
      "source": "exp#: exports.HeritageClause = HeritageClause;",
      "target": "HeritageClause"
    },
    {
      "source": "CallSignatureDeclarationBase",
      "target": "TypeElement"
    },
    {
      "source": "CommentTypeElement",
      "target": "TypeElement"
    },
    {
      "source": "ConstructSignatureDeclarationBase",
      "target": "TypeElement"
    },
    {
      "source": "IndexSignatureDeclarationBase",
      "target": "TypeElement"
    },
    {
      "source": "MethodSignatureBase",
      "target": "TypeElement"
    },
    {
      "source": "PropertySignatureBase",
      "target": "TypeElement"
    },
    {
      "source": "exp#: exports.TypeElement = TypeElement;",
      "target": "TypeElement"
    },
    {
      "source": "CallSignatureDeclarationBase",
      "target": "createBase$t"
    },
    {
      "source": "CallSignatureDeclaration",
      "target": "CallSignatureDeclarationBase"
    },
    {
      "source": "CallSignatureDeclaration",
      "target": "CallSignatureDeclarationBase"
    },
    {
      "source": "CallSignatureDeclaration",
      "target": "CallSignatureDeclarationBase"
    },
    {
      "source": "exp#: exports.CallSignatureDeclarationBase = CallSignatu",
      "target": "CallSignatureDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "CallSignatureDeclaration"
    },
    {
      "source": "exp#: exports.CallSignatureDeclaration = CallSignatureDe",
      "target": "CallSignatureDeclaration"
    },
    {
      "source": "CompilerFactory",
      "target": "CommentTypeElement"
    },
    {
      "source": "exp#: exports.CommentTypeElement = CommentTypeElement;",
      "target": "CommentTypeElement"
    },
    {
      "source": "ConstructSignatureDeclarationBase",
      "target": "createBase$u"
    },
    {
      "source": "ConstructSignatureDeclaration",
      "target": "ConstructSignatureDeclarationBase"
    },
    {
      "source": "ConstructSignatureDeclaration",
      "target": "ConstructSignatureDeclarationBase"
    },
    {
      "source": "ConstructSignatureDeclaration",
      "target": "ConstructSignatureDeclarationBase"
    },
    {
      "source": "exp#: exports.ConstructSignatureDeclarationBase = Constr",
      "target": "ConstructSignatureDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ConstructSignatureDeclaration"
    },
    {
      "source": "exp#: exports.ConstructSignatureDeclaration = ConstructS",
      "target": "ConstructSignatureDeclaration"
    },
    {
      "source": "IndexSignatureDeclarationBase",
      "target": "createBase$v"
    },
    {
      "source": "IndexSignatureDeclaration",
      "target": "IndexSignatureDeclarationBase"
    },
    {
      "source": "IndexSignatureDeclaration",
      "target": "IndexSignatureDeclarationBase"
    },
    {
      "source": "IndexSignatureDeclaration",
      "target": "IndexSignatureDeclarationBase"
    },
    {
      "source": "exp#: exports.IndexSignatureDeclarationBase = IndexSigna",
      "target": "IndexSignatureDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "IndexSignatureDeclaration"
    },
    {
      "source": "exp#: exports.IndexSignatureDeclaration = IndexSignature",
      "target": "IndexSignatureDeclaration"
    },
    {
      "source": "InterfaceDeclarationBase",
      "target": "createBase$w"
    },
    {
      "source": "InterfaceDeclaration",
      "target": "InterfaceDeclarationBase"
    },
    {
      "source": "InterfaceDeclaration",
      "target": "InterfaceDeclarationBase"
    },
    {
      "source": "InterfaceDeclaration",
      "target": "InterfaceDeclarationBase"
    },
    {
      "source": "exp#: exports.InterfaceDeclarationBase = InterfaceDeclar",
      "target": "InterfaceDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "InterfaceDeclaration"
    },
    {
      "source": "exp#: exports.InterfaceDeclaration = InterfaceDeclaratio",
      "target": "InterfaceDeclaration"
    },
    {
      "source": "MethodSignatureBase",
      "target": "createBase$x"
    },
    {
      "source": "MethodSignature",
      "target": "MethodSignatureBase"
    },
    {
      "source": "MethodSignature",
      "target": "MethodSignatureBase"
    },
    {
      "source": "MethodSignature",
      "target": "MethodSignatureBase"
    },
    {
      "source": "exp#: exports.MethodSignatureBase = MethodSignatureBase;",
      "target": "MethodSignatureBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "MethodSignature"
    },
    {
      "source": "exp#: exports.MethodSignature = MethodSignature;",
      "target": "MethodSignature"
    },
    {
      "source": "PropertySignatureBase",
      "target": "createBase$y"
    },
    {
      "source": "PropertySignature",
      "target": "PropertySignatureBase"
    },
    {
      "source": "PropertySignature",
      "target": "PropertySignatureBase"
    },
    {
      "source": "PropertySignature",
      "target": "PropertySignatureBase"
    },
    {
      "source": "exp#: exports.PropertySignatureBase = PropertySignatureB",
      "target": "PropertySignatureBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "PropertySignature"
    },
    {
      "source": "exp#: exports.PropertySignature = PropertySignature;",
      "target": "PropertySignature"
    },
    {
      "source": "createBase$A",
      "target": "JsxAttributedNode"
    },
    {
      "source": "createBase$B",
      "target": "JsxAttributedNode"
    },
    {
      "source": "exp#: exports.JsxAttributedNode = JsxAttributedNode;",
      "target": "JsxAttributedNode"
    },
    {
      "source": "createBase$z",
      "target": "JsxTagNamedNode"
    },
    {
      "source": "createBase$A",
      "target": "JsxTagNamedNode"
    },
    {
      "source": "createBase$B",
      "target": "JsxTagNamedNode"
    },
    {
      "source": "exp#: exports.JsxTagNamedNode = JsxTagNamedNode;",
      "target": "JsxTagNamedNode"
    },
    {
      "source": "JsxAttribute",
      "target": "JsxAttributeBase"
    },
    {
      "source": "JsxAttribute",
      "target": "JsxAttributeBase"
    },
    {
      "source": "JsxAttribute",
      "target": "JsxAttributeBase"
    },
    {
      "source": "exp#: exports.JsxAttributeBase = JsxAttributeBase;",
      "target": "JsxAttributeBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxAttribute"
    },
    {
      "source": "exp#: exports.JsxAttribute = JsxAttribute;",
      "target": "JsxAttribute"
    },
    {
      "source": "JsxClosingElementBase",
      "target": "createBase$z"
    },
    {
      "source": "JsxClosingElement",
      "target": "JsxClosingElementBase"
    },
    {
      "source": "exp#: exports.JsxClosingElementBase = JsxClosingElementB",
      "target": "JsxClosingElementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxClosingElement"
    },
    {
      "source": "exp#: exports.JsxClosingElement = JsxClosingElement;",
      "target": "JsxClosingElement"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxClosingFragment"
    },
    {
      "source": "exp#: exports.JsxClosingFragment = JsxClosingFragment;",
      "target": "JsxClosingFragment"
    },
    {
      "source": "JsxElement",
      "target": "JsxElementBase"
    },
    {
      "source": "JsxElement",
      "target": "JsxElementBase"
    },
    {
      "source": "JsxElement",
      "target": "JsxElementBase"
    },
    {
      "source": "exp#: exports.JsxElementBase = JsxElementBase;",
      "target": "JsxElementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxElement"
    },
    {
      "source": "exp#: exports.JsxElement = JsxElement;",
      "target": "JsxElement"
    },
    {
      "source": "JsxElement",
      "target": "setText"
    },
    {
      "source": "JsxElement",
      "target": "setText"
    },
    {
      "source": "JsxExpression",
      "target": "JsxExpressionBase"
    },
    {
      "source": "exp#: exports.JsxExpressionBase = JsxExpressionBase;",
      "target": "JsxExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxExpression"
    },
    {
      "source": "exp#: exports.JsxExpression = JsxExpression;",
      "target": "JsxExpression"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxFragment"
    },
    {
      "source": "exp#: exports.JsxFragment = JsxFragment;",
      "target": "JsxFragment"
    },
    {
      "source": "JsxOpeningElementBase",
      "target": "createBase$A"
    },
    {
      "source": "JsxOpeningElement",
      "target": "JsxOpeningElementBase"
    },
    {
      "source": "exp#: exports.JsxOpeningElementBase = JsxOpeningElementB",
      "target": "JsxOpeningElementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxOpeningElement"
    },
    {
      "source": "exp#: exports.JsxOpeningElement = JsxOpeningElement;",
      "target": "JsxOpeningElement"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxOpeningFragment"
    },
    {
      "source": "exp#: exports.JsxOpeningFragment = JsxOpeningFragment;",
      "target": "JsxOpeningFragment"
    },
    {
      "source": "JsxSelfClosingElementBase",
      "target": "createBase$B"
    },
    {
      "source": "JsxSelfClosingElement",
      "target": "JsxSelfClosingElementBase"
    },
    {
      "source": "JsxSelfClosingElement",
      "target": "JsxSelfClosingElementBase"
    },
    {
      "source": "JsxSelfClosingElement",
      "target": "JsxSelfClosingElementBase"
    },
    {
      "source": "exp#: exports.JsxSelfClosingElementBase = JsxSelfClosing",
      "target": "JsxSelfClosingElementBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxSelfClosingElement"
    },
    {
      "source": "exp#: exports.JsxSelfClosingElement = JsxSelfClosingElem",
      "target": "JsxSelfClosingElement"
    },
    {
      "source": "JsxSpreadAttribute",
      "target": "JsxSpreadAttributeBase"
    },
    {
      "source": "JsxSpreadAttribute",
      "target": "JsxSpreadAttributeBase"
    },
    {
      "source": "JsxSpreadAttribute",
      "target": "JsxSpreadAttributeBase"
    },
    {
      "source": "exp#: exports.JsxSpreadAttributeBase = JsxSpreadAttribut",
      "target": "JsxSpreadAttributeBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxSpreadAttribute"
    },
    {
      "source": "exp#: exports.JsxSpreadAttribute = JsxSpreadAttribute;",
      "target": "JsxSpreadAttribute"
    },
    {
      "source": "JsxText",
      "target": "JsxTextBase"
    },
    {
      "source": "exp#: exports.JsxTextBase = JsxTextBase;",
      "target": "JsxTextBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "JsxText"
    },
    {
      "source": "exp#: exports.JsxText = JsxText;",
      "target": "JsxText"
    },
    {
      "source": "BigIntLiteral",
      "target": "BigIntLiteralBase"
    },
    {
      "source": "exp#: exports.BigIntLiteralBase = BigIntLiteralBase;",
      "target": "BigIntLiteralBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "BigIntLiteral"
    },
    {
      "source": "exp#: exports.BigIntLiteral = BigIntLiteral;",
      "target": "BigIntLiteral"
    },
    {
      "source": "TrueLiteral",
      "target": "TrueLiteralBase"
    },
    {
      "source": "exp#: exports.TrueLiteralBase = TrueLiteralBase;",
      "target": "TrueLiteralBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TrueLiteral"
    },
    {
      "source": "exp#: exports.TrueLiteral = TrueLiteral;",
      "target": "TrueLiteral"
    },
    {
      "source": "FalseLiteral",
      "target": "FalseLiteralBase"
    },
    {
      "source": "exp#: exports.FalseLiteralBase = FalseLiteralBase;",
      "target": "FalseLiteralBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "FalseLiteral"
    },
    {
      "source": "exp#: exports.FalseLiteral = FalseLiteral;",
      "target": "FalseLiteral"
    },
    {
      "source": "TrueLiteral",
      "target": "setLiteralValue"
    },
    {
      "source": "FalseLiteral",
      "target": "setLiteralValue"
    },
    {
      "source": "TrueLiteral",
      "target": "getLiteralValue"
    },
    {
      "source": "FalseLiteral",
      "target": "getLiteralValue"
    },
    {
      "source": "setLiteralValue",
      "target": "getLiteralValue"
    },
    {
      "source": "NullLiteral",
      "target": "NullLiteralBase"
    },
    {
      "source": "exp#: exports.NullLiteralBase = NullLiteralBase;",
      "target": "NullLiteralBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NullLiteral"
    },
    {
      "source": "exp#: exports.NullLiteral = NullLiteral;",
      "target": "NullLiteral"
    },
    {
      "source": "NumericLiteral",
      "target": "NumericLiteralBase"
    },
    {
      "source": "exp#: exports.NumericLiteralBase = NumericLiteralBase;",
      "target": "NumericLiteralBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NumericLiteral"
    },
    {
      "source": "exp#: exports.NumericLiteral = NumericLiteral;",
      "target": "NumericLiteral"
    },
    {
      "source": "RegularExpressionLiteral",
      "target": "RegularExpressionLiteralBase"
    },
    {
      "source": "exp#: exports.RegularExpressionLiteralBase = RegularExpr",
      "target": "RegularExpressionLiteralBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "RegularExpressionLiteral"
    },
    {
      "source": "exp#: exports.RegularExpressionLiteral = RegularExpressi",
      "target": "RegularExpressionLiteral"
    },
    {
      "source": "StringLiteral",
      "target": "StringLiteralBase"
    },
    {
      "source": "exp#: exports.StringLiteralBase = StringLiteralBase;",
      "target": "StringLiteralBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "StringLiteral"
    },
    {
      "source": "exp#: exports.StringLiteral = StringLiteral;",
      "target": "StringLiteral"
    },
    {
      "source": "NoSubstitutionTemplateLiteral",
      "target": "NoSubstitutionTemplateLiteralBase"
    },
    {
      "source": "exp#: exports.NoSubstitutionTemplateLiteralBase = NoSubs",
      "target": "NoSubstitutionTemplateLiteralBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "NoSubstitutionTemplateLiteral"
    },
    {
      "source": "exp#: exports.NoSubstitutionTemplateLiteral = NoSubstitu",
      "target": "NoSubstitutionTemplateLiteral"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TaggedTemplateExpression"
    },
    {
      "source": "exp#: exports.TaggedTemplateExpression = TaggedTemplateE",
      "target": "TaggedTemplateExpression"
    },
    {
      "source": "TemplateExpression",
      "target": "TemplateExpressionBase"
    },
    {
      "source": "exp#: exports.TemplateExpressionBase = TemplateExpressio",
      "target": "TemplateExpressionBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TemplateExpression"
    },
    {
      "source": "exp#: exports.TemplateExpression = TemplateExpression;",
      "target": "TemplateExpression"
    },
    {
      "source": "TemplateHead",
      "target": "TemplateHeadBase"
    },
    {
      "source": "exp#: exports.TemplateHeadBase = TemplateHeadBase;",
      "target": "TemplateHeadBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TemplateHead"
    },
    {
      "source": "exp#: exports.TemplateHead = TemplateHead;",
      "target": "TemplateHead"
    },
    {
      "source": "TemplateMiddle",
      "target": "TemplateMiddleBase"
    },
    {
      "source": "exp#: exports.TemplateMiddleBase = TemplateMiddleBase;",
      "target": "TemplateMiddleBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TemplateMiddle"
    },
    {
      "source": "exp#: exports.TemplateMiddle = TemplateMiddle;",
      "target": "TemplateMiddle"
    },
    {
      "source": "TemplateSpan",
      "target": "TemplateSpanBase"
    },
    {
      "source": "exp#: exports.TemplateSpanBase = TemplateSpanBase;",
      "target": "TemplateSpanBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TemplateSpan"
    },
    {
      "source": "exp#: exports.TemplateSpan = TemplateSpan;",
      "target": "TemplateSpan"
    },
    {
      "source": "TemplateTail",
      "target": "TemplateTailBase"
    },
    {
      "source": "exp#: exports.TemplateTailBase = TemplateTailBase;",
      "target": "TemplateTailBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "TemplateTail"
    },
    {
      "source": "exp#: exports.TemplateTail = TemplateTail;",
      "target": "TemplateTail"
    },
    {
      "source": "IdentifierBase",
      "target": "CommonIdentifierBase"
    },
    {
      "source": "PrivateIdentifierBase",
      "target": "CommonIdentifierBase"
    },
    {
      "source": "exp#: exports.CommonIdentifierBase = CommonIdentifierBas",
      "target": "CommonIdentifierBase"
    },
    {
      "source": "ComputedPropertyName",
      "target": "ComputedPropertyNameBase"
    },
    {
      "source": "exp#: exports.ComputedPropertyNameBase = ComputedPropert",
      "target": "ComputedPropertyNameBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "ComputedPropertyName"
    },
    {
      "source": "exp#: exports.ComputedPropertyName = ComputedPropertyNam",
      "target": "ComputedPropertyName"
    },
    {
      "source": "Identifier",
      "target": "IdentifierBase"
    },
    {
      "source": "exp#: exports.IdentifierBase = IdentifierBase;",
      "target": "IdentifierBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "Identifier"
    },
    {
      "source": "exp#: exports.Identifier = Identifier;",
      "target": "Identifier"
    },
    {
      "source": "PrivateIdentifier",
      "target": "PrivateIdentifierBase"
    },
    {
      "source": "exp#: exports.PrivateIdentifierBase = PrivateIdentifierB",
      "target": "PrivateIdentifierBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "PrivateIdentifier"
    },
    {
      "source": "exp#: exports.PrivateIdentifier = PrivateIdentifier;",
      "target": "PrivateIdentifier"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "QualifiedName"
    },
    {
      "source": "exp#: exports.QualifiedName = QualifiedName;",
      "target": "QualifiedName"
    },
    {
      "source": "VariableDeclarationBase",
      "target": "createBase$C"
    },
    {
      "source": "VariableDeclaration",
      "target": "VariableDeclarationBase"
    },
    {
      "source": "VariableDeclaration",
      "target": "VariableDeclarationBase"
    },
    {
      "source": "VariableDeclaration",
      "target": "VariableDeclarationBase"
    },
    {
      "source": "exp#: exports.VariableDeclarationBase = VariableDeclarat",
      "target": "VariableDeclarationBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "VariableDeclaration"
    },
    {
      "source": "exp#: exports.VariableDeclaration = VariableDeclaration;",
      "target": "VariableDeclaration"
    },
    {
      "source": "VariableDeclarationList",
      "target": "VariableDeclarationListBase"
    },
    {
      "source": "exp#: exports.VariableDeclarationListBase = VariableDecl",
      "target": "VariableDeclarationListBase"
    },
    {
      "source": "kindToWrapperMappings",
      "target": "VariableDeclarationList"
    },
    {
      "source": "exp#: exports.VariableDeclarationList = VariableDeclarat",
      "target": "VariableDeclarationList"
    },
    {
      "source": "CompilerFactory",
      "target": "Signature"
    },
    {
      "source": "exp#: exports.Signature = Signature;",
      "target": "Signature"
    },
    {
      "source": "CompilerFactory",
      "target": "Symbol"
    },
    {
      "source": "exp#: exports.Symbol = Symbol;",
      "target": "Symbol"
    },
    {
      "source": "TextChange",
      "target": "TextSpan"
    },
    {
      "source": "DocumentSpan",
      "target": "TextSpan"
    },
    {
      "source": "DocumentSpan",
      "target": "TextSpan"
    },
    {
      "source": "exp#: exports.TextSpan = TextSpan;",
      "target": "TextSpan"
    },
    {
      "source": "getTextFromTextChanges",
      "target": "TextChange"
    },
    {
      "source": "getTextFromTextChanges",
      "target": "TextChange"
    },
    {
      "source": "__decorate()",
      "target": "TextChange"
    },
    {
      "source": "FileTextChanges",
      "target": "TextChange"
    },
    {
      "source": "LanguageService",
      "target": "TextChange"
    },
    {
      "source": "LanguageService",
      "target": "TextChange"
    },
    {
      "source": "exp#: exports.TextChange = TextChange;",
      "target": "TextChange"
    },
    {
      "source": "__decorate()",
      "target": "FileTextChanges"
    },
    {
      "source": "CodeAction",
      "target": "FileTextChanges"
    },
    {
      "source": "CombinedCodeActions",
      "target": "FileTextChanges"
    },
    {
      "source": "RefactorEditInfo",
      "target": "FileTextChanges"
    },
    {
      "source": "LanguageService",
      "target": "FileTextChanges"
    },
    {
      "source": "exp#: exports.FileTextChanges = FileTextChanges;",
      "target": "FileTextChanges"
    },
    {
      "source": "CodeFixAction",
      "target": "CodeAction"
    },
    {
      "source": "exp#: exports.CodeAction = CodeAction;",
      "target": "CodeAction"
    },
    {
      "source": "LanguageService",
      "target": "CodeFixAction"
    },
    {
      "source": "exp#: exports.CodeFixAction = CodeFixAction;",
      "target": "CodeFixAction"
    },
    {
      "source": "__decorate()",
      "target": "CombinedCodeActions"
    },
    {
      "source": "LanguageService",
      "target": "CombinedCodeActions"
    },
    {
      "source": "exp#: exports.CombinedCodeActions = CombinedCodeActions;",
      "target": "CombinedCodeActions"
    },
    {
      "source": "__decorate()",
      "target": "DocumentSpan"
    },
    {
      "source": "__decorate()",
      "target": "DocumentSpan"
    },
    {
      "source": "__decorate()",
      "target": "DocumentSpan"
    },
    {
      "source": "DefinitionInfo",
      "target": "DocumentSpan"
    },
    {
      "source": "ImplementationLocation",
      "target": "DocumentSpan"
    },
    {
      "source": "ReferenceEntry",
      "target": "DocumentSpan"
    },
    {
      "source": "RenameLocation",
      "target": "DocumentSpan"
    },
    {
      "source": "CompilerFactory",
      "target": "DocumentSpan"
    },
    {
      "source": "exp#: exports.DocumentSpan = DocumentSpan;",
      "target": "DocumentSpan"
    },
    {
      "source": "__decorate()",
      "target": "DefinitionInfo"
    },
    {
      "source": "ReferencedSymbolDefinitionInfo",
      "target": "DefinitionInfo"
    },
    {
      "source": "CompilerFactory",
      "target": "DefinitionInfo"
    },
    {
      "source": "exp#: exports.DefinitionInfo = DefinitionInfo;",
      "target": "DefinitionInfo"
    },
    {
      "source": "Diagnostic",
      "target": "DiagnosticMessageChain"
    },
    {
      "source": "CompilerFactory",
      "target": "DiagnosticMessageChain"
    },
    {
      "source": "exp#: exports.DiagnosticMessageChain = DiagnosticMessage",
      "target": "DiagnosticMessageChain"
    },
    {
      "source": "getCompilerOptionsFromTsConfig",
      "target": "Diagnostic"
    },
    {
      "source": "__decorate()",
      "target": "Diagnostic"
    },
    {
      "source": "DiagnosticWithLocation",
      "target": "Diagnostic"
    },
    {
      "source": "CompilerFactory",
      "target": "Diagnostic"
    },
    {
      "source": "exp#: exports.Diagnostic = Diagnostic;",
      "target": "Diagnostic"
    },
    {
      "source": "CompilerFactory",
      "target": "DiagnosticWithLocation"
    },
    {
      "source": "CompilerFactory",
      "target": "DiagnosticWithLocation"
    },
    {
      "source": "exp#: exports.DiagnosticWithLocation = DiagnosticWithLoc",
      "target": "DiagnosticWithLocation"
    },
    {
      "source": "EmitOutput",
      "target": "OutputFile"
    },
    {
      "source": "exp#: exports.OutputFile = OutputFile;",
      "target": "OutputFile"
    },
    {
      "source": "__decorate()",
      "target": "EmitOutput"
    },
    {
      "source": "LanguageService",
      "target": "EmitOutput"
    },
    {
      "source": "exp#: exports.EmitOutput = EmitOutput;",
      "target": "EmitOutput"
    },
    {
      "source": "__decorate()",
      "target": "EmitResult"
    },
    {
      "source": "MemoryEmitResult",
      "target": "EmitResult"
    },
    {
      "source": "Program",
      "target": "EmitResult"
    },
    {
      "source": "Program",
      "target": "EmitResult"
    },
    {
      "source": "exp#: exports.EmitResult = EmitResult;",
      "target": "EmitResult"
    },
    {
      "source": "__decorate()",
      "target": "ImplementationLocation"
    },
    {
      "source": "LanguageService",
      "target": "ImplementationLocation"
    },
    {
      "source": "exp#: exports.ImplementationLocation = ImplementationLoc",
      "target": "ImplementationLocation"
    },
    {
      "source": "Program",
      "target": "MemoryEmitResult"
    },
    {
      "source": "exp#: exports.MemoryEmitResult = MemoryEmitResult;",
      "target": "MemoryEmitResult"
    },
    {
      "source": "__decorate()",
      "target": "RefactorEditInfo"
    },
    {
      "source": "LanguageService",
      "target": "RefactorEditInfo"
    },
    {
      "source": "exp#: exports.RefactorEditInfo = RefactorEditInfo;",
      "target": "RefactorEditInfo"
    },
    {
      "source": "__decorate()",
      "target": "ReferencedSymbol"
    },
    {
      "source": "CompilerFactory",
      "target": "ReferencedSymbol"
    },
    {
      "source": "exp#: exports.ReferencedSymbol = ReferencedSymbol;",
      "target": "ReferencedSymbol"
    },
    {
      "source": "__decorate()",
      "target": "ReferencedSymbolDefinitionInfo"
    },
    {
      "source": "CompilerFactory",
      "target": "ReferencedSymbolDefinitionInfo"
    },
    {
      "source": "exp#: exports.ReferencedSymbolDefinitionInfo = Reference",
      "target": "ReferencedSymbolDefinitionInfo"
    },
    {
      "source": "CompilerFactory",
      "target": "ReferenceEntry"
    },
    {
      "source": "exp#: exports.ReferenceEntry = ReferenceEntry;",
      "target": "ReferenceEntry"
    },
    {
      "source": "LanguageService",
      "target": "RenameLocation"
    },
    {
      "source": "exp#: exports.RenameLocation = RenameLocation;",
      "target": "RenameLocation"
    },
    {
      "source": "CompilerFactory",
      "target": "SymbolDisplayPart"
    },
    {
      "source": "exp#: exports.SymbolDisplayPart = SymbolDisplayPart;",
      "target": "SymbolDisplayPart"
    },
    {
      "source": "Program",
      "target": "TypeChecker"
    },
    {
      "source": "ProjectContext",
      "target": "TypeChecker"
    },
    {
      "source": "exp#: exports.TypeChecker = TypeChecker;",
      "target": "TypeChecker"
    },
    {
      "source": "LanguageService",
      "target": "Program"
    },
    {
      "source": "exp#: exports.Program = Program;",
      "target": "Program"
    },
    {
      "source": "ProjectContext",
      "target": "LanguageService"
    },
    {
      "source": "exp#: exports.LanguageService = LanguageService;",
      "target": "LanguageService"
    },
    {
      "source": "TypeParameter",
      "target": "Type"
    },
    {
      "source": "CompilerFactory",
      "target": "Type"
    },
    {
      "source": "exp#: exports.Type = Type;",
      "target": "Type"
    },
    {
      "source": "CompilerFactory",
      "target": "TypeParameter"
    },
    {
      "source": "exp#: exports.TypeParameter = TypeParameter;",
      "target": "TypeParameter"
    },
    {
      "source": "Directory",
      "target": "DirectoryEmitResult"
    },
    {
      "source": "Directory",
      "target": "DirectoryEmitResult"
    },
    {
      "source": "exp#: exports.DirectoryEmitResult = DirectoryEmitResult;",
      "target": "DirectoryEmitResult"
    },
    {
      "source": "DirectoryCache",
      "target": "Directory"
    },
    {
      "source": "exp#: exports.Directory = Directory;",
      "target": "Directory"
    },
    {
      "source": "Directory",
      "target": "getDirectoryCopyOptions"
    },
    {
      "source": "Directory",
      "target": "getDirectoryCopyOptions"
    },
    {
      "source": "Directory",
      "target": "getDirectoryCopyOptions"
    },
    {
      "source": "Directory",
      "target": "isStandardizedFilePath"
    },
    {
      "source": "Directory",
      "target": "isStandardizedFilePath"
    },
    {
      "source": "ProjectContext",
      "target": "DirectoryCoordinator"
    },
    {
      "source": "CompilerFactory",
      "target": "DirectoryCache"
    },
    {
      "source": "CompilerFactory",
      "target": "ForgetfulNodeCache"
    },
    {
      "source": "CompilerFactory",
      "target": "kindToWrapperMappings"
    },
    {
      "source": "ProjectContext",
      "target": "CompilerFactory"
    },
    {
      "source": "ProjectContext",
      "target": "InProjectCoordinator"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "__decorate()",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "ProjectContext",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "structurePrinterFactory",
      "target": "StructurePrinterFactory"
    },
    {
      "source": "exp#: exports.createWrappedNode = createWrappedNode;",
      "target": "createWrappedNode"
    },
    {
      "source": "createWrappedNode",
      "target": "ProjectContext"
    },
    {
      "source": "__decorate()",
      "target": "ProjectContext"
    },
    {
      "source": "__decorate()",
      "target": "ProjectContext"
    },
    {
      "source": "Project",
      "target": "ProjectContext"
    },
    {
      "source": "exp#: exports.Project = Project;",
      "target": "Project"
    },
    {
      "source": "Project",
      "target": "normalizeAmbientModuleName"
    },
    {
      "source": "Project",
      "target": "normalizeAmbientModuleName"
    },
    {
      "source": "Writers",
      "target": "structurePrinterFactory"
    },
    {
      "source": "WriterFunctions",
      "target": "Writers"
    },
    {
      "source": "exp#: exports.Writers = Writers;",
      "target": "Writers"
    },
    {
      "source": "Writers",
      "target": "getWriteFunctionForUnionOrIntersectionType"
    },
    {
      "source": "Writers",
      "target": "getWriteFunctionForUnionOrIntersectionType"
    },
    {
      "source": "Writers",
      "target": "anyPropertyHasValue"
    },
    {
      "source": "getWriteFunctionForUnionOrIntersectionType",
      "target": "writeSeparatedByString"
    },
    {
      "source": "Writers",
      "target": "writeValue"
    },
    {
      "source": "Writers",
      "target": "writeValue"
    },
    {
      "source": "Writers",
      "target": "writeValue"
    },
    {
      "source": "Writers",
      "target": "writeValue"
    },
    {
      "source": "writeSeparatedByString",
      "target": "writeValue"
    },
    {
      "source": "exp#: exports.WriterFunctions = WriterFunctions;",
      "target": "WriterFunctions"
    },
    {
      "source": "exp#: exports.TypeGuards = TypeGuards;",
      "target": "TypeGuards"
    }
  ]
}
